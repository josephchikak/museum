{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/framer-motion/dist/es/client-entry.mjs/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const a = registerClientReference(\n    function() { throw new Error(\"Attempted to call a() from the server but a is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"a\",\n);\nexport const abbr = registerClientReference(\n    function() { throw new Error(\"Attempted to call abbr() from the server but abbr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"abbr\",\n);\nexport const address = registerClientReference(\n    function() { throw new Error(\"Attempted to call address() from the server but address is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"address\",\n);\nexport const animate = registerClientReference(\n    function() { throw new Error(\"Attempted to call animate() from the server but animate is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"animate\",\n);\nexport const area = registerClientReference(\n    function() { throw new Error(\"Attempted to call area() from the server but area is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"area\",\n);\nexport const article = registerClientReference(\n    function() { throw new Error(\"Attempted to call article() from the server but article is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"article\",\n);\nexport const aside = registerClientReference(\n    function() { throw new Error(\"Attempted to call aside() from the server but aside is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"aside\",\n);\nexport const audio = registerClientReference(\n    function() { throw new Error(\"Attempted to call audio() from the server but audio is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"audio\",\n);\nexport const b = registerClientReference(\n    function() { throw new Error(\"Attempted to call b() from the server but b is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"b\",\n);\nexport const base = registerClientReference(\n    function() { throw new Error(\"Attempted to call base() from the server but base is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"base\",\n);\nexport const bdi = registerClientReference(\n    function() { throw new Error(\"Attempted to call bdi() from the server but bdi is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"bdi\",\n);\nexport const bdo = registerClientReference(\n    function() { throw new Error(\"Attempted to call bdo() from the server but bdo is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"bdo\",\n);\nexport const big = registerClientReference(\n    function() { throw new Error(\"Attempted to call big() from the server but big is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"big\",\n);\nexport const blockquote = registerClientReference(\n    function() { throw new Error(\"Attempted to call blockquote() from the server but blockquote is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"blockquote\",\n);\nexport const body = registerClientReference(\n    function() { throw new Error(\"Attempted to call body() from the server but body is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"body\",\n);\nexport const button = registerClientReference(\n    function() { throw new Error(\"Attempted to call button() from the server but button is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"button\",\n);\nexport const canvas = registerClientReference(\n    function() { throw new Error(\"Attempted to call canvas() from the server but canvas is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"canvas\",\n);\nexport const caption = registerClientReference(\n    function() { throw new Error(\"Attempted to call caption() from the server but caption is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"caption\",\n);\nexport const circle = registerClientReference(\n    function() { throw new Error(\"Attempted to call circle() from the server but circle is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"circle\",\n);\nexport const cite = registerClientReference(\n    function() { throw new Error(\"Attempted to call cite() from the server but cite is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"cite\",\n);\nexport const clipPath = registerClientReference(\n    function() { throw new Error(\"Attempted to call clipPath() from the server but clipPath is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"clipPath\",\n);\nexport const code = registerClientReference(\n    function() { throw new Error(\"Attempted to call code() from the server but code is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"code\",\n);\nexport const col = registerClientReference(\n    function() { throw new Error(\"Attempted to call col() from the server but col is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"col\",\n);\nexport const colgroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call colgroup() from the server but colgroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"colgroup\",\n);\nexport const create = registerClientReference(\n    function() { throw new Error(\"Attempted to call create() from the server but create is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"create\",\n);\nexport const data = registerClientReference(\n    function() { throw new Error(\"Attempted to call data() from the server but data is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"data\",\n);\nexport const datalist = registerClientReference(\n    function() { throw new Error(\"Attempted to call datalist() from the server but datalist is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"datalist\",\n);\nexport const dd = registerClientReference(\n    function() { throw new Error(\"Attempted to call dd() from the server but dd is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"dd\",\n);\nexport const defs = registerClientReference(\n    function() { throw new Error(\"Attempted to call defs() from the server but defs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"defs\",\n);\nexport const del = registerClientReference(\n    function() { throw new Error(\"Attempted to call del() from the server but del is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"del\",\n);\nexport const desc = registerClientReference(\n    function() { throw new Error(\"Attempted to call desc() from the server but desc is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"desc\",\n);\nexport const details = registerClientReference(\n    function() { throw new Error(\"Attempted to call details() from the server but details is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"details\",\n);\nexport const dfn = registerClientReference(\n    function() { throw new Error(\"Attempted to call dfn() from the server but dfn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"dfn\",\n);\nexport const dialog = registerClientReference(\n    function() { throw new Error(\"Attempted to call dialog() from the server but dialog is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"dialog\",\n);\nexport const div = registerClientReference(\n    function() { throw new Error(\"Attempted to call div() from the server but div is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"div\",\n);\nexport const dl = registerClientReference(\n    function() { throw new Error(\"Attempted to call dl() from the server but dl is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"dl\",\n);\nexport const dt = registerClientReference(\n    function() { throw new Error(\"Attempted to call dt() from the server but dt is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"dt\",\n);\nexport const ellipse = registerClientReference(\n    function() { throw new Error(\"Attempted to call ellipse() from the server but ellipse is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"ellipse\",\n);\nexport const em = registerClientReference(\n    function() { throw new Error(\"Attempted to call em() from the server but em is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"em\",\n);\nexport const embed = registerClientReference(\n    function() { throw new Error(\"Attempted to call embed() from the server but embed is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"embed\",\n);\nexport const feBlend = registerClientReference(\n    function() { throw new Error(\"Attempted to call feBlend() from the server but feBlend is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feBlend\",\n);\nexport const feColorMatrix = registerClientReference(\n    function() { throw new Error(\"Attempted to call feColorMatrix() from the server but feColorMatrix is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feColorMatrix\",\n);\nexport const feComponentTransfer = registerClientReference(\n    function() { throw new Error(\"Attempted to call feComponentTransfer() from the server but feComponentTransfer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feComponentTransfer\",\n);\nexport const feComposite = registerClientReference(\n    function() { throw new Error(\"Attempted to call feComposite() from the server but feComposite is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feComposite\",\n);\nexport const feConvolveMatrix = registerClientReference(\n    function() { throw new Error(\"Attempted to call feConvolveMatrix() from the server but feConvolveMatrix is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feConvolveMatrix\",\n);\nexport const feDiffuseLighting = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDiffuseLighting() from the server but feDiffuseLighting is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feDiffuseLighting\",\n);\nexport const feDisplacementMap = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDisplacementMap() from the server but feDisplacementMap is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feDisplacementMap\",\n);\nexport const feDistantLight = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDistantLight() from the server but feDistantLight is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feDistantLight\",\n);\nexport const feDropShadow = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDropShadow() from the server but feDropShadow is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feDropShadow\",\n);\nexport const feFlood = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFlood() from the server but feFlood is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feFlood\",\n);\nexport const feFuncA = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncA() from the server but feFuncA is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feFuncA\",\n);\nexport const feFuncB = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncB() from the server but feFuncB is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feFuncB\",\n);\nexport const feFuncG = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncG() from the server but feFuncG is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feFuncG\",\n);\nexport const feFuncR = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncR() from the server but feFuncR is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feFuncR\",\n);\nexport const feGaussianBlur = registerClientReference(\n    function() { throw new Error(\"Attempted to call feGaussianBlur() from the server but feGaussianBlur is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feGaussianBlur\",\n);\nexport const feImage = registerClientReference(\n    function() { throw new Error(\"Attempted to call feImage() from the server but feImage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feImage\",\n);\nexport const feMerge = registerClientReference(\n    function() { throw new Error(\"Attempted to call feMerge() from the server but feMerge is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feMerge\",\n);\nexport const feMergeNode = registerClientReference(\n    function() { throw new Error(\"Attempted to call feMergeNode() from the server but feMergeNode is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feMergeNode\",\n);\nexport const feMorphology = registerClientReference(\n    function() { throw new Error(\"Attempted to call feMorphology() from the server but feMorphology is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feMorphology\",\n);\nexport const feOffset = registerClientReference(\n    function() { throw new Error(\"Attempted to call feOffset() from the server but feOffset is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feOffset\",\n);\nexport const fePointLight = registerClientReference(\n    function() { throw new Error(\"Attempted to call fePointLight() from the server but fePointLight is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"fePointLight\",\n);\nexport const feSpecularLighting = registerClientReference(\n    function() { throw new Error(\"Attempted to call feSpecularLighting() from the server but feSpecularLighting is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feSpecularLighting\",\n);\nexport const feSpotLight = registerClientReference(\n    function() { throw new Error(\"Attempted to call feSpotLight() from the server but feSpotLight is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feSpotLight\",\n);\nexport const feTile = registerClientReference(\n    function() { throw new Error(\"Attempted to call feTile() from the server but feTile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feTile\",\n);\nexport const feTurbulence = registerClientReference(\n    function() { throw new Error(\"Attempted to call feTurbulence() from the server but feTurbulence is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"feTurbulence\",\n);\nexport const fieldset = registerClientReference(\n    function() { throw new Error(\"Attempted to call fieldset() from the server but fieldset is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"fieldset\",\n);\nexport const figcaption = registerClientReference(\n    function() { throw new Error(\"Attempted to call figcaption() from the server but figcaption is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"figcaption\",\n);\nexport const figure = registerClientReference(\n    function() { throw new Error(\"Attempted to call figure() from the server but figure is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"figure\",\n);\nexport const filter = registerClientReference(\n    function() { throw new Error(\"Attempted to call filter() from the server but filter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"filter\",\n);\nexport const footer = registerClientReference(\n    function() { throw new Error(\"Attempted to call footer() from the server but footer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"footer\",\n);\nexport const foreignObject = registerClientReference(\n    function() { throw new Error(\"Attempted to call foreignObject() from the server but foreignObject is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"foreignObject\",\n);\nexport const form = registerClientReference(\n    function() { throw new Error(\"Attempted to call form() from the server but form is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"form\",\n);\nexport const g = registerClientReference(\n    function() { throw new Error(\"Attempted to call g() from the server but g is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"g\",\n);\nexport const h1 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h1() from the server but h1 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"h1\",\n);\nexport const h2 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h2() from the server but h2 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"h2\",\n);\nexport const h3 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h3() from the server but h3 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"h3\",\n);\nexport const h4 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h4() from the server but h4 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"h4\",\n);\nexport const h5 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h5() from the server but h5 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"h5\",\n);\nexport const h6 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h6() from the server but h6 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"h6\",\n);\nexport const head = registerClientReference(\n    function() { throw new Error(\"Attempted to call head() from the server but head is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"head\",\n);\nexport const header = registerClientReference(\n    function() { throw new Error(\"Attempted to call header() from the server but header is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"header\",\n);\nexport const hgroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call hgroup() from the server but hgroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"hgroup\",\n);\nexport const hr = registerClientReference(\n    function() { throw new Error(\"Attempted to call hr() from the server but hr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"hr\",\n);\nexport const html = registerClientReference(\n    function() { throw new Error(\"Attempted to call html() from the server but html is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"html\",\n);\nexport const i = registerClientReference(\n    function() { throw new Error(\"Attempted to call i() from the server but i is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"i\",\n);\nexport const iframe = registerClientReference(\n    function() { throw new Error(\"Attempted to call iframe() from the server but iframe is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"iframe\",\n);\nexport const image = registerClientReference(\n    function() { throw new Error(\"Attempted to call image() from the server but image is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"image\",\n);\nexport const img = registerClientReference(\n    function() { throw new Error(\"Attempted to call img() from the server but img is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"img\",\n);\nexport const input = registerClientReference(\n    function() { throw new Error(\"Attempted to call input() from the server but input is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"input\",\n);\nexport const ins = registerClientReference(\n    function() { throw new Error(\"Attempted to call ins() from the server but ins is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"ins\",\n);\nexport const kbd = registerClientReference(\n    function() { throw new Error(\"Attempted to call kbd() from the server but kbd is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"kbd\",\n);\nexport const keygen = registerClientReference(\n    function() { throw new Error(\"Attempted to call keygen() from the server but keygen is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"keygen\",\n);\nexport const label = registerClientReference(\n    function() { throw new Error(\"Attempted to call label() from the server but label is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"label\",\n);\nexport const legend = registerClientReference(\n    function() { throw new Error(\"Attempted to call legend() from the server but legend is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"legend\",\n);\nexport const li = registerClientReference(\n    function() { throw new Error(\"Attempted to call li() from the server but li is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"li\",\n);\nexport const line = registerClientReference(\n    function() { throw new Error(\"Attempted to call line() from the server but line is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"line\",\n);\nexport const linearGradient = registerClientReference(\n    function() { throw new Error(\"Attempted to call linearGradient() from the server but linearGradient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"linearGradient\",\n);\nexport const link = registerClientReference(\n    function() { throw new Error(\"Attempted to call link() from the server but link is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"link\",\n);\nexport const main = registerClientReference(\n    function() { throw new Error(\"Attempted to call main() from the server but main is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"main\",\n);\nexport const map = registerClientReference(\n    function() { throw new Error(\"Attempted to call map() from the server but map is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"map\",\n);\nexport const mark = registerClientReference(\n    function() { throw new Error(\"Attempted to call mark() from the server but mark is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"mark\",\n);\nexport const marker = registerClientReference(\n    function() { throw new Error(\"Attempted to call marker() from the server but marker is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"marker\",\n);\nexport const mask = registerClientReference(\n    function() { throw new Error(\"Attempted to call mask() from the server but mask is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"mask\",\n);\nexport const menu = registerClientReference(\n    function() { throw new Error(\"Attempted to call menu() from the server but menu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"menu\",\n);\nexport const menuitem = registerClientReference(\n    function() { throw new Error(\"Attempted to call menuitem() from the server but menuitem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"menuitem\",\n);\nexport const metadata = registerClientReference(\n    function() { throw new Error(\"Attempted to call metadata() from the server but metadata is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"metadata\",\n);\nexport const meter = registerClientReference(\n    function() { throw new Error(\"Attempted to call meter() from the server but meter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"meter\",\n);\nexport const nav = registerClientReference(\n    function() { throw new Error(\"Attempted to call nav() from the server but nav is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"nav\",\n);\nexport const object = registerClientReference(\n    function() { throw new Error(\"Attempted to call object() from the server but object is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"object\",\n);\nexport const ol = registerClientReference(\n    function() { throw new Error(\"Attempted to call ol() from the server but ol is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"ol\",\n);\nexport const optgroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call optgroup() from the server but optgroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"optgroup\",\n);\nexport const option = registerClientReference(\n    function() { throw new Error(\"Attempted to call option() from the server but option is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"option\",\n);\nexport const output = registerClientReference(\n    function() { throw new Error(\"Attempted to call output() from the server but output is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"output\",\n);\nexport const p = registerClientReference(\n    function() { throw new Error(\"Attempted to call p() from the server but p is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"p\",\n);\nexport const param = registerClientReference(\n    function() { throw new Error(\"Attempted to call param() from the server but param is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"param\",\n);\nexport const path = registerClientReference(\n    function() { throw new Error(\"Attempted to call path() from the server but path is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"path\",\n);\nexport const pattern = registerClientReference(\n    function() { throw new Error(\"Attempted to call pattern() from the server but pattern is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"pattern\",\n);\nexport const picture = registerClientReference(\n    function() { throw new Error(\"Attempted to call picture() from the server but picture is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"picture\",\n);\nexport const polygon = registerClientReference(\n    function() { throw new Error(\"Attempted to call polygon() from the server but polygon is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"polygon\",\n);\nexport const polyline = registerClientReference(\n    function() { throw new Error(\"Attempted to call polyline() from the server but polyline is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"polyline\",\n);\nexport const pre = registerClientReference(\n    function() { throw new Error(\"Attempted to call pre() from the server but pre is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"pre\",\n);\nexport const progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call progress() from the server but progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"progress\",\n);\nexport const q = registerClientReference(\n    function() { throw new Error(\"Attempted to call q() from the server but q is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"q\",\n);\nexport const radialGradient = registerClientReference(\n    function() { throw new Error(\"Attempted to call radialGradient() from the server but radialGradient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"radialGradient\",\n);\nexport const rect = registerClientReference(\n    function() { throw new Error(\"Attempted to call rect() from the server but rect is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"rect\",\n);\nexport const rp = registerClientReference(\n    function() { throw new Error(\"Attempted to call rp() from the server but rp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"rp\",\n);\nexport const rt = registerClientReference(\n    function() { throw new Error(\"Attempted to call rt() from the server but rt is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"rt\",\n);\nexport const ruby = registerClientReference(\n    function() { throw new Error(\"Attempted to call ruby() from the server but ruby is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"ruby\",\n);\nexport const s = registerClientReference(\n    function() { throw new Error(\"Attempted to call s() from the server but s is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"s\",\n);\nexport const samp = registerClientReference(\n    function() { throw new Error(\"Attempted to call samp() from the server but samp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"samp\",\n);\nexport const script = registerClientReference(\n    function() { throw new Error(\"Attempted to call script() from the server but script is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"script\",\n);\nexport const section = registerClientReference(\n    function() { throw new Error(\"Attempted to call section() from the server but section is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"section\",\n);\nexport const select = registerClientReference(\n    function() { throw new Error(\"Attempted to call select() from the server but select is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"select\",\n);\nexport const small = registerClientReference(\n    function() { throw new Error(\"Attempted to call small() from the server but small is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"small\",\n);\nexport const source = registerClientReference(\n    function() { throw new Error(\"Attempted to call source() from the server but source is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"source\",\n);\nexport const span = registerClientReference(\n    function() { throw new Error(\"Attempted to call span() from the server but span is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"span\",\n);\nexport const stop = registerClientReference(\n    function() { throw new Error(\"Attempted to call stop() from the server but stop is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"stop\",\n);\nexport const strong = registerClientReference(\n    function() { throw new Error(\"Attempted to call strong() from the server but strong is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"strong\",\n);\nexport const style = registerClientReference(\n    function() { throw new Error(\"Attempted to call style() from the server but style is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"style\",\n);\nexport const sub = registerClientReference(\n    function() { throw new Error(\"Attempted to call sub() from the server but sub is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"sub\",\n);\nexport const summary = registerClientReference(\n    function() { throw new Error(\"Attempted to call summary() from the server but summary is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"summary\",\n);\nexport const sup = registerClientReference(\n    function() { throw new Error(\"Attempted to call sup() from the server but sup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"sup\",\n);\nexport const svg = registerClientReference(\n    function() { throw new Error(\"Attempted to call svg() from the server but svg is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"svg\",\n);\nexport const symbol = registerClientReference(\n    function() { throw new Error(\"Attempted to call symbol() from the server but symbol is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"symbol\",\n);\nexport const table = registerClientReference(\n    function() { throw new Error(\"Attempted to call table() from the server but table is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"table\",\n);\nexport const tbody = registerClientReference(\n    function() { throw new Error(\"Attempted to call tbody() from the server but tbody is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"tbody\",\n);\nexport const td = registerClientReference(\n    function() { throw new Error(\"Attempted to call td() from the server but td is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"td\",\n);\nexport const text = registerClientReference(\n    function() { throw new Error(\"Attempted to call text() from the server but text is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"text\",\n);\nexport const textPath = registerClientReference(\n    function() { throw new Error(\"Attempted to call textPath() from the server but textPath is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"textPath\",\n);\nexport const textarea = registerClientReference(\n    function() { throw new Error(\"Attempted to call textarea() from the server but textarea is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"textarea\",\n);\nexport const tfoot = registerClientReference(\n    function() { throw new Error(\"Attempted to call tfoot() from the server but tfoot is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"tfoot\",\n);\nexport const th = registerClientReference(\n    function() { throw new Error(\"Attempted to call th() from the server but th is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"th\",\n);\nexport const thead = registerClientReference(\n    function() { throw new Error(\"Attempted to call thead() from the server but thead is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"thead\",\n);\nexport const time = registerClientReference(\n    function() { throw new Error(\"Attempted to call time() from the server but time is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"time\",\n);\nexport const title = registerClientReference(\n    function() { throw new Error(\"Attempted to call title() from the server but title is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"title\",\n);\nexport const tr = registerClientReference(\n    function() { throw new Error(\"Attempted to call tr() from the server but tr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"tr\",\n);\nexport const track = registerClientReference(\n    function() { throw new Error(\"Attempted to call track() from the server but track is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"track\",\n);\nexport const tspan = registerClientReference(\n    function() { throw new Error(\"Attempted to call tspan() from the server but tspan is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"tspan\",\n);\nexport const u = registerClientReference(\n    function() { throw new Error(\"Attempted to call u() from the server but u is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"u\",\n);\nexport const ul = registerClientReference(\n    function() { throw new Error(\"Attempted to call ul() from the server but ul is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"ul\",\n);\nexport const use = registerClientReference(\n    function() { throw new Error(\"Attempted to call use() from the server but use is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"use\",\n);\nexport const video = registerClientReference(\n    function() { throw new Error(\"Attempted to call video() from the server but video is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"video\",\n);\nexport const view = registerClientReference(\n    function() { throw new Error(\"Attempted to call view() from the server but view is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"view\",\n);\nexport const wbr = registerClientReference(\n    function() { throw new Error(\"Attempted to call wbr() from the server but wbr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"wbr\",\n);\nexport const webview = registerClientReference(\n    function() { throw new Error(\"Attempted to call webview() from the server but webview is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs <module evaluation>\",\n    \"webview\",\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACO,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,qFACA;AAEG,MAAM,sBAAsB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,qFACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,qFACA;AAEG,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,qFACA;AAEG,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,qFACA;AAEG,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,qFACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,qFACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,qFACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,qFACA;AAEG,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,qFACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,IAAI,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnC;IAAa,MAAM,IAAI,MAAM;AAAkN,GAC/O,qFACA;AAEG,MAAM,KAAK,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpC;IAAa,MAAM,IAAI,MAAM;AAAoN,GACjP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,qFACA;AAEG,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qFACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,qFACA;AAEG,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,qFACA"}},
    {"offset": {"line": 671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/framer-motion/dist/es/client-entry.mjs/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const a = registerClientReference(\n    function() { throw new Error(\"Attempted to call a() from the server but a is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"a\",\n);\nexport const abbr = registerClientReference(\n    function() { throw new Error(\"Attempted to call abbr() from the server but abbr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"abbr\",\n);\nexport const address = registerClientReference(\n    function() { throw new Error(\"Attempted to call address() from the server but address is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"address\",\n);\nexport const animate = registerClientReference(\n    function() { throw new Error(\"Attempted to call animate() from the server but animate is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"animate\",\n);\nexport const area = registerClientReference(\n    function() { throw new Error(\"Attempted to call area() from the server but area is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"area\",\n);\nexport const article = registerClientReference(\n    function() { throw new Error(\"Attempted to call article() from the server but article is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"article\",\n);\nexport const aside = registerClientReference(\n    function() { throw new Error(\"Attempted to call aside() from the server but aside is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"aside\",\n);\nexport const audio = registerClientReference(\n    function() { throw new Error(\"Attempted to call audio() from the server but audio is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"audio\",\n);\nexport const b = registerClientReference(\n    function() { throw new Error(\"Attempted to call b() from the server but b is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"b\",\n);\nexport const base = registerClientReference(\n    function() { throw new Error(\"Attempted to call base() from the server but base is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"base\",\n);\nexport const bdi = registerClientReference(\n    function() { throw new Error(\"Attempted to call bdi() from the server but bdi is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"bdi\",\n);\nexport const bdo = registerClientReference(\n    function() { throw new Error(\"Attempted to call bdo() from the server but bdo is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"bdo\",\n);\nexport const big = registerClientReference(\n    function() { throw new Error(\"Attempted to call big() from the server but big is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"big\",\n);\nexport const blockquote = registerClientReference(\n    function() { throw new Error(\"Attempted to call blockquote() from the server but blockquote is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"blockquote\",\n);\nexport const body = registerClientReference(\n    function() { throw new Error(\"Attempted to call body() from the server but body is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"body\",\n);\nexport const button = registerClientReference(\n    function() { throw new Error(\"Attempted to call button() from the server but button is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"button\",\n);\nexport const canvas = registerClientReference(\n    function() { throw new Error(\"Attempted to call canvas() from the server but canvas is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"canvas\",\n);\nexport const caption = registerClientReference(\n    function() { throw new Error(\"Attempted to call caption() from the server but caption is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"caption\",\n);\nexport const circle = registerClientReference(\n    function() { throw new Error(\"Attempted to call circle() from the server but circle is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"circle\",\n);\nexport const cite = registerClientReference(\n    function() { throw new Error(\"Attempted to call cite() from the server but cite is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"cite\",\n);\nexport const clipPath = registerClientReference(\n    function() { throw new Error(\"Attempted to call clipPath() from the server but clipPath is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"clipPath\",\n);\nexport const code = registerClientReference(\n    function() { throw new Error(\"Attempted to call code() from the server but code is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"code\",\n);\nexport const col = registerClientReference(\n    function() { throw new Error(\"Attempted to call col() from the server but col is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"col\",\n);\nexport const colgroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call colgroup() from the server but colgroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"colgroup\",\n);\nexport const create = registerClientReference(\n    function() { throw new Error(\"Attempted to call create() from the server but create is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"create\",\n);\nexport const data = registerClientReference(\n    function() { throw new Error(\"Attempted to call data() from the server but data is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"data\",\n);\nexport const datalist = registerClientReference(\n    function() { throw new Error(\"Attempted to call datalist() from the server but datalist is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"datalist\",\n);\nexport const dd = registerClientReference(\n    function() { throw new Error(\"Attempted to call dd() from the server but dd is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"dd\",\n);\nexport const defs = registerClientReference(\n    function() { throw new Error(\"Attempted to call defs() from the server but defs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"defs\",\n);\nexport const del = registerClientReference(\n    function() { throw new Error(\"Attempted to call del() from the server but del is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"del\",\n);\nexport const desc = registerClientReference(\n    function() { throw new Error(\"Attempted to call desc() from the server but desc is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"desc\",\n);\nexport const details = registerClientReference(\n    function() { throw new Error(\"Attempted to call details() from the server but details is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"details\",\n);\nexport const dfn = registerClientReference(\n    function() { throw new Error(\"Attempted to call dfn() from the server but dfn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"dfn\",\n);\nexport const dialog = registerClientReference(\n    function() { throw new Error(\"Attempted to call dialog() from the server but dialog is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"dialog\",\n);\nexport const div = registerClientReference(\n    function() { throw new Error(\"Attempted to call div() from the server but div is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"div\",\n);\nexport const dl = registerClientReference(\n    function() { throw new Error(\"Attempted to call dl() from the server but dl is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"dl\",\n);\nexport const dt = registerClientReference(\n    function() { throw new Error(\"Attempted to call dt() from the server but dt is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"dt\",\n);\nexport const ellipse = registerClientReference(\n    function() { throw new Error(\"Attempted to call ellipse() from the server but ellipse is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"ellipse\",\n);\nexport const em = registerClientReference(\n    function() { throw new Error(\"Attempted to call em() from the server but em is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"em\",\n);\nexport const embed = registerClientReference(\n    function() { throw new Error(\"Attempted to call embed() from the server but embed is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"embed\",\n);\nexport const feBlend = registerClientReference(\n    function() { throw new Error(\"Attempted to call feBlend() from the server but feBlend is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feBlend\",\n);\nexport const feColorMatrix = registerClientReference(\n    function() { throw new Error(\"Attempted to call feColorMatrix() from the server but feColorMatrix is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feColorMatrix\",\n);\nexport const feComponentTransfer = registerClientReference(\n    function() { throw new Error(\"Attempted to call feComponentTransfer() from the server but feComponentTransfer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feComponentTransfer\",\n);\nexport const feComposite = registerClientReference(\n    function() { throw new Error(\"Attempted to call feComposite() from the server but feComposite is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feComposite\",\n);\nexport const feConvolveMatrix = registerClientReference(\n    function() { throw new Error(\"Attempted to call feConvolveMatrix() from the server but feConvolveMatrix is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feConvolveMatrix\",\n);\nexport const feDiffuseLighting = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDiffuseLighting() from the server but feDiffuseLighting is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feDiffuseLighting\",\n);\nexport const feDisplacementMap = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDisplacementMap() from the server but feDisplacementMap is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feDisplacementMap\",\n);\nexport const feDistantLight = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDistantLight() from the server but feDistantLight is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feDistantLight\",\n);\nexport const feDropShadow = registerClientReference(\n    function() { throw new Error(\"Attempted to call feDropShadow() from the server but feDropShadow is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feDropShadow\",\n);\nexport const feFlood = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFlood() from the server but feFlood is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feFlood\",\n);\nexport const feFuncA = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncA() from the server but feFuncA is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feFuncA\",\n);\nexport const feFuncB = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncB() from the server but feFuncB is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feFuncB\",\n);\nexport const feFuncG = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncG() from the server but feFuncG is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feFuncG\",\n);\nexport const feFuncR = registerClientReference(\n    function() { throw new Error(\"Attempted to call feFuncR() from the server but feFuncR is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feFuncR\",\n);\nexport const feGaussianBlur = registerClientReference(\n    function() { throw new Error(\"Attempted to call feGaussianBlur() from the server but feGaussianBlur is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feGaussianBlur\",\n);\nexport const feImage = registerClientReference(\n    function() { throw new Error(\"Attempted to call feImage() from the server but feImage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feImage\",\n);\nexport const feMerge = registerClientReference(\n    function() { throw new Error(\"Attempted to call feMerge() from the server but feMerge is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feMerge\",\n);\nexport const feMergeNode = registerClientReference(\n    function() { throw new Error(\"Attempted to call feMergeNode() from the server but feMergeNode is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feMergeNode\",\n);\nexport const feMorphology = registerClientReference(\n    function() { throw new Error(\"Attempted to call feMorphology() from the server but feMorphology is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feMorphology\",\n);\nexport const feOffset = registerClientReference(\n    function() { throw new Error(\"Attempted to call feOffset() from the server but feOffset is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feOffset\",\n);\nexport const fePointLight = registerClientReference(\n    function() { throw new Error(\"Attempted to call fePointLight() from the server but fePointLight is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"fePointLight\",\n);\nexport const feSpecularLighting = registerClientReference(\n    function() { throw new Error(\"Attempted to call feSpecularLighting() from the server but feSpecularLighting is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feSpecularLighting\",\n);\nexport const feSpotLight = registerClientReference(\n    function() { throw new Error(\"Attempted to call feSpotLight() from the server but feSpotLight is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feSpotLight\",\n);\nexport const feTile = registerClientReference(\n    function() { throw new Error(\"Attempted to call feTile() from the server but feTile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feTile\",\n);\nexport const feTurbulence = registerClientReference(\n    function() { throw new Error(\"Attempted to call feTurbulence() from the server but feTurbulence is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"feTurbulence\",\n);\nexport const fieldset = registerClientReference(\n    function() { throw new Error(\"Attempted to call fieldset() from the server but fieldset is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"fieldset\",\n);\nexport const figcaption = registerClientReference(\n    function() { throw new Error(\"Attempted to call figcaption() from the server but figcaption is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"figcaption\",\n);\nexport const figure = registerClientReference(\n    function() { throw new Error(\"Attempted to call figure() from the server but figure is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"figure\",\n);\nexport const filter = registerClientReference(\n    function() { throw new Error(\"Attempted to call filter() from the server but filter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"filter\",\n);\nexport const footer = registerClientReference(\n    function() { throw new Error(\"Attempted to call footer() from the server but footer is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"footer\",\n);\nexport const foreignObject = registerClientReference(\n    function() { throw new Error(\"Attempted to call foreignObject() from the server but foreignObject is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"foreignObject\",\n);\nexport const form = registerClientReference(\n    function() { throw new Error(\"Attempted to call form() from the server but form is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"form\",\n);\nexport const g = registerClientReference(\n    function() { throw new Error(\"Attempted to call g() from the server but g is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"g\",\n);\nexport const h1 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h1() from the server but h1 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"h1\",\n);\nexport const h2 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h2() from the server but h2 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"h2\",\n);\nexport const h3 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h3() from the server but h3 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"h3\",\n);\nexport const h4 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h4() from the server but h4 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"h4\",\n);\nexport const h5 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h5() from the server but h5 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"h5\",\n);\nexport const h6 = registerClientReference(\n    function() { throw new Error(\"Attempted to call h6() from the server but h6 is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"h6\",\n);\nexport const head = registerClientReference(\n    function() { throw new Error(\"Attempted to call head() from the server but head is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"head\",\n);\nexport const header = registerClientReference(\n    function() { throw new Error(\"Attempted to call header() from the server but header is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"header\",\n);\nexport const hgroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call hgroup() from the server but hgroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"hgroup\",\n);\nexport const hr = registerClientReference(\n    function() { throw new Error(\"Attempted to call hr() from the server but hr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"hr\",\n);\nexport const html = registerClientReference(\n    function() { throw new Error(\"Attempted to call html() from the server but html is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"html\",\n);\nexport const i = registerClientReference(\n    function() { throw new Error(\"Attempted to call i() from the server but i is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"i\",\n);\nexport const iframe = registerClientReference(\n    function() { throw new Error(\"Attempted to call iframe() from the server but iframe is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"iframe\",\n);\nexport const image = registerClientReference(\n    function() { throw new Error(\"Attempted to call image() from the server but image is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"image\",\n);\nexport const img = registerClientReference(\n    function() { throw new Error(\"Attempted to call img() from the server but img is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"img\",\n);\nexport const input = registerClientReference(\n    function() { throw new Error(\"Attempted to call input() from the server but input is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"input\",\n);\nexport const ins = registerClientReference(\n    function() { throw new Error(\"Attempted to call ins() from the server but ins is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"ins\",\n);\nexport const kbd = registerClientReference(\n    function() { throw new Error(\"Attempted to call kbd() from the server but kbd is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"kbd\",\n);\nexport const keygen = registerClientReference(\n    function() { throw new Error(\"Attempted to call keygen() from the server but keygen is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"keygen\",\n);\nexport const label = registerClientReference(\n    function() { throw new Error(\"Attempted to call label() from the server but label is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"label\",\n);\nexport const legend = registerClientReference(\n    function() { throw new Error(\"Attempted to call legend() from the server but legend is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"legend\",\n);\nexport const li = registerClientReference(\n    function() { throw new Error(\"Attempted to call li() from the server but li is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"li\",\n);\nexport const line = registerClientReference(\n    function() { throw new Error(\"Attempted to call line() from the server but line is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"line\",\n);\nexport const linearGradient = registerClientReference(\n    function() { throw new Error(\"Attempted to call linearGradient() from the server but linearGradient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"linearGradient\",\n);\nexport const link = registerClientReference(\n    function() { throw new Error(\"Attempted to call link() from the server but link is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"link\",\n);\nexport const main = registerClientReference(\n    function() { throw new Error(\"Attempted to call main() from the server but main is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"main\",\n);\nexport const map = registerClientReference(\n    function() { throw new Error(\"Attempted to call map() from the server but map is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"map\",\n);\nexport const mark = registerClientReference(\n    function() { throw new Error(\"Attempted to call mark() from the server but mark is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"mark\",\n);\nexport const marker = registerClientReference(\n    function() { throw new Error(\"Attempted to call marker() from the server but marker is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"marker\",\n);\nexport const mask = registerClientReference(\n    function() { throw new Error(\"Attempted to call mask() from the server but mask is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"mask\",\n);\nexport const menu = registerClientReference(\n    function() { throw new Error(\"Attempted to call menu() from the server but menu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"menu\",\n);\nexport const menuitem = registerClientReference(\n    function() { throw new Error(\"Attempted to call menuitem() from the server but menuitem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"menuitem\",\n);\nexport const metadata = registerClientReference(\n    function() { throw new Error(\"Attempted to call metadata() from the server but metadata is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"metadata\",\n);\nexport const meter = registerClientReference(\n    function() { throw new Error(\"Attempted to call meter() from the server but meter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"meter\",\n);\nexport const nav = registerClientReference(\n    function() { throw new Error(\"Attempted to call nav() from the server but nav is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"nav\",\n);\nexport const object = registerClientReference(\n    function() { throw new Error(\"Attempted to call object() from the server but object is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"object\",\n);\nexport const ol = registerClientReference(\n    function() { throw new Error(\"Attempted to call ol() from the server but ol is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"ol\",\n);\nexport const optgroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call optgroup() from the server but optgroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"optgroup\",\n);\nexport const option = registerClientReference(\n    function() { throw new Error(\"Attempted to call option() from the server but option is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"option\",\n);\nexport const output = registerClientReference(\n    function() { throw new Error(\"Attempted to call output() from the server but output is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"output\",\n);\nexport const p = registerClientReference(\n    function() { throw new Error(\"Attempted to call p() from the server but p is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"p\",\n);\nexport const param = registerClientReference(\n    function() { throw new Error(\"Attempted to call param() from the server but param is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"param\",\n);\nexport const path = registerClientReference(\n    function() { throw new Error(\"Attempted to call path() from the server but path is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"path\",\n);\nexport const pattern = registerClientReference(\n    function() { throw new Error(\"Attempted to call pattern() from the server but pattern is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"pattern\",\n);\nexport const picture = registerClientReference(\n    function() { throw new Error(\"Attempted to call picture() from the server but picture is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"picture\",\n);\nexport const polygon = registerClientReference(\n    function() { throw new Error(\"Attempted to call polygon() from the server but polygon is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"polygon\",\n);\nexport const polyline = registerClientReference(\n    function() { throw new Error(\"Attempted to call polyline() from the server but polyline is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"polyline\",\n);\nexport const pre = registerClientReference(\n    function() { throw new Error(\"Attempted to call pre() from the server but pre is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"pre\",\n);\nexport const progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call progress() from the server but progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"progress\",\n);\nexport const q = registerClientReference(\n    function() { throw new Error(\"Attempted to call q() from the server but q is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"q\",\n);\nexport const radialGradient = registerClientReference(\n    function() { throw new Error(\"Attempted to call radialGradient() from the server but radialGradient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"radialGradient\",\n);\nexport const rect = registerClientReference(\n    function() { throw new Error(\"Attempted to call rect() from the server but rect is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"rect\",\n);\nexport const rp = registerClientReference(\n    function() { throw new Error(\"Attempted to call rp() from the server but rp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"rp\",\n);\nexport const rt = registerClientReference(\n    function() { throw new Error(\"Attempted to call rt() from the server but rt is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"rt\",\n);\nexport const ruby = registerClientReference(\n    function() { throw new Error(\"Attempted to call ruby() from the server but ruby is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"ruby\",\n);\nexport const s = registerClientReference(\n    function() { throw new Error(\"Attempted to call s() from the server but s is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"s\",\n);\nexport const samp = registerClientReference(\n    function() { throw new Error(\"Attempted to call samp() from the server but samp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"samp\",\n);\nexport const script = registerClientReference(\n    function() { throw new Error(\"Attempted to call script() from the server but script is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"script\",\n);\nexport const section = registerClientReference(\n    function() { throw new Error(\"Attempted to call section() from the server but section is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"section\",\n);\nexport const select = registerClientReference(\n    function() { throw new Error(\"Attempted to call select() from the server but select is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"select\",\n);\nexport const small = registerClientReference(\n    function() { throw new Error(\"Attempted to call small() from the server but small is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"small\",\n);\nexport const source = registerClientReference(\n    function() { throw new Error(\"Attempted to call source() from the server but source is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"source\",\n);\nexport const span = registerClientReference(\n    function() { throw new Error(\"Attempted to call span() from the server but span is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"span\",\n);\nexport const stop = registerClientReference(\n    function() { throw new Error(\"Attempted to call stop() from the server but stop is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"stop\",\n);\nexport const strong = registerClientReference(\n    function() { throw new Error(\"Attempted to call strong() from the server but strong is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"strong\",\n);\nexport const style = registerClientReference(\n    function() { throw new Error(\"Attempted to call style() from the server but style is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"style\",\n);\nexport const sub = registerClientReference(\n    function() { throw new Error(\"Attempted to call sub() from the server but sub is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"sub\",\n);\nexport const summary = registerClientReference(\n    function() { throw new Error(\"Attempted to call summary() from the server but summary is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"summary\",\n);\nexport const sup = registerClientReference(\n    function() { throw new Error(\"Attempted to call sup() from the server but sup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"sup\",\n);\nexport const svg = registerClientReference(\n    function() { throw new Error(\"Attempted to call svg() from the server but svg is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"svg\",\n);\nexport const symbol = registerClientReference(\n    function() { throw new Error(\"Attempted to call symbol() from the server but symbol is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"symbol\",\n);\nexport const table = registerClientReference(\n    function() { throw new Error(\"Attempted to call table() from the server but table is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"table\",\n);\nexport const tbody = registerClientReference(\n    function() { throw new Error(\"Attempted to call tbody() from the server but tbody is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"tbody\",\n);\nexport const td = registerClientReference(\n    function() { throw new Error(\"Attempted to call td() from the server but td is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"td\",\n);\nexport const text = registerClientReference(\n    function() { throw new Error(\"Attempted to call text() from the server but text is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"text\",\n);\nexport const textPath = registerClientReference(\n    function() { throw new Error(\"Attempted to call textPath() from the server but textPath is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"textPath\",\n);\nexport const textarea = registerClientReference(\n    function() { throw new Error(\"Attempted to call textarea() from the server but textarea is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"textarea\",\n);\nexport const tfoot = registerClientReference(\n    function() { throw new Error(\"Attempted to call tfoot() from the server but tfoot is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"tfoot\",\n);\nexport const th = registerClientReference(\n    function() { throw new Error(\"Attempted to call th() from the server but th is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"th\",\n);\nexport const thead = registerClientReference(\n    function() { throw new Error(\"Attempted to call thead() from the server but thead is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"thead\",\n);\nexport const time = registerClientReference(\n    function() { throw new Error(\"Attempted to call time() from the server but time is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"time\",\n);\nexport const title = registerClientReference(\n    function() { throw new Error(\"Attempted to call title() from the server but title is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"title\",\n);\nexport const tr = registerClientReference(\n    function() { throw new Error(\"Attempted to call tr() from the server but tr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"tr\",\n);\nexport const track = registerClientReference(\n    function() { throw new Error(\"Attempted to call track() from the server but track is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"track\",\n);\nexport const tspan = registerClientReference(\n    function() { throw new Error(\"Attempted to call tspan() from the server but tspan is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"tspan\",\n);\nexport const u = registerClientReference(\n    function() { throw new Error(\"Attempted to call u() from the server but u is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"u\",\n);\nexport const ul = registerClientReference(\n    function() { throw new Error(\"Attempted to call ul() from the server but ul is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"ul\",\n);\nexport const use = registerClientReference(\n    function() { throw new Error(\"Attempted to call use() from the server but use is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"use\",\n);\nexport const video = registerClientReference(\n    function() { throw new Error(\"Attempted to call video() from the server but video is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"video\",\n);\nexport const view = registerClientReference(\n    function() { throw new Error(\"Attempted to call view() from the server but view is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"view\",\n);\nexport const wbr = registerClientReference(\n    function() { throw new Error(\"Attempted to call wbr() from the server but wbr is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"wbr\",\n);\nexport const webview = registerClientReference(\n    function() { throw new Error(\"Attempted to call webview() from the server but webview is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/framer-motion/dist/es/client-entry.mjs\",\n    \"webview\",\n);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1351, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1357, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/requester-node-http/src/createHttpRequester.ts"],"sourcesContent":["import http from 'http';\nimport https from 'https';\nimport { URL } from 'url';\n\nimport type { EndRequest, Requester, Response } from '@algolia/client-common';\n\nexport type CreateHttpRequesterOptions = Partial<{\n  agent: http.Agent | https.Agent;\n  httpAgent: http.Agent;\n  httpsAgent: https.Agent;\n  /**\n   * RequestOptions to be merged with the end request, it will override default options if provided.\n   */\n  requesterOptions: https.RequestOptions;\n}>;\n\n// Global agents allow us to reuse the TCP protocol with multiple clients\nconst agentOptions = { keepAlive: true };\nconst defaultHttpAgent = new http.Agent(agentOptions);\nconst defaultHttpsAgent = new https.Agent(agentOptions);\n\nexport function createHttpRequester({\n  agent: userGlobalAgent,\n  httpAgent: userHttpAgent,\n  httpsAgent: userHttpsAgent,\n  requesterOptions = {},\n}: CreateHttpRequesterOptions = {}): Requester {\n  const httpAgent = userHttpAgent || userGlobalAgent || defaultHttpAgent;\n  const httpsAgent = userHttpsAgent || userGlobalAgent || defaultHttpsAgent;\n\n  function send(request: EndRequest): Promise<Response> {\n    return new Promise((resolve) => {\n      let responseTimeout: NodeJS.Timeout | undefined;\n      let connectTimeout: NodeJS.Timeout | undefined;\n      const url = new URL(request.url);\n      const path = url.search === null ? url.pathname : `${url.pathname}${url.search}`;\n      const options: https.RequestOptions = {\n        agent: url.protocol === 'https:' ? httpsAgent : httpAgent,\n        hostname: url.hostname,\n        path,\n        method: request.method,\n        ...requesterOptions,\n        headers: {\n          ...request.headers,\n          ...requesterOptions.headers,\n        },\n      };\n\n      if (url.port && !requesterOptions.port) {\n        options.port = url.port;\n      }\n\n      const req = (url.protocol === 'https:' ? https : http).request(options, (response) => {\n        let contentBuffers: Buffer[] = [];\n\n        response.on('data', (chunk) => {\n          contentBuffers = contentBuffers.concat(chunk);\n        });\n\n        response.on('end', () => {\n          clearTimeout(connectTimeout as NodeJS.Timeout);\n          clearTimeout(responseTimeout as NodeJS.Timeout);\n\n          resolve({\n            status: response.statusCode || 0,\n            content: Buffer.concat(contentBuffers).toString(),\n            isTimedOut: false,\n          });\n        });\n      });\n\n      const createTimeout = (timeout: number, content: string): NodeJS.Timeout => {\n        return setTimeout(() => {\n          req.destroy();\n\n          resolve({\n            status: 0,\n            content,\n            isTimedOut: true,\n          });\n        }, timeout);\n      };\n\n      connectTimeout = createTimeout(request.connectTimeout, 'Connection timeout');\n\n      req.on('error', (error) => {\n        clearTimeout(connectTimeout as NodeJS.Timeout);\n        clearTimeout(responseTimeout!);\n        resolve({ status: 0, content: error.message, isTimedOut: false });\n      });\n\n      req.once('response', () => {\n        clearTimeout(connectTimeout as NodeJS.Timeout);\n        responseTimeout = createTimeout(request.responseTimeout, 'Socket timeout');\n      });\n\n      if (request.data !== undefined) {\n        req.write(request.data);\n      }\n\n      req.end();\n    });\n  }\n\n  return { send };\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,UAAU;AACjB,OAAO,WAAW;AAClB,SAAS,WAAW;;;;AAepB,IAAM,eAAe;IAAE,WAAW;AAAK;AACvC,IAAM,mBAAmB,kGAAI,UAAA,CAAK,KAAA,CAAM,YAAY;AACpD,IAAM,oBAAoB,mGAAI,UAAA,CAAM,KAAA,CAAM,YAAY;AAE/C,SAAS,oBAAoB,EAClC,OAAO,eAAA,EACP,WAAW,aAAA,EACX,YAAY,cAAA,EACZ,mBAAmB,CAAC,CAAA,EACtB,GAAgC,CAAC,CAAA,EAAc;IAC7C,MAAM,YAAY,iBAAiB,mBAAmB;IACtD,MAAM,aAAa,kBAAkB,mBAAmB;IAExD,SAAS,KAAK,OAAA,EAAwC;QACpD,OAAO,IAAI,QAAQ,CAAC,YAAY;YAC9B,IAAI;YACJ,IAAI;YACJ,MAAM,MAAM,iGAAI,MAAA,CAAI,QAAQ,GAAG;YAC/B,MAAM,OAAO,IAAI,MAAA,KAAW,OAAO,IAAI,QAAA,GAAW,GAAG,IAAI,QAAQ,GAAG,IAAI,MAAM,EAAA;YAC9E,MAAM,UAAgC;gBACpC,OAAO,IAAI,QAAA,KAAa,WAAW,aAAa;gBAChD,UAAU,IAAI,QAAA;gBACd;gBACA,QAAQ,QAAQ,MAAA;gBAChB,GAAG,gBAAA;gBACH,SAAS;oBACP,GAAG,QAAQ,OAAA;oBACX,GAAG,iBAAiB,OAAA;gBACtB;YACF;YAEA,IAAI,IAAI,IAAA,IAAQ,CAAC,iBAAiB,IAAA,EAAM;gBACtC,QAAQ,IAAA,GAAO,IAAI,IAAA;YACrB;YAEA,MAAM,MAAA,CAAO,IAAI,QAAA,KAAa,0GAAW,UAAA,iGAAQ,UAAA,EAAM,OAAA,CAAQ,SAAS,CAAC,aAAa;gBACpF,IAAI,iBAA2B,CAAC,CAAA;gBAEhC,SAAS,EAAA,CAAG,QAAQ,CAAC,UAAU;oBAC7B,iBAAiB,eAAe,MAAA,CAAO,KAAK;gBAC9C,CAAC;gBAED,SAAS,EAAA,CAAG,OAAO,MAAM;oBACvB,aAAa,cAAgC;oBAC7C,aAAa,eAAiC;oBAE9C,QAAQ;wBACN,QAAQ,SAAS,UAAA,IAAc;wBAC/B,SAAS,OAAO,MAAA,CAAO,cAAc,EAAE,QAAA,CAAS;wBAChD,YAAY;oBACd,CAAC;gBACH,CAAC;YACH,CAAC;YAED,MAAM,gBAAgB,CAAC,SAAiB,YAAoC;gBAC1E,OAAO,WAAW,MAAM;oBACtB,IAAI,OAAA,CAAQ;oBAEZ,QAAQ;wBACN,QAAQ;wBACR;wBACA,YAAY;oBACd,CAAC;gBACH,GAAG,OAAO;YACZ;YAEA,iBAAiB,cAAc,QAAQ,cAAA,EAAgB,oBAAoB;YAE3E,IAAI,EAAA,CAAG,SAAS,CAAC,UAAU;gBACzB,aAAa,cAAgC;gBAC7C,aAAa,eAAgB;gBAC7B,QAAQ;oBAAE,QAAQ;oBAAG,SAAS,MAAM,OAAA;oBAAS,YAAY;gBAAM,CAAC;YAClE,CAAC;YAED,IAAI,IAAA,CAAK,YAAY,MAAM;gBACzB,aAAa,cAAgC;gBAC7C,kBAAkB,cAAc,QAAQ,eAAA,EAAiB,gBAAgB;YAC3E,CAAC;YAED,IAAI,QAAQ,IAAA,KAAS,KAAA,GAAW;gBAC9B,IAAI,KAAA,CAAM,QAAQ,IAAI;YACxB;YAEA,IAAI,GAAA,CAAI;QACV,CAAC;IACH;IAEA,OAAO;QAAE;IAAK;AAChB"}},
    {"offset": {"line": 1446, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1452, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-common/src/cache/createBrowserLocalStorageCache.ts","turbopack://[project]/node_modules/@algolia/client-common/src/cache/createNullCache.ts","turbopack://[project]/node_modules/@algolia/client-common/src/cache/createFallbackableCache.ts","turbopack://[project]/node_modules/@algolia/client-common/src/cache/createMemoryCache.ts","turbopack://[project]/node_modules/@algolia/client-common/src/constants.ts","turbopack://[project]/node_modules/@algolia/client-common/src/createAlgoliaAgent.ts","turbopack://[project]/node_modules/@algolia/client-common/src/createAuth.ts","turbopack://[project]/node_modules/@algolia/client-common/src/createIterablePromise.ts","turbopack://[project]/node_modules/@algolia/client-common/src/getAlgoliaAgent.ts","turbopack://[project]/node_modules/@algolia/client-common/src/logger/createNullLogger.ts","turbopack://[project]/node_modules/@algolia/client-common/src/transporter/createStatefulHost.ts","turbopack://[project]/node_modules/@algolia/client-common/src/transporter/errors.ts","turbopack://[project]/node_modules/@algolia/client-common/src/transporter/helpers.ts","turbopack://[project]/node_modules/@algolia/client-common/src/transporter/responses.ts","turbopack://[project]/node_modules/@algolia/client-common/src/transporter/stackTrace.ts","turbopack://[project]/node_modules/@algolia/client-common/src/transporter/createTransporter.ts","turbopack://[project]/node_modules/@algolia/client-common/src/types/logger.ts"],"sourcesContent":["import type { BrowserLocalStorageCacheItem, BrowserLocalStorageOptions, Cache, CacheEvents } from '../types';\n\nexport function createBrowserLocalStorageCache(options: BrowserLocalStorageOptions): Cache {\n  let storage: Storage;\n  // We've changed the namespace to avoid conflicts with v4, as this version is a huge breaking change\n  const namespaceKey = `algolia-client-js-${options.key}`;\n\n  function getStorage(): Storage {\n    if (storage === undefined) {\n      storage = options.localStorage || window.localStorage;\n    }\n\n    return storage;\n  }\n\n  function getNamespace<TValue>(): Record<string, TValue> {\n    return JSON.parse(getStorage().getItem(namespaceKey) || '{}');\n  }\n\n  function setNamespace(namespace: Record<string, any>): void {\n    getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n  }\n\n  function removeOutdatedCacheItems(): void {\n    const timeToLive = options.timeToLive ? options.timeToLive * 1000 : null;\n    const namespace = getNamespace<BrowserLocalStorageCacheItem>();\n\n    const filteredNamespaceWithoutOldFormattedCacheItems = Object.fromEntries(\n      Object.entries(namespace).filter(([, cacheItem]) => {\n        return cacheItem.timestamp !== undefined;\n      }),\n    );\n\n    setNamespace(filteredNamespaceWithoutOldFormattedCacheItems);\n\n    if (!timeToLive) {\n      return;\n    }\n\n    const filteredNamespaceWithoutExpiredItems = Object.fromEntries(\n      Object.entries(filteredNamespaceWithoutOldFormattedCacheItems).filter(([, cacheItem]) => {\n        const currentTimestamp = new Date().getTime();\n        const isExpired = cacheItem.timestamp + timeToLive < currentTimestamp;\n\n        return !isExpired;\n      }),\n    );\n\n    setNamespace(filteredNamespaceWithoutExpiredItems);\n  }\n\n  return {\n    get<TValue>(\n      key: Record<string, any> | string,\n      defaultValue: () => Promise<TValue>,\n      events: CacheEvents<TValue> = {\n        miss: () => Promise.resolve(),\n      },\n    ): Promise<TValue> {\n      return Promise.resolve()\n        .then(() => {\n          removeOutdatedCacheItems();\n\n          return getNamespace<Promise<BrowserLocalStorageCacheItem>>()[JSON.stringify(key)];\n        })\n        .then((value) => {\n          return Promise.all([value ? value.value : defaultValue(), value !== undefined]);\n        })\n        .then(([value, exists]) => {\n          return Promise.all([value, exists || events.miss(value)]);\n        })\n        .then(([value]) => value);\n    },\n\n    set<TValue>(key: Record<string, any> | string, value: TValue): Promise<TValue> {\n      return Promise.resolve().then(() => {\n        const namespace = getNamespace();\n\n        namespace[JSON.stringify(key)] = {\n          timestamp: new Date().getTime(),\n          value,\n        };\n\n        getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n\n        return value;\n      });\n    },\n\n    delete(key: Record<string, any> | string): Promise<void> {\n      return Promise.resolve().then(() => {\n        const namespace = getNamespace();\n\n        delete namespace[JSON.stringify(key)];\n\n        getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n      });\n    },\n\n    clear(): Promise<void> {\n      return Promise.resolve().then(() => {\n        getStorage().removeItem(namespaceKey);\n      });\n    },\n  };\n}\n","import type { Cache, CacheEvents } from '../types';\n\nexport function createNullCache(): Cache {\n  return {\n    get<TValue>(\n      _key: Record<string, any> | string,\n      defaultValue: () => Promise<TValue>,\n      events: CacheEvents<TValue> = {\n        miss: (): Promise<void> => Promise.resolve(),\n      },\n    ): Promise<TValue> {\n      const value = defaultValue();\n\n      return value.then((result) => Promise.all([result, events.miss(result)])).then(([result]) => result);\n    },\n\n    set<TValue>(_key: Record<string, any> | string, value: TValue): Promise<TValue> {\n      return Promise.resolve(value);\n    },\n\n    delete(_key: Record<string, any> | string): Promise<void> {\n      return Promise.resolve();\n    },\n\n    clear(): Promise<void> {\n      return Promise.resolve();\n    },\n  };\n}\n","import type { Cache, CacheEvents, FallbackableCacheOptions } from '../types';\nimport { createNullCache } from './createNullCache';\n\nexport function createFallbackableCache(options: FallbackableCacheOptions): Cache {\n  const caches = [...options.caches];\n  const current = caches.shift();\n\n  if (current === undefined) {\n    return createNullCache();\n  }\n\n  return {\n    get<TValue>(\n      key: Record<string, any> | string,\n      defaultValue: () => Promise<TValue>,\n      events: CacheEvents<TValue> = {\n        miss: (): Promise<void> => Promise.resolve(),\n      },\n    ): Promise<TValue> {\n      return current.get(key, defaultValue, events).catch(() => {\n        return createFallbackableCache({ caches }).get(key, defaultValue, events);\n      });\n    },\n\n    set<TValue>(key: Record<string, any> | string, value: TValue): Promise<TValue> {\n      return current.set(key, value).catch(() => {\n        return createFallbackableCache({ caches }).set(key, value);\n      });\n    },\n\n    delete(key: Record<string, any> | string): Promise<void> {\n      return current.delete(key).catch(() => {\n        return createFallbackableCache({ caches }).delete(key);\n      });\n    },\n\n    clear(): Promise<void> {\n      return current.clear().catch(() => {\n        return createFallbackableCache({ caches }).clear();\n      });\n    },\n  };\n}\n","import type { Cache, CacheEvents, MemoryCacheOptions } from '../types';\n\nexport function createMemoryCache(options: MemoryCacheOptions = { serializable: true }): Cache {\n  let cache: Record<string, any> = {};\n\n  return {\n    get<TValue>(\n      key: Record<string, any> | string,\n      defaultValue: () => Promise<TValue>,\n      events: CacheEvents<TValue> = {\n        miss: (): Promise<void> => Promise.resolve(),\n      },\n    ): Promise<TValue> {\n      const keyAsString = JSON.stringify(key);\n\n      if (keyAsString in cache) {\n        return Promise.resolve(options.serializable ? JSON.parse(cache[keyAsString]) : cache[keyAsString]);\n      }\n\n      const promise = defaultValue();\n\n      return promise.then((value: TValue) => events.miss(value)).then(() => promise);\n    },\n\n    set<TValue>(key: Record<string, any> | string, value: TValue): Promise<TValue> {\n      cache[JSON.stringify(key)] = options.serializable ? JSON.stringify(value) : value;\n\n      return Promise.resolve(value);\n    },\n\n    delete(key: Record<string, unknown> | string): Promise<void> {\n      delete cache[JSON.stringify(key)];\n\n      return Promise.resolve();\n    },\n\n    clear(): Promise<void> {\n      cache = {};\n\n      return Promise.resolve();\n    },\n  };\n}\n","export const DEFAULT_CONNECT_TIMEOUT_BROWSER = 1000;\nexport const DEFAULT_READ_TIMEOUT_BROWSER = 2000;\nexport const DEFAULT_WRITE_TIMEOUT_BROWSER = 30000;\n\nexport const DEFAULT_CONNECT_TIMEOUT_NODE = 2000;\nexport const DEFAULT_READ_TIMEOUT_NODE = 5000;\nexport const DEFAULT_WRITE_TIMEOUT_NODE = 30000;\n","import type { AlgoliaAgent, AlgoliaAgentOptions } from './types';\n\nexport function createAlgoliaAgent(version: string): AlgoliaAgent {\n  const algoliaAgent = {\n    value: `Algolia for JavaScript (${version})`,\n    add(options: AlgoliaAgentOptions): AlgoliaAgent {\n      const addedAlgoliaAgent = `; ${options.segment}${options.version !== undefined ? ` (${options.version})` : ''}`;\n\n      if (algoliaAgent.value.indexOf(addedAlgoliaAgent) === -1) {\n        algoliaAgent.value = `${algoliaAgent.value}${addedAlgoliaAgent}`;\n      }\n\n      return algoliaAgent;\n    },\n  };\n\n  return algoliaAgent;\n}\n","import type { AuthMode, Headers, QueryParameters } from './types';\n\nexport function createAuth(\n  appId: string,\n  apiKey: string,\n  authMode: AuthMode = 'WithinHeaders',\n): {\n  readonly headers: () => Headers;\n  readonly queryParameters: () => QueryParameters;\n} {\n  const credentials = {\n    'x-algolia-api-key': apiKey,\n    'x-algolia-application-id': appId,\n  };\n\n  return {\n    headers(): Headers {\n      return authMode === 'WithinHeaders' ? credentials : {};\n    },\n\n    queryParameters(): QueryParameters {\n      return authMode === 'WithinQueryParameters' ? credentials : {};\n    },\n  };\n}\n","import type { CreateIterablePromise } from './types/createIterablePromise';\n\n/**\n * Helper: Returns the promise of a given `func` to iterate on, based on a given `validate` condition.\n *\n * @param createIterator - The createIterator options.\n * @param createIterator.func - The function to run, which returns a promise.\n * @param createIterator.validate - The validator function. It receives the resolved return of `func`.\n * @param createIterator.aggregator - The function that runs right after the `func` method has been executed, allows you to do anything with the response before `validate`.\n * @param createIterator.error - The `validate` condition to throw an error, and its message.\n * @param createIterator.timeout - The function to decide how long to wait between iterations.\n */\nexport function createIterablePromise<TResponse>({\n  func,\n  validate,\n  aggregator,\n  error,\n  timeout = (): number => 0,\n}: CreateIterablePromise<TResponse>): Promise<TResponse> {\n  const retry = (previousResponse?: TResponse): Promise<TResponse> => {\n    return new Promise<TResponse>((resolve, reject) => {\n      func(previousResponse)\n        .then((response) => {\n          if (aggregator) {\n            aggregator(response);\n          }\n\n          if (validate(response)) {\n            return resolve(response);\n          }\n\n          if (error && error.validate(response)) {\n            return reject(new Error(error.message(response)));\n          }\n\n          return setTimeout(() => {\n            retry(response).then(resolve).catch(reject);\n          }, timeout());\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  };\n\n  return retry();\n}\n","import { createAlgoliaAgent } from './createAlgoliaAgent';\nimport type { AlgoliaAgent, AlgoliaAgentOptions } from './types';\n\nexport type GetAlgoliaAgent = {\n  algoliaAgents: AlgoliaAgentOptions[];\n  client: string;\n  version: string;\n};\n\nexport function getAlgoliaAgent({ algoliaAgents, client, version }: GetAlgoliaAgent): AlgoliaAgent {\n  const defaultAlgoliaAgent = createAlgoliaAgent(version).add({\n    segment: client,\n    version,\n  });\n\n  algoliaAgents.forEach((algoliaAgent) => defaultAlgoliaAgent.add(algoliaAgent));\n\n  return defaultAlgoliaAgent;\n}\n","import type { Logger } from '../types/logger';\n\nexport function createNullLogger(): Logger {\n  return {\n    debug(_message: string, _args?: any): Promise<void> {\n      return Promise.resolve();\n    },\n    info(_message: string, _args?: any): Promise<void> {\n      return Promise.resolve();\n    },\n    error(_message: string, _args?: any): Promise<void> {\n      return Promise.resolve();\n    },\n  };\n}\n","import type { Host, StatefulHost } from '../types';\n\n// By default, API Clients at Algolia have expiration delay of 5 mins.\n// In the JavaScript client, we have 2 mins.\nconst EXPIRATION_DELAY = 2 * 60 * 1000;\n\nexport function createStatefulHost(host: Host, status: StatefulHost['status'] = 'up'): StatefulHost {\n  const lastUpdate = Date.now();\n\n  function isUp(): boolean {\n    return status === 'up' || Date.now() - lastUpdate > EXPIRATION_DELAY;\n  }\n\n  function isTimedOut(): boolean {\n    return status === 'timed out' && Date.now() - lastUpdate <= EXPIRATION_DELAY;\n  }\n\n  return { ...host, status, lastUpdate, isUp, isTimedOut };\n}\n","import type { Response, StackFrame } from '../types';\n\nexport class AlgoliaError extends Error {\n  override name: string = 'AlgoliaError';\n\n  constructor(message: string, name: string) {\n    super(message);\n\n    if (name) {\n      this.name = name;\n    }\n  }\n}\n\nexport class ErrorWithStackTrace extends AlgoliaError {\n  stackTrace: StackFrame[];\n\n  constructor(message: string, stackTrace: StackFrame[], name: string) {\n    super(message, name);\n    // the array and object should be frozen to reflect the stackTrace at the time of the error\n    this.stackTrace = stackTrace;\n  }\n}\n\nexport class RetryError extends ErrorWithStackTrace {\n  constructor(stackTrace: StackFrame[]) {\n    super(\n      'Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support.',\n      stackTrace,\n      'RetryError',\n    );\n  }\n}\n\nexport class ApiError extends ErrorWithStackTrace {\n  status: number;\n\n  constructor(message: string, status: number, stackTrace: StackFrame[], name = 'ApiError') {\n    super(message, stackTrace, name);\n    this.status = status;\n  }\n}\n\nexport class DeserializationError extends AlgoliaError {\n  response: Response;\n\n  constructor(message: string, response: Response) {\n    super(message, 'DeserializationError');\n    this.response = response;\n  }\n}\n\nexport type DetailedErrorWithMessage = {\n  message: string;\n  label: string;\n};\n\nexport type DetailedErrorWithTypeID = {\n  id: string;\n  type: string;\n  name?: string;\n};\n\nexport type DetailedError = {\n  code: string;\n  details?: DetailedErrorWithMessage[] | DetailedErrorWithTypeID[];\n};\n\n// DetailedApiError is only used by the ingestion client to return more informative error, other clients will use ApiClient.\nexport class DetailedApiError extends ApiError {\n  error: DetailedError;\n\n  constructor(message: string, status: number, error: DetailedError, stackTrace: StackFrame[]) {\n    super(message, status, stackTrace, 'DetailedApiError');\n    this.error = error;\n  }\n}\n","import type { Headers, Host, QueryParameters, Request, RequestOptions, Response, StackFrame } from '../types';\nimport { ApiError, DeserializationError, DetailedApiError } from './errors';\n\nexport function shuffle<TData>(array: TData[]): TData[] {\n  const shuffledArray = array;\n\n  for (let c = array.length - 1; c > 0; c--) {\n    const b = Math.floor(Math.random() * (c + 1));\n    const a = array[c];\n\n    shuffledArray[c] = array[b];\n    shuffledArray[b] = a;\n  }\n\n  return shuffledArray;\n}\n\nexport function serializeUrl(host: Host, path: string, queryParameters: QueryParameters): string {\n  const queryParametersAsString = serializeQueryParameters(queryParameters);\n  let url = `${host.protocol}://${host.url}${host.port ? `:${host.port}` : ''}/${\n    path.charAt(0) === '/' ? path.substring(1) : path\n  }`;\n\n  if (queryParametersAsString.length) {\n    url += `?${queryParametersAsString}`;\n  }\n\n  return url;\n}\n\nexport function serializeQueryParameters(parameters: QueryParameters): string {\n  return Object.keys(parameters)\n    .filter((key) => parameters[key] !== undefined)\n    .sort()\n    .map(\n      (key) =>\n        `${key}=${encodeURIComponent(\n          Object.prototype.toString.call(parameters[key]) === '[object Array]'\n            ? parameters[key].join(',')\n            : parameters[key],\n        ).replace(/\\+/g, '%20')}`,\n    )\n    .join('&');\n}\n\nexport function serializeData(request: Request, requestOptions: RequestOptions): string | undefined {\n  if (request.method === 'GET' || (request.data === undefined && requestOptions.data === undefined)) {\n    return undefined;\n  }\n\n  const data = Array.isArray(request.data) ? request.data : { ...request.data, ...requestOptions.data };\n\n  return JSON.stringify(data);\n}\n\nexport function serializeHeaders(\n  baseHeaders: Headers,\n  requestHeaders: Headers,\n  requestOptionsHeaders?: Headers,\n): Headers {\n  const headers: Headers = {\n    Accept: 'application/json',\n    ...baseHeaders,\n    ...requestHeaders,\n    ...requestOptionsHeaders,\n  };\n  const serializedHeaders: Headers = {};\n\n  Object.keys(headers).forEach((header) => {\n    const value = headers[header];\n    serializedHeaders[header.toLowerCase()] = value;\n  });\n\n  return serializedHeaders;\n}\n\nexport function deserializeSuccess<TObject>(response: Response): TObject {\n  try {\n    return JSON.parse(response.content);\n  } catch (e) {\n    throw new DeserializationError((e as Error).message, response);\n  }\n}\n\nexport function deserializeFailure({ content, status }: Response, stackFrame: StackFrame[]): Error {\n  try {\n    const parsed = JSON.parse(content);\n    if ('error' in parsed) {\n      return new DetailedApiError(parsed.message, status, parsed.error, stackFrame);\n    }\n    return new ApiError(parsed.message, status, stackFrame);\n  } catch {\n    // ..\n  }\n  return new ApiError(content, status, stackFrame);\n}\n","import type { Response } from '../types';\n\nexport function isNetworkError({ isTimedOut, status }: Omit<Response, 'content'>): boolean {\n  return !isTimedOut && ~~status === 0;\n}\n\nexport function isRetryable({ isTimedOut, status }: Omit<Response, 'content'>): boolean {\n  return isTimedOut || isNetworkError({ isTimedOut, status }) || (~~(status / 100) !== 2 && ~~(status / 100) !== 4);\n}\n\nexport function isSuccess({ status }: Pick<Response, 'status'>): boolean {\n  return ~~(status / 100) === 2;\n}\n","import type { Headers, StackFrame } from '../types';\n\nexport function stackTraceWithoutCredentials(stackTrace: StackFrame[]): StackFrame[] {\n  return stackTrace.map((stackFrame) => stackFrameWithoutCredentials(stackFrame));\n}\n\nexport function stackFrameWithoutCredentials(stackFrame: StackFrame): StackFrame {\n  const modifiedHeaders: Headers = stackFrame.request.headers['x-algolia-api-key']\n    ? { 'x-algolia-api-key': '*****' }\n    : {};\n\n  return {\n    ...stackFrame,\n    request: {\n      ...stackFrame.request,\n      headers: {\n        ...stackFrame.request.headers,\n        ...modifiedHeaders,\n      },\n    },\n  };\n}\n","import type {\n  EndRequest,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n  Response,\n  StackFrame,\n  Transporter,\n  TransporterOptions,\n} from '../types';\nimport { createStatefulHost } from './createStatefulHost';\nimport { RetryError } from './errors';\nimport { deserializeFailure, deserializeSuccess, serializeData, serializeHeaders, serializeUrl } from './helpers';\nimport { isRetryable, isSuccess } from './responses';\nimport { stackFrameWithoutCredentials, stackTraceWithoutCredentials } from './stackTrace';\n\ntype RetryableOptions = {\n  hosts: Host[];\n  getTimeout: (retryCount: number, timeout: number) => number;\n};\n\nexport function createTransporter({\n  hosts,\n  hostsCache,\n  baseHeaders,\n  logger,\n  baseQueryParameters,\n  algoliaAgent,\n  timeouts,\n  requester,\n  requestsCache,\n  responsesCache,\n}: TransporterOptions): Transporter {\n  async function createRetryableOptions(compatibleHosts: Host[]): Promise<RetryableOptions> {\n    const statefulHosts = await Promise.all(\n      compatibleHosts.map((compatibleHost) => {\n        return hostsCache.get(compatibleHost, () => {\n          return Promise.resolve(createStatefulHost(compatibleHost));\n        });\n      }),\n    );\n    const hostsUp = statefulHosts.filter((host) => host.isUp());\n    const hostsTimedOut = statefulHosts.filter((host) => host.isTimedOut());\n\n    // Note, we put the hosts that previously timed out on the end of the list.\n    const hostsAvailable = [...hostsUp, ...hostsTimedOut];\n    const compatibleHostsAvailable = hostsAvailable.length > 0 ? hostsAvailable : compatibleHosts;\n\n    return {\n      hosts: compatibleHostsAvailable,\n      getTimeout(timeoutsCount: number, baseTimeout: number): number {\n        /**\n         * Imagine that you have 4 hosts, if timeouts will increase\n         * on the following way: 1 (timed out) > 4 (timed out) > 5 (200).\n         *\n         * Note that, the very next request, we start from the previous timeout.\n         *\n         *  5 (timed out) > 6 (timed out) > 7 ...\n         *\n         * This strategy may need to be reviewed, but is the strategy on the our\n         * current v3 version.\n         */\n        const timeoutMultiplier =\n          hostsTimedOut.length === 0 && timeoutsCount === 0 ? 1 : hostsTimedOut.length + 3 + timeoutsCount;\n\n        return timeoutMultiplier * baseTimeout;\n      },\n    };\n  }\n\n  async function retryableRequest<TResponse>(\n    request: Request,\n    requestOptions: RequestOptions,\n    isRead = true,\n  ): Promise<TResponse> {\n    const stackTrace: StackFrame[] = [];\n\n    /**\n     * First we prepare the payload that do not depend from hosts.\n     */\n    const data = serializeData(request, requestOptions);\n    const headers = serializeHeaders(baseHeaders, request.headers, requestOptions.headers);\n\n    // On `GET`, the data is proxied to query parameters.\n    const dataQueryParameters: QueryParameters =\n      request.method === 'GET'\n        ? {\n            ...request.data,\n            ...requestOptions.data,\n          }\n        : {};\n\n    const queryParameters: QueryParameters = {\n      ...baseQueryParameters,\n      ...request.queryParameters,\n      ...dataQueryParameters,\n    };\n\n    if (algoliaAgent.value) {\n      queryParameters['x-algolia-agent'] = algoliaAgent.value;\n    }\n\n    if (requestOptions && requestOptions.queryParameters) {\n      for (const key of Object.keys(requestOptions.queryParameters)) {\n        // We want to keep `undefined` and `null` values,\n        // but also avoid stringifying `object`s, as they are\n        // handled in the `serializeUrl` step right after.\n        if (\n          !requestOptions.queryParameters[key] ||\n          Object.prototype.toString.call(requestOptions.queryParameters[key]) === '[object Object]'\n        ) {\n          queryParameters[key] = requestOptions.queryParameters[key];\n        } else {\n          queryParameters[key] = requestOptions.queryParameters[key].toString();\n        }\n      }\n    }\n\n    let timeoutsCount = 0;\n\n    const retry = async (\n      retryableHosts: Host[],\n      getTimeout: (timeoutsCount: number, timeout: number) => number,\n    ): Promise<TResponse> => {\n      /**\n       * We iterate on each host, until there is no host left.\n       */\n      const host = retryableHosts.pop();\n      if (host === undefined) {\n        throw new RetryError(stackTraceWithoutCredentials(stackTrace));\n      }\n\n      const timeout = { ...timeouts, ...requestOptions.timeouts };\n\n      const payload: EndRequest = {\n        data,\n        headers,\n        method: request.method,\n        url: serializeUrl(host, request.path, queryParameters),\n        connectTimeout: getTimeout(timeoutsCount, timeout.connect),\n        responseTimeout: getTimeout(timeoutsCount, isRead ? timeout.read : timeout.write),\n      };\n\n      /**\n       * The stackFrame is pushed to the stackTrace so we\n       * can have information about onRetry and onFailure\n       * decisions.\n       */\n      const pushToStackTrace = (response: Response): StackFrame => {\n        const stackFrame: StackFrame = {\n          request: payload,\n          response,\n          host,\n          triesLeft: retryableHosts.length,\n        };\n\n        stackTrace.push(stackFrame);\n\n        return stackFrame;\n      };\n\n      const response = await requester.send(payload);\n\n      if (isRetryable(response)) {\n        const stackFrame = pushToStackTrace(response);\n\n        // If response is a timeout, we increase the number of timeouts so we can increase the timeout later.\n        if (response.isTimedOut) {\n          timeoutsCount++;\n        }\n        /**\n         * Failures are individually sent to the logger, allowing\n         * the end user to debug / store stack frames even\n         * when a retry error does not happen.\n         */\n        logger.info('Retryable failure', stackFrameWithoutCredentials(stackFrame));\n\n        /**\n         * We also store the state of the host in failure cases. If the host, is\n         * down it will remain down for the next 2 minutes. In a timeout situation,\n         * this host will be added end of the list of hosts on the next request.\n         */\n        await hostsCache.set(host, createStatefulHost(host, response.isTimedOut ? 'timed out' : 'down'));\n\n        return retry(retryableHosts, getTimeout);\n      }\n\n      if (isSuccess(response)) {\n        return deserializeSuccess(response);\n      }\n\n      pushToStackTrace(response);\n      throw deserializeFailure(response, stackTrace);\n    };\n\n    /**\n     * Finally, for each retryable host perform request until we got a non\n     * retryable response. Some notes here:\n     *\n     * 1. The reverse here is applied so we can apply a `pop` later on => more performant.\n     * 2. We also get from the retryable options a timeout multiplier that is tailored\n     * for the current context.\n     */\n    const compatibleHosts = hosts.filter(\n      (host) => host.accept === 'readWrite' || (isRead ? host.accept === 'read' : host.accept === 'write'),\n    );\n    const options = await createRetryableOptions(compatibleHosts);\n\n    return retry([...options.hosts].reverse(), options.getTimeout);\n  }\n\n  function createRequest<TResponse>(request: Request, requestOptions: RequestOptions = {}): Promise<TResponse> {\n    /**\n     * A read request is either a `GET` request, or a request that we make\n     * via the `read` transporter (e.g. `search`).\n     */\n    const isRead = request.useReadTransporter || request.method === 'GET';\n    if (!isRead) {\n      /**\n       * On write requests, no cache mechanisms are applied, and we\n       * proxy the request immediately to the requester.\n       */\n      return retryableRequest<TResponse>(request, requestOptions, isRead);\n    }\n\n    const createRetryableRequest = (): Promise<TResponse> => {\n      /**\n       * Then, we prepare a function factory that contains the construction of\n       * the retryable request. At this point, we may *not* perform the actual\n       * request. But we want to have the function factory ready.\n       */\n      return retryableRequest<TResponse>(request, requestOptions);\n    };\n\n    /**\n     * Once we have the function factory ready, we need to determine of the\n     * request is \"cacheable\" - should be cached. Note that, once again,\n     * the user can force this option.\n     */\n    const cacheable = requestOptions.cacheable || request.cacheable;\n\n    /**\n     * If is not \"cacheable\", we immediately trigger the retryable request, no\n     * need to check cache implementations.\n     */\n    if (cacheable !== true) {\n      return createRetryableRequest();\n    }\n\n    /**\n     * If the request is \"cacheable\", we need to first compute the key to ask\n     * the cache implementations if this request is on progress or if the\n     * response already exists on the cache.\n     */\n    const key = {\n      request,\n      requestOptions,\n      transporter: {\n        queryParameters: baseQueryParameters,\n        headers: baseHeaders,\n      },\n    };\n\n    /**\n     * With the computed key, we first ask the responses cache\n     * implementation if this request was been resolved before.\n     */\n    return responsesCache.get(\n      key,\n      () => {\n        /**\n         * If the request has never resolved before, we actually ask if there\n         * is a current request with the same key on progress.\n         */\n        return requestsCache.get(key, () =>\n          /**\n           * Finally, if there is no request in progress with the same key,\n           * this `createRetryableRequest()` will actually trigger the\n           * retryable request.\n           */\n          requestsCache\n            .set(key, createRetryableRequest())\n            .then(\n              (response) => Promise.all([requestsCache.delete(key), response]),\n              (err) => Promise.all([requestsCache.delete(key), Promise.reject(err)]),\n            )\n            .then(([_, response]) => response),\n        );\n      },\n      {\n        /**\n         * Of course, once we get this response back from the server, we\n         * tell response cache to actually store the received response\n         * to be used later.\n         */\n        miss: (response) => responsesCache.set(key, response),\n      },\n    );\n  }\n\n  return {\n    hostsCache,\n    requester,\n    timeouts,\n    logger,\n    algoliaAgent,\n    baseHeaders,\n    baseQueryParameters,\n    hosts,\n    request: createRequest,\n    requestsCache,\n    responsesCache,\n  };\n}\n","export const LogLevelEnum: Readonly<Record<string, LogLevelType>> = {\n  Debug: 1,\n  Info: 2,\n  Error: 3,\n};\n\nexport type LogLevelType = 1 | 2 | 3;\n\nexport type Logger = {\n  /**\n   * Logs debug messages.\n   */\n  debug: (message: string, args?: any) => Promise<void>;\n\n  /**\n   * Logs info messages.\n   */\n  info: (message: string, args?: any) => Promise<void>;\n\n  /**\n   * Logs error messages.\n   */\n  error: (message: string, args?: any) => Promise<void>;\n};\n"],"names":["response"],"mappings":"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"}},
    {"offset": {"line": 2061, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2067, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-abtesting/builds/node.ts","turbopack://[project]/node_modules/@algolia/client-abtesting/src/abtestingClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type AbtestingClient = ReturnType<typeof createAbtestingClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createAbtestingClient } from '../src/abtestingClient';\n\nimport type { Region } from '../src/abtestingClient';\nimport { REGIONS } from '../src/abtestingClient';\n\nexport type { Region, RegionOptions } from '../src/abtestingClient';\n\nexport { apiClientVersion } from '../src/abtestingClient';\n\nexport * from '../model';\n\nexport function abtestingClient(\n  appId: string,\n  apiKey: string,\n  region?: Region,\n  options?: ClientOptions,\n): AbtestingClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  if (region && (typeof region !== 'string' || !REGIONS.includes(region))) {\n    throw new Error(`\\`region\\` must be one of the following: ${REGIONS.join(', ')}`);\n  }\n\n  return {\n    ...createAbtestingClient({\n      appId,\n      apiKey,\n      region,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { ABTest } from '../model/aBTest';\nimport type { ABTestResponse } from '../model/aBTestResponse';\nimport type { AddABTestsRequest } from '../model/addABTestsRequest';\n\nimport type { ListABTestsResponse } from '../model/listABTestsResponse';\nimport type { ScheduleABTestResponse } from '../model/scheduleABTestResponse';\nimport type { ScheduleABTestsRequest } from '../model/scheduleABTestsRequest';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteABTestProps,\n  GetABTestProps,\n  ListABTestsProps,\n  StopABTestProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '5.10.2';\n\nexport const REGIONS = ['de', 'us'] as const;\nexport type Region = (typeof REGIONS)[number];\nexport type RegionOptions = { region?: Region };\n\nfunction getDefaultHosts(region?: Region): Host[] {\n  const url = !region ? 'analytics.algolia.com' : 'analytics.{region}.algolia.com'.replace('{region}', region);\n\n  return [{ url, accept: 'readWrite', protocol: 'https' }];\n}\n\nexport function createAbtestingClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  region: regionOption,\n  ...options\n}: CreateClientOptions & RegionOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(regionOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Abtesting',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * Creates a new A/B test.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param addABTestsRequest - The addABTestsRequest object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    addABTests(addABTestsRequest: AddABTestsRequest, requestOptions?: RequestOptions): Promise<ABTestResponse> {\n      if (!addABTestsRequest) {\n        throw new Error('Parameter `addABTestsRequest` is required when calling `addABTests`.');\n      }\n\n      if (!addABTestsRequest.name) {\n        throw new Error('Parameter `addABTestsRequest.name` is required when calling `addABTests`.');\n      }\n      if (!addABTestsRequest.variants) {\n        throw new Error('Parameter `addABTestsRequest.variants` is required when calling `addABTests`.');\n      }\n      if (!addABTestsRequest.endAt) {\n        throw new Error('Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.');\n      }\n\n      const requestPath = '/2/abtests';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: addABTestsRequest,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes an A/B test by its ID.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param deleteABTest - The deleteABTest object.\n     * @param deleteABTest.id - Unique A/B test identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteABTest({ id }: DeleteABTestProps, requestOptions?: RequestOptions): Promise<ABTestResponse> {\n      if (!id) {\n        throw new Error('Parameter `id` is required when calling `deleteABTest`.');\n      }\n\n      const requestPath = '/2/abtests/{id}'.replace('{id}', encodeURIComponent(id));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the details for an A/B test by its ID.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getABTest - The getABTest object.\n     * @param getABTest.id - Unique A/B test identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getABTest({ id }: GetABTestProps, requestOptions?: RequestOptions): Promise<ABTest> {\n      if (!id) {\n        throw new Error('Parameter `id` is required when calling `getABTest`.');\n      }\n\n      const requestPath = '/2/abtests/{id}'.replace('{id}', encodeURIComponent(id));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Lists all A/B tests you configured for this application.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param listABTests - The listABTests object.\n     * @param listABTests.offset - Position of the first item to return.\n     * @param listABTests.limit - Number of items to return.\n     * @param listABTests.indexPrefix - Index name prefix. Only A/B tests for indices starting with this string are included in the response.\n     * @param listABTests.indexSuffix - Index name suffix. Only A/B tests for indices ending with this string are included in the response.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listABTests(\n      { offset, limit, indexPrefix, indexSuffix }: ListABTestsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListABTestsResponse> {\n      const requestPath = '/2/abtests';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (indexPrefix !== undefined) {\n        queryParameters['indexPrefix'] = indexPrefix.toString();\n      }\n\n      if (indexSuffix !== undefined) {\n        queryParameters['indexSuffix'] = indexSuffix.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Schedule an A/B test to be started at a later time.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param scheduleABTestsRequest - The scheduleABTestsRequest object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    scheduleABTest(\n      scheduleABTestsRequest: ScheduleABTestsRequest,\n      requestOptions?: RequestOptions,\n    ): Promise<ScheduleABTestResponse> {\n      if (!scheduleABTestsRequest) {\n        throw new Error('Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.');\n      }\n\n      if (!scheduleABTestsRequest.name) {\n        throw new Error('Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.');\n      }\n      if (!scheduleABTestsRequest.variants) {\n        throw new Error('Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.');\n      }\n      if (!scheduleABTestsRequest.scheduledAt) {\n        throw new Error('Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.');\n      }\n      if (!scheduleABTestsRequest.endAt) {\n        throw new Error('Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.');\n      }\n\n      const requestPath = '/2/abtests/schedule';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: scheduleABTestsRequest,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Stops an A/B test by its ID.  You can\\'t restart stopped A/B tests.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param stopABTest - The stopABTest object.\n     * @param stopABTest.id - Unique A/B test identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    stopABTest({ id }: StopABTestProps, requestOptions?: RequestOptions): Promise<ABTestResponse> {\n      if (!id) {\n        throw new Error('Parameter `id` is required when calling `stopABTest`.');\n      }\n\n      const requestPath = '/2/abtests/{id}/stop'.replace('{id}', encodeURIComponent(id));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2458, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-analytics/builds/node.ts","turbopack://[project]/node_modules/@algolia/client-analytics/src/analyticsClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type AnalyticsClient = ReturnType<typeof createAnalyticsClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createAnalyticsClient } from '../src/analyticsClient';\n\nimport type { Region } from '../src/analyticsClient';\nimport { REGIONS } from '../src/analyticsClient';\n\nexport type { Region, RegionOptions } from '../src/analyticsClient';\n\nexport { apiClientVersion } from '../src/analyticsClient';\n\nexport * from '../model';\n\nexport function analyticsClient(\n  appId: string,\n  apiKey: string,\n  region?: Region,\n  options?: ClientOptions,\n): AnalyticsClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  if (region && (typeof region !== 'string' || !REGIONS.includes(region))) {\n    throw new Error(`\\`region\\` must be one of the following: ${REGIONS.join(', ')}`);\n  }\n\n  return {\n    ...createAnalyticsClient({\n      appId,\n      apiKey,\n      region,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { GetAddToCartRateResponse } from '../model/getAddToCartRateResponse';\nimport type { GetAverageClickPositionResponse } from '../model/getAverageClickPositionResponse';\nimport type { GetClickPositionsResponse } from '../model/getClickPositionsResponse';\nimport type { GetClickThroughRateResponse } from '../model/getClickThroughRateResponse';\nimport type { GetConversionRateResponse } from '../model/getConversionRateResponse';\nimport type { GetNoClickRateResponse } from '../model/getNoClickRateResponse';\nimport type { GetNoResultsRateResponse } from '../model/getNoResultsRateResponse';\nimport type { GetPurchaseRateResponse } from '../model/getPurchaseRateResponse';\nimport type { GetRevenue } from '../model/getRevenue';\nimport type { GetSearchesCountResponse } from '../model/getSearchesCountResponse';\nimport type { GetSearchesNoClicksResponse } from '../model/getSearchesNoClicksResponse';\nimport type { GetSearchesNoResultsResponse } from '../model/getSearchesNoResultsResponse';\nimport type { GetStatusResponse } from '../model/getStatusResponse';\nimport type { GetTopCountriesResponse } from '../model/getTopCountriesResponse';\nimport type { GetTopFilterAttributesResponse } from '../model/getTopFilterAttributesResponse';\nimport type { GetTopFilterForAttributeResponse } from '../model/getTopFilterForAttributeResponse';\nimport type { GetTopFiltersNoResultsResponse } from '../model/getTopFiltersNoResultsResponse';\nimport type { GetTopHitsResponse } from '../model/getTopHitsResponse';\nimport type { GetTopSearchesResponse } from '../model/getTopSearchesResponse';\nimport type { GetUsersCountResponse } from '../model/getUsersCountResponse';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  GetAddToCartRateProps,\n  GetAverageClickPositionProps,\n  GetClickPositionsProps,\n  GetClickThroughRateProps,\n  GetConversionRateProps,\n  GetNoClickRateProps,\n  GetNoResultsRateProps,\n  GetPurchaseRateProps,\n  GetRevenueProps,\n  GetSearchesCountProps,\n  GetSearchesNoClicksProps,\n  GetSearchesNoResultsProps,\n  GetStatusProps,\n  GetTopCountriesProps,\n  GetTopFilterAttributesProps,\n  GetTopFilterForAttributeProps,\n  GetTopFiltersNoResultsProps,\n  GetTopHitsProps,\n  GetTopSearchesProps,\n  GetUsersCountProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '5.10.2';\n\nexport const REGIONS = ['de', 'us'] as const;\nexport type Region = (typeof REGIONS)[number];\nexport type RegionOptions = { region?: Region };\n\nfunction getDefaultHosts(region?: Region): Host[] {\n  const url = !region ? 'analytics.algolia.com' : 'analytics.{region}.algolia.com'.replace('{region}', region);\n\n  return [{ url, accept: 'readWrite', protocol: 'https' }];\n}\n\nexport function createAnalyticsClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  region: regionOption,\n  ...options\n}: CreateClientOptions & RegionOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(regionOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Analytics',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the add-to-cart rate for all of your searches with at least one add-to-cart event, including a daily breakdown.  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getAddToCartRate - The getAddToCartRate object.\n     * @param getAddToCartRate.index - Index name.\n     * @param getAddToCartRate.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getAddToCartRate.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getAddToCartRate.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getAddToCartRate(\n      { index, startDate, endDate, tags }: GetAddToCartRateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetAddToCartRateResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getAddToCartRate`.');\n      }\n\n      const requestPath = '/2/conversions/addToCartRate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the average click position of your search results, including a daily breakdown.  The average click position is the average of all clicked search results\\' positions. For example, if users only ever click on the first result for any search, the average click position is 1. By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getAverageClickPosition - The getAverageClickPosition object.\n     * @param getAverageClickPosition.index - Index name.\n     * @param getAverageClickPosition.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getAverageClickPosition.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getAverageClickPosition.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getAverageClickPosition(\n      { index, startDate, endDate, tags }: GetAverageClickPositionProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetAverageClickPositionResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getAverageClickPosition`.');\n      }\n\n      const requestPath = '/2/clicks/averageClickPosition';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the positions in the search results and their associated number of clicks.  This lets you check how many clicks the first, second, or tenth search results receive.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getClickPositions - The getClickPositions object.\n     * @param getClickPositions.index - Index name.\n     * @param getClickPositions.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getClickPositions.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getClickPositions.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getClickPositions(\n      { index, startDate, endDate, tags }: GetClickPositionsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetClickPositionsResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getClickPositions`.');\n      }\n\n      const requestPath = '/2/clicks/positions';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the click-through rate for all of your searches with at least one click event, including a daily breakdown  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getClickThroughRate - The getClickThroughRate object.\n     * @param getClickThroughRate.index - Index name.\n     * @param getClickThroughRate.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getClickThroughRate.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getClickThroughRate.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getClickThroughRate(\n      { index, startDate, endDate, tags }: GetClickThroughRateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetClickThroughRateResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getClickThroughRate`.');\n      }\n\n      const requestPath = '/2/clicks/clickThroughRate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the conversion rate for all of your searches with at least one conversion event, including a daily breakdown.  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getConversionRate - The getConversionRate object.\n     * @param getConversionRate.index - Index name.\n     * @param getConversionRate.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getConversionRate.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getConversionRate.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getConversionRate(\n      { index, startDate, endDate, tags }: GetConversionRateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetConversionRateResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getConversionRate`.');\n      }\n\n      const requestPath = '/2/conversions/conversionRate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the fraction of searches that didn\\'t lead to any click within a time range, including a daily breakdown.  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getNoClickRate - The getNoClickRate object.\n     * @param getNoClickRate.index - Index name.\n     * @param getNoClickRate.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getNoClickRate.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getNoClickRate.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getNoClickRate(\n      { index, startDate, endDate, tags }: GetNoClickRateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetNoClickRateResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getNoClickRate`.');\n      }\n\n      const requestPath = '/2/searches/noClickRate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the fraction of searches that didn\\'t return any results within a time range, including a daily breakdown.  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getNoResultsRate - The getNoResultsRate object.\n     * @param getNoResultsRate.index - Index name.\n     * @param getNoResultsRate.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getNoResultsRate.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getNoResultsRate.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getNoResultsRate(\n      { index, startDate, endDate, tags }: GetNoResultsRateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetNoResultsRateResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getNoResultsRate`.');\n      }\n\n      const requestPath = '/2/searches/noResultRate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the purchase rate for all of your searches with at least one purchase event, including a daily breakdown.  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getPurchaseRate - The getPurchaseRate object.\n     * @param getPurchaseRate.index - Index name.\n     * @param getPurchaseRate.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getPurchaseRate.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getPurchaseRate.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getPurchaseRate(\n      { index, startDate, endDate, tags }: GetPurchaseRateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetPurchaseRateResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getPurchaseRate`.');\n      }\n\n      const requestPath = '/2/conversions/purchaseRate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves revenue-related metrics, such as the total revenue or the average order value.  To retrieve revenue-related metrics, sent purchase events. By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getRevenue - The getRevenue object.\n     * @param getRevenue.index - Index name.\n     * @param getRevenue.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getRevenue.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getRevenue.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRevenue(\n      { index, startDate, endDate, tags }: GetRevenueProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetRevenue> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getRevenue`.');\n      }\n\n      const requestPath = '/2/conversions/revenue';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the number of searches within a time range, including a daily breakdown.  By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getSearchesCount - The getSearchesCount object.\n     * @param getSearchesCount.index - Index name.\n     * @param getSearchesCount.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getSearchesCount.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getSearchesCount.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSearchesCount(\n      { index, startDate, endDate, tags }: GetSearchesCountProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetSearchesCountResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getSearchesCount`.');\n      }\n\n      const requestPath = '/2/searches/count';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the most popular searches that didn\\'t lead to any clicks, from the 1,000 most frequent searches.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getSearchesNoClicks - The getSearchesNoClicks object.\n     * @param getSearchesNoClicks.index - Index name.\n     * @param getSearchesNoClicks.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getSearchesNoClicks.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getSearchesNoClicks.limit - Number of items to return.\n     * @param getSearchesNoClicks.offset - Position of the first item to return.\n     * @param getSearchesNoClicks.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSearchesNoClicks(\n      { index, startDate, endDate, limit, offset, tags }: GetSearchesNoClicksProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetSearchesNoClicksResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getSearchesNoClicks`.');\n      }\n\n      const requestPath = '/2/searches/noClicks';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the most popular searches that didn\\'t return any results.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getSearchesNoResults - The getSearchesNoResults object.\n     * @param getSearchesNoResults.index - Index name.\n     * @param getSearchesNoResults.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getSearchesNoResults.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getSearchesNoResults.limit - Number of items to return.\n     * @param getSearchesNoResults.offset - Position of the first item to return.\n     * @param getSearchesNoResults.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSearchesNoResults(\n      { index, startDate, endDate, limit, offset, tags }: GetSearchesNoResultsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetSearchesNoResultsResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getSearchesNoResults`.');\n      }\n\n      const requestPath = '/2/searches/noResults';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the time when the Analytics data for the specified index was last updated.  The Analytics data is updated every 5 minutes.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getStatus - The getStatus object.\n     * @param getStatus.index - Index name.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getStatus({ index }: GetStatusProps, requestOptions?: RequestOptions): Promise<GetStatusResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getStatus`.');\n      }\n\n      const requestPath = '/2/status';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the countries with the most searches to your index.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getTopCountries - The getTopCountries object.\n     * @param getTopCountries.index - Index name.\n     * @param getTopCountries.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopCountries.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopCountries.limit - Number of items to return.\n     * @param getTopCountries.offset - Position of the first item to return.\n     * @param getTopCountries.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopCountries(\n      { index, startDate, endDate, limit, offset, tags }: GetTopCountriesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTopCountriesResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getTopCountries`.');\n      }\n\n      const requestPath = '/2/countries';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the most frequently used filter attributes.  These are attributes of your records that you included in the `attributesForFaceting` setting.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getTopFilterAttributes - The getTopFilterAttributes object.\n     * @param getTopFilterAttributes.index - Index name.\n     * @param getTopFilterAttributes.search - Search query.\n     * @param getTopFilterAttributes.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopFilterAttributes.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopFilterAttributes.limit - Number of items to return.\n     * @param getTopFilterAttributes.offset - Position of the first item to return.\n     * @param getTopFilterAttributes.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopFilterAttributes(\n      { index, search, startDate, endDate, limit, offset, tags }: GetTopFilterAttributesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTopFilterAttributesResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getTopFilterAttributes`.');\n      }\n\n      const requestPath = '/2/filters';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (search !== undefined) {\n        queryParameters['search'] = search.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the most frequent filter (facet) values for a filter attribute.  These are attributes of your records that you included in the `attributesForFaceting` setting.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getTopFilterForAttribute - The getTopFilterForAttribute object.\n     * @param getTopFilterForAttribute.attribute - Attribute name.\n     * @param getTopFilterForAttribute.index - Index name.\n     * @param getTopFilterForAttribute.search - Search query.\n     * @param getTopFilterForAttribute.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopFilterForAttribute.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopFilterForAttribute.limit - Number of items to return.\n     * @param getTopFilterForAttribute.offset - Position of the first item to return.\n     * @param getTopFilterForAttribute.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopFilterForAttribute(\n      { attribute, index, search, startDate, endDate, limit, offset, tags }: GetTopFilterForAttributeProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTopFilterForAttributeResponse> {\n      if (!attribute) {\n        throw new Error('Parameter `attribute` is required when calling `getTopFilterForAttribute`.');\n      }\n\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getTopFilterForAttribute`.');\n      }\n\n      const requestPath = '/2/filters/{attribute}'.replace('{attribute}', encodeURIComponent(attribute));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (search !== undefined) {\n        queryParameters['search'] = search.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the most frequently used filters for a search that didn\\'t return any results.  To get the most frequent searches without results, use the [Retrieve searches without results](#tag/search/operation/getSearchesNoResults) operation.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getTopFiltersNoResults - The getTopFiltersNoResults object.\n     * @param getTopFiltersNoResults.index - Index name.\n     * @param getTopFiltersNoResults.search - Search query.\n     * @param getTopFiltersNoResults.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopFiltersNoResults.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopFiltersNoResults.limit - Number of items to return.\n     * @param getTopFiltersNoResults.offset - Position of the first item to return.\n     * @param getTopFiltersNoResults.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopFiltersNoResults(\n      { index, search, startDate, endDate, limit, offset, tags }: GetTopFiltersNoResultsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTopFiltersNoResultsResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getTopFiltersNoResults`.');\n      }\n\n      const requestPath = '/2/filters/noResults';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (search !== undefined) {\n        queryParameters['search'] = search.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the object IDs of the most frequent search results.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getTopHits - The getTopHits object.\n     * @param getTopHits.index - Index name.\n     * @param getTopHits.search - Search query.\n     * @param getTopHits.clickAnalytics - Whether to include metrics related to click and conversion events in the response.\n     * @param getTopHits.revenueAnalytics - Whether to include revenue-related metrics in the response.  If true, metrics related to click and conversion events are also included in the response.\n     * @param getTopHits.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopHits.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopHits.limit - Number of items to return.\n     * @param getTopHits.offset - Position of the first item to return.\n     * @param getTopHits.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopHits(\n      { index, search, clickAnalytics, revenueAnalytics, startDate, endDate, limit, offset, tags }: GetTopHitsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTopHitsResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getTopHits`.');\n      }\n\n      const requestPath = '/2/hits';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (search !== undefined) {\n        queryParameters['search'] = search.toString();\n      }\n\n      if (clickAnalytics !== undefined) {\n        queryParameters['clickAnalytics'] = clickAnalytics.toString();\n      }\n\n      if (revenueAnalytics !== undefined) {\n        queryParameters['revenueAnalytics'] = revenueAnalytics.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Returns the most popular search terms.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getTopSearches - The getTopSearches object.\n     * @param getTopSearches.index - Index name.\n     * @param getTopSearches.clickAnalytics - Whether to include metrics related to click and conversion events in the response.\n     * @param getTopSearches.revenueAnalytics - Whether to include revenue-related metrics in the response.  If true, metrics related to click and conversion events are also included in the response.\n     * @param getTopSearches.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopSearches.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getTopSearches.orderBy - Attribute by which to order the response items.  If the `clickAnalytics` parameter is false, only `searchCount` is available.\n     * @param getTopSearches.direction - Sorting direction of the results: ascending or descending.\n     * @param getTopSearches.limit - Number of items to return.\n     * @param getTopSearches.offset - Position of the first item to return.\n     * @param getTopSearches.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopSearches(\n      {\n        index,\n        clickAnalytics,\n        revenueAnalytics,\n        startDate,\n        endDate,\n        orderBy,\n        direction,\n        limit,\n        offset,\n        tags,\n      }: GetTopSearchesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTopSearchesResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getTopSearches`.');\n      }\n\n      const requestPath = '/2/searches';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (clickAnalytics !== undefined) {\n        queryParameters['clickAnalytics'] = clickAnalytics.toString();\n      }\n\n      if (revenueAnalytics !== undefined) {\n        queryParameters['revenueAnalytics'] = revenueAnalytics.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (orderBy !== undefined) {\n        queryParameters['orderBy'] = orderBy.toString();\n      }\n\n      if (direction !== undefined) {\n        queryParameters['direction'] = direction.toString();\n      }\n\n      if (limit !== undefined) {\n        queryParameters['limit'] = limit.toString();\n      }\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the number of unique users within a time range, including a daily breakdown.  Since this endpoint returns the number of unique users, the sum of the daily values might be different from the total number.  By default, Algolia distinguishes search users by their IP address, _unless_ you include a pseudonymous user identifier in your search requests with the `userToken` API parameter or `x-algolia-usertoken` request header. By default, the analyzed period includes the last eight days including the current day.\n     *\n     * Required API Key ACLs:\n     *  - analytics\n     * @param getUsersCount - The getUsersCount object.\n     * @param getUsersCount.index - Index name.\n     * @param getUsersCount.startDate - Start date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getUsersCount.endDate - End date of the period to analyze, in `YYYY-MM-DD` format.\n     * @param getUsersCount.tags - Tags by which to segment the analytics.  You can combine multiple tags with `OR` and `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getUsersCount(\n      { index, startDate, endDate, tags }: GetUsersCountProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetUsersCountResponse> {\n      if (!index) {\n        throw new Error('Parameter `index` is required when calling `getUsersCount`.');\n      }\n\n      const requestPath = '/2/users/count';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (index !== undefined) {\n        queryParameters['index'] = index.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      if (tags !== undefined) {\n        queryParameters['tags'] = tags.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3528, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3534, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-insights/builds/node.ts","turbopack://[project]/node_modules/@algolia/client-insights/src/insightsClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type InsightsClient = ReturnType<typeof createInsightsClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createInsightsClient } from '../src/insightsClient';\n\nimport type { Region } from '../src/insightsClient';\nimport { REGIONS } from '../src/insightsClient';\n\nexport type { Region, RegionOptions } from '../src/insightsClient';\n\nexport { apiClientVersion } from '../src/insightsClient';\n\nexport * from '../model';\n\nexport function insightsClient(\n  appId: string,\n  apiKey: string,\n  region?: Region,\n  options?: ClientOptions,\n): InsightsClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  if (region && (typeof region !== 'string' || !REGIONS.includes(region))) {\n    throw new Error(`\\`region\\` must be one of the following: ${REGIONS.join(', ')}`);\n  }\n\n  return {\n    ...createInsightsClient({\n      appId,\n      apiKey,\n      region,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { EventsResponse } from '../model/eventsResponse';\nimport type { InsightsEvents } from '../model/insightsEvents';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteUserTokenProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '5.10.2';\n\nexport const REGIONS = ['de', 'us'] as const;\nexport type Region = (typeof REGIONS)[number];\nexport type RegionOptions = { region?: Region };\n\nfunction getDefaultHosts(region?: Region): Host[] {\n  const url = !region ? 'insights.algolia.io' : 'insights.{region}.algolia.io'.replace('{region}', region);\n\n  return [{ url, accept: 'readWrite', protocol: 'https' }];\n}\n\nexport function createInsightsClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  region: regionOption,\n  ...options\n}: CreateClientOptions & RegionOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(regionOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Insights',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes all events related to the specified user token from events metrics and analytics. The deletion is asynchronous, and processed within 48 hours. To delete a personalization user profile, see `Delete a user profile` in the Personalization API.\n     * @param deleteUserToken - The deleteUserToken object.\n     * @param deleteUserToken.userToken - User token for which to delete all associated events.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteUserToken({ userToken }: DeleteUserTokenProps, requestOptions?: RequestOptions): Promise<void> {\n      if (!userToken) {\n        throw new Error('Parameter `userToken` is required when calling `deleteUserToken`.');\n      }\n\n      const requestPath = '/1/usertokens/{userToken}'.replace('{userToken}', encodeURIComponent(userToken));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Sends a list of events to the Insights API.  You can include up to 1,000 events in a single request, but the request body must be smaller than 2&nbsp;MB.\n     * @param insightsEvents - The insightsEvents object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    pushEvents(insightsEvents: InsightsEvents, requestOptions?: RequestOptions): Promise<EventsResponse> {\n      if (!insightsEvents) {\n        throw new Error('Parameter `insightsEvents` is required when calling `pushEvents`.');\n      }\n\n      if (!insightsEvents.events) {\n        throw new Error('Parameter `insightsEvents.events` is required when calling `pushEvents`.');\n      }\n\n      const requestPath = '/1/events';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: insightsEvents,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3791, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3797, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-personalization/builds/node.ts","turbopack://[project]/node_modules/@algolia/client-personalization/src/personalizationClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type PersonalizationClient = ReturnType<typeof createPersonalizationClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createPersonalizationClient } from '../src/personalizationClient';\n\nimport type { Region } from '../src/personalizationClient';\nimport { REGIONS } from '../src/personalizationClient';\n\nexport type { Region, RegionOptions } from '../src/personalizationClient';\n\nexport { apiClientVersion } from '../src/personalizationClient';\n\nexport * from '../model';\n\nexport function personalizationClient(\n  appId: string,\n  apiKey: string,\n  region: Region,\n  options?: ClientOptions,\n): PersonalizationClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  if (!region || (region && (typeof region !== 'string' || !REGIONS.includes(region)))) {\n    throw new Error(`\\`region\\` is required and must be one of the following: ${REGIONS.join(', ')}`);\n  }\n\n  return {\n    ...createPersonalizationClient({\n      appId,\n      apiKey,\n      region,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { DeleteUserProfileResponse } from '../model/deleteUserProfileResponse';\n\nimport type { GetUserTokenResponse } from '../model/getUserTokenResponse';\nimport type { PersonalizationStrategyParams } from '../model/personalizationStrategyParams';\nimport type { SetPersonalizationStrategyResponse } from '../model/setPersonalizationStrategyResponse';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteUserProfileProps,\n  GetUserTokenProfileProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '5.10.2';\n\nexport const REGIONS = ['eu', 'us'] as const;\nexport type Region = (typeof REGIONS)[number];\nexport type RegionOptions = { region: Region };\n\nfunction getDefaultHosts(region: Region): Host[] {\n  const url = 'personalization.{region}.algolia.com'.replace('{region}', region);\n\n  return [{ url, accept: 'readWrite', protocol: 'https' }];\n}\n\nexport function createPersonalizationClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  region: regionOption,\n  ...options\n}: CreateClientOptions & RegionOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(regionOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Personalization',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a user profile.  The response includes a date and time when the user profile can safely be considered deleted.\n     *\n     * Required API Key ACLs:\n     *  - recommendation\n     * @param deleteUserProfile - The deleteUserProfile object.\n     * @param deleteUserProfile.userToken - Unique identifier representing a user for which to fetch the personalization profile.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteUserProfile(\n      { userToken }: DeleteUserProfileProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeleteUserProfileResponse> {\n      if (!userToken) {\n        throw new Error('Parameter `userToken` is required when calling `deleteUserProfile`.');\n      }\n\n      const requestPath = '/1/profiles/{userToken}'.replace('{userToken}', encodeURIComponent(userToken));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the current personalization strategy.\n     *\n     * Required API Key ACLs:\n     *  - recommendation\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getPersonalizationStrategy(requestOptions?: RequestOptions): Promise<PersonalizationStrategyParams> {\n      const requestPath = '/1/strategies/personalization';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a user profile and their affinities for different facets.\n     *\n     * Required API Key ACLs:\n     *  - recommendation\n     * @param getUserTokenProfile - The getUserTokenProfile object.\n     * @param getUserTokenProfile.userToken - Unique identifier representing a user for which to fetch the personalization profile.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getUserTokenProfile(\n      { userToken }: GetUserTokenProfileProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetUserTokenResponse> {\n      if (!userToken) {\n        throw new Error('Parameter `userToken` is required when calling `getUserTokenProfile`.');\n      }\n\n      const requestPath = '/1/profiles/personalization/{userToken}'.replace(\n        '{userToken}',\n        encodeURIComponent(userToken),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Creates a new personalization strategy.\n     *\n     * Required API Key ACLs:\n     *  - recommendation\n     * @param personalizationStrategyParams - The personalizationStrategyParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    setPersonalizationStrategy(\n      personalizationStrategyParams: PersonalizationStrategyParams,\n      requestOptions?: RequestOptions,\n    ): Promise<SetPersonalizationStrategyResponse> {\n      if (!personalizationStrategyParams) {\n        throw new Error(\n          'Parameter `personalizationStrategyParams` is required when calling `setPersonalizationStrategy`.',\n        );\n      }\n\n      if (!personalizationStrategyParams.eventScoring) {\n        throw new Error(\n          'Parameter `personalizationStrategyParams.eventScoring` is required when calling `setPersonalizationStrategy`.',\n        );\n      }\n      if (!personalizationStrategyParams.facetScoring) {\n        throw new Error(\n          'Parameter `personalizationStrategyParams.facetScoring` is required when calling `setPersonalizationStrategy`.',\n        );\n      }\n      if (!personalizationStrategyParams.personalizationImpact) {\n        throw new Error(\n          'Parameter `personalizationStrategyParams.personalizationImpact` is required when calling `setPersonalizationStrategy`.',\n        );\n      }\n\n      const requestPath = '/1/strategies/personalization';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: personalizationStrategyParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4113, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-query-suggestions/builds/node.ts","turbopack://[project]/node_modules/@algolia/client-query-suggestions/src/querySuggestionsClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type QuerySuggestionsClient = ReturnType<typeof createQuerySuggestionsClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createQuerySuggestionsClient } from '../src/querySuggestionsClient';\n\nimport type { Region } from '../src/querySuggestionsClient';\nimport { REGIONS } from '../src/querySuggestionsClient';\n\nexport type { Region, RegionOptions } from '../src/querySuggestionsClient';\n\nexport { apiClientVersion } from '../src/querySuggestionsClient';\n\nexport * from '../model';\n\nexport function querySuggestionsClient(\n  appId: string,\n  apiKey: string,\n  region: Region,\n  options?: ClientOptions,\n): QuerySuggestionsClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  if (!region || (region && (typeof region !== 'string' || !REGIONS.includes(region)))) {\n    throw new Error(`\\`region\\` is required and must be one of the following: ${REGIONS.join(', ')}`);\n  }\n\n  return {\n    ...createQuerySuggestionsClient({\n      appId,\n      apiKey,\n      region,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { BaseResponse } from '../model/baseResponse';\nimport type { ConfigStatus } from '../model/configStatus';\n\nimport type { ConfigurationResponse } from '../model/configurationResponse';\nimport type { ConfigurationWithIndex } from '../model/configurationWithIndex';\n\nimport type { LogFile } from '../model/logFile';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteConfigProps,\n  GetConfigProps,\n  GetConfigStatusProps,\n  GetLogFileProps,\n  UpdateConfigProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '5.10.2';\n\nexport const REGIONS = ['eu', 'us'] as const;\nexport type Region = (typeof REGIONS)[number];\nexport type RegionOptions = { region: Region };\n\nfunction getDefaultHosts(region: Region): Host[] {\n  const url = 'query-suggestions.{region}.algolia.com'.replace('{region}', region);\n\n  return [{ url, accept: 'readWrite', protocol: 'https' }];\n}\n\nexport function createQuerySuggestionsClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  region: regionOption,\n  ...options\n}: CreateClientOptions & RegionOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(regionOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'QuerySuggestions',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * Creates a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param configurationWithIndex - The configurationWithIndex object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createConfig(\n      configurationWithIndex: ConfigurationWithIndex,\n      requestOptions?: RequestOptions,\n    ): Promise<BaseResponse> {\n      if (!configurationWithIndex) {\n        throw new Error('Parameter `configurationWithIndex` is required when calling `createConfig`.');\n      }\n\n      const requestPath = '/1/configs';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: configurationWithIndex,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. To delete the Query Suggestions index itself, use the Search API and the `Delete an index` operation.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param deleteConfig - The deleteConfig object.\n     * @param deleteConfig.indexName - Query Suggestions index name.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteConfig({ indexName }: DeleteConfigProps, requestOptions?: RequestOptions): Promise<BaseResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteConfig`.');\n      }\n\n      const requestPath = '/1/configs/{indexName}'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves all Query Suggestions configurations of your Algolia application.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getAllConfigs(requestOptions?: RequestOptions): Promise<Array<ConfigurationResponse>> {\n      const requestPath = '/1/configs';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a single Query Suggestions configuration by its index name.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param getConfig - The getConfig object.\n     * @param getConfig.indexName - Query Suggestions index name.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getConfig({ indexName }: GetConfigProps, requestOptions?: RequestOptions): Promise<ConfigurationResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getConfig`.');\n      }\n\n      const requestPath = '/1/configs/{indexName}'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Reports the status of a Query Suggestions index.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param getConfigStatus - The getConfigStatus object.\n     * @param getConfigStatus.indexName - Query Suggestions index name.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getConfigStatus({ indexName }: GetConfigStatusProps, requestOptions?: RequestOptions): Promise<ConfigStatus> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getConfigStatus`.');\n      }\n\n      const requestPath = '/1/configs/{indexName}/status'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the logs for a single Query Suggestions index.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param getLogFile - The getLogFile object.\n     * @param getLogFile.indexName - Query Suggestions index name.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getLogFile({ indexName }: GetLogFileProps, requestOptions?: RequestOptions): Promise<LogFile> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getLogFile`.');\n      }\n\n      const requestPath = '/1/logs/{indexName}'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates a QuerySuggestions configuration.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param updateConfig - The updateConfig object.\n     * @param updateConfig.indexName - Query Suggestions index name.\n     * @param updateConfig.configuration - The configuration object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateConfig(\n      { indexName, configuration }: UpdateConfigProps,\n      requestOptions?: RequestOptions,\n    ): Promise<BaseResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `updateConfig`.');\n      }\n\n      if (!configuration) {\n        throw new Error('Parameter `configuration` is required when calling `updateConfig`.');\n      }\n\n      if (!configuration.sourceIndices) {\n        throw new Error('Parameter `configuration.sourceIndices` is required when calling `updateConfig`.');\n      }\n\n      const requestPath = '/1/configs/{indexName}'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: configuration,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":";;;;;AAIA,SAAS,2BAA2B;AAEpC;;;;AC0BO,IAAM,mBAAmB;AAEzB,IAAM,UAAU;IAAC;IAAM,IAAI;CAAA;AAIlC,SAAS,gBAAgB,MAAA,EAAwB;IAC/C,MAAM,MAAM,yCAAyC,OAAA,CAAQ,YAAY,MAAM;IAE/E,OAAO;QAAC;YAAE;YAAK,QAAQ;YAAa,UAAU;QAAQ,CAAC;KAAA;AACzD;AAEO,SAAS,6BAA6B,EAC3C,OAAO,WAAA,EACP,QAAQ,YAAA,EACR,QAAA,EACA,aAAA,EACA,QAAQ,YAAA,EACR,GAAG,SACL,EAAwC;IACtC,MAAM,OAAO,iLAAA,EAAW,aAAa,cAAc,QAAQ;IAC3D,MAAM,kLAAc,oBAAA,EAAkB;QACpC,OAAO,gBAAgB,YAAY;QACnC,GAAG,OAAA;QACH,kLAAc,kBAAA,EAAgB;YAC5B;YACA,QAAQ;YACR,SAAS;QACX,CAAC;QACD,aAAa;YACX,gBAAgB;YAChB,GAAG,KAAK,OAAA,CAAQ,CAAA;YAChB,GAAG,QAAQ,WAAA;QACb;QACA,qBAAqB;YACnB,GAAG,KAAK,eAAA,CAAgB,CAAA;YACxB,GAAG,QAAQ,mBAAA;QACb;IACF,CAAC;IAED,OAAO;QACL;QAAA;;KAAA,GAKA,OAAO;QAAA;;KAAA,GAKP,aAA4B;YAC1B,OAAO,QAAQ,GAAA,CAAI;gBAAC,YAAY,aAAA,CAAc,KAAA,CAAM;gBAAG,YAAY,cAAA,CAAe,KAAA,CAAM,CAAC;aAAC,EAAE,IAAA,CAAK,IAAM,KAAA,CAAS;QAClH;QAAA;;KAAA,GAKA,IAAI,OAAc;YAChB,OAAO,YAAY,YAAA,CAAa,KAAA;QAClC;QAAA;;;;;KAAA,GAQA,iBAAgB,OAAA,EAAiB,OAAA,EAAwB;YACvD,YAAY,YAAA,CAAa,GAAA,CAAI;gBAAE;gBAAS;YAAQ,CAAC;QACnD;QAAA;;;;;KAAA,GAQA,iBAAgB,EAAE,MAAA,CAAO,CAAA,EAA6B;YACpD,IAAI,CAAC,YAAY,aAAa,iBAAiB;gBAC7C,YAAY,WAAA,CAAY,mBAAmB,CAAA,GAAI;YACjD,OAAO;gBACL,YAAY,mBAAA,CAAoB,mBAAmB,CAAA,GAAI;YACzD;QACF;QAAA;;;;;;;KAAA,GAUA,cACE,sBAAA,EACA,cAAA,EACuB;YACvB,IAAI,CAAC,wBAAwB;gBAC3B,MAAM,IAAI,MAAM,6EAA6E;YAC/F;YAEA,MAAM,cAAc;YACpB,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;gBACA,MAAM;YACR;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;KAAA,GASA,cACE,EAAE,IAAA,EAAM,UAAA,CAAW,CAAA,EACnB,cAAA,EACkC;YAClC,IAAI,CAAC,MAAM;gBACT,MAAM,IAAI,MAAM,2DAA2D;YAC7E;YAEA,MAAM,cAAc,UAAU,OAAA,CAAQ,UAAU,IAAI;YACpD,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,aAAa,aAAa,CAAC;YAEpE,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;KAAA,GASA,WAAU,EAAE,IAAA,EAAM,UAAA,CAAW,CAAA,EAAmB,cAAA,EAAmE;YACjH,IAAI,CAAC,MAAM;gBACT,MAAM,IAAI,MAAM,wDAAwD;YAC1E;YAEA,MAAM,cAAc,UAAU,OAAA,CAAQ,UAAU,IAAI;YACpD,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,aAAa,aAAa,CAAC;YAEpE,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;KAAA,GAUA,YACE,EAAE,IAAA,EAAM,UAAA,EAAY,IAAA,CAAK,CAAA,EACzB,cAAA,EACkC;YAClC,IAAI,CAAC,MAAM;gBACT,MAAM,IAAI,MAAM,yDAAyD;YAC3E;YAEA,MAAM,cAAc,UAAU,OAAA,CAAQ,UAAU,IAAI;YACpD,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,aAAa,aAAa,CAAC;YAEpE,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;gBACA,MAAM,OAAO,OAAO,CAAC;YACvB;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;KAAA,GAUA,WACE,EAAE,IAAA,EAAM,UAAA,EAAY,IAAA,CAAK,CAAA,EACzB,cAAA,EACkC;YAClC,IAAI,CAAC,MAAM;gBACT,MAAM,IAAI,MAAM,wDAAwD;YAC1E;YAEA,MAAM,cAAc,UAAU,OAAA,CAAQ,UAAU,IAAI;YACpD,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,aAAa,aAAa,CAAC;YAEpE,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;gBACA,MAAM,OAAO,OAAO,CAAC;YACvB;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;;KAAA,GAWA,cAAa,EAAE,SAAA,CAAU,CAAA,EAAsB,cAAA,EAAwD;YACrG,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,MAAM,gEAAgE;YAClF;YAEA,MAAM,cAAc,yBAAyB,OAAA,CAAQ,eAAe,mBAAmB,SAAS,CAAC;YACjG,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;KAAA,GASA,eAAc,cAAA,EAAwE;YACpF,MAAM,cAAc;YACpB,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;;KAAA,GAWA,WAAU,EAAE,SAAA,CAAU,CAAA,EAAmB,cAAA,EAAiE;YACxG,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,MAAM,6DAA6D;YAC/E;YAEA,MAAM,cAAc,yBAAyB,OAAA,CAAQ,eAAe,mBAAmB,SAAS,CAAC;YACjG,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;;KAAA,GAWA,iBAAgB,EAAE,SAAA,CAAU,CAAA,EAAyB,cAAA,EAAwD;YAC3G,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,MAAM,mEAAmE;YACrF;YAEA,MAAM,cAAc,gCAAgC,OAAA,CAAQ,eAAe,mBAAmB,SAAS,CAAC;YACxG,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;;KAAA,GAWA,YAAW,EAAE,SAAA,CAAU,CAAA,EAAoB,cAAA,EAAmD;YAC5F,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,MAAM,8DAA8D;YAChF;YAEA,MAAM,cAAc,sBAAsB,OAAA,CAAQ,eAAe,mBAAmB,SAAS,CAAC;YAC9F,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;YACF;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;QAAA;;;;;;;;;KAAA,GAYA,cACE,EAAE,SAAA,EAAW,aAAA,CAAc,CAAA,EAC3B,cAAA,EACuB;YACvB,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,MAAM,gEAAgE;YAClF;YAEA,IAAI,CAAC,eAAe;gBAClB,MAAM,IAAI,MAAM,oEAAoE;YACtF;YAEA,IAAI,CAAC,cAAc,aAAA,EAAe;gBAChC,MAAM,IAAI,MAAM,kFAAkF;YACpG;YAEA,MAAM,cAAc,yBAAyB,OAAA,CAAQ,eAAe,mBAAmB,SAAS,CAAC;YACjG,MAAM,UAAmB,CAAC;YAC1B,MAAM,kBAAmC,CAAC;YAE1C,MAAM,UAAmB;gBACvB,QAAQ;gBACR,MAAM;gBACN;gBACA;gBACA,MAAM;YACR;YAEA,OAAO,YAAY,OAAA,CAAQ,SAAS,cAAc;QACpD;IACF;AACF;;AD7ZO,SAAS,uBACd,KAAA,EACA,MAAA,EACA,MAAA,EACA,OAAA,EACwB;IACxB,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;QACvC,MAAM,IAAI,MAAM,qBAAqB;IACvC;IAEA,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;QACzC,MAAM,IAAI,MAAM,sBAAsB;IACxC;IAEA,IAAI,CAAC,UAAW,UAAA,CAAW,OAAO,WAAW,YAAY,CAAC,QAAQ,QAAA,CAAS,MAAM,CAAA,GAAK;QACpF,MAAM,IAAI,MAAM,CAAA,yDAAA,EAA4D,QAAQ,IAAA,CAAK,IAAI,CAAC,EAAE;IAClG;IAEA,OAAO;QACL,GAAG,6BAA6B;YAC9B;YACA;YACA;YACA,UAAU;gBACR,yKAAS,+BAAA;gBACT,sKAAM,4BAAA;gBACN,uKAAO,6BAAA;YACT;YACA,4KAAQ,mBAAA,CAAiB;YACzB,mMAAW,sBAAA,CAAoB;YAC/B,eAAe;gBAAC;oBAAE,SAAS;oBAAW,SAAS,QAAQ,QAAA,CAAS,IAAA;gBAAK,CAAC;aAAA;YACtE,oLAAgB,kBAAA,CAAgB;YAChC,mLAAe,kBAAA,CAAgB;YAC/B,gLAAY,oBAAA,CAAkB;YAC9B,GAAG,OAAA;QACL,CAAC,CAAA;IACH;AACF"}},
    {"offset": {"line": 4491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4497, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/client-search/builds/node.ts","turbopack://[project]/node_modules/@algolia/client-search/src/searchClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type SearchClient = ReturnType<typeof createSearchClient> & SearchClientNodeHelpers;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n  serializeQueryParameters,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createSearchClient } from '../src/searchClient';\n\nexport { apiClientVersion } from '../src/searchClient';\n\nexport * from '../model';\n\nimport type {\n  GenerateSecuredApiKeyOptions,\n  GetSecuredApiKeyRemainingValidityOptions,\n  SearchClientNodeHelpers,\n} from '../model';\n\nimport { createHmac } from 'node:crypto';\n\nexport function searchClient(appId: string, apiKey: string, options?: ClientOptions): SearchClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  return {\n    ...createSearchClient({\n      appId,\n      apiKey,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n    /**\n     * Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.\n     *\n     * @summary Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.\n     * @param generateSecuredApiKey - The `generateSecuredApiKey` object.\n     * @param generateSecuredApiKey.parentApiKey - The base API key from which to generate the new secured one.\n     * @param generateSecuredApiKey.restrictions - A set of properties defining the restrictions of the secured API key.\n     */\n    generateSecuredApiKey: ({ parentApiKey, restrictions = {} }: GenerateSecuredApiKeyOptions): string => {\n      let mergedRestrictions = restrictions;\n      if (restrictions.searchParams) {\n        // merge searchParams with the root restrictions\n        mergedRestrictions = {\n          ...restrictions,\n          ...restrictions.searchParams,\n        };\n\n        delete mergedRestrictions.searchParams;\n      }\n\n      mergedRestrictions = Object.keys(mergedRestrictions)\n        .sort()\n        .reduce(\n          (acc, key) => {\n            acc[key] = (mergedRestrictions as any)[key];\n            return acc;\n          },\n          {} as Record<string, unknown>,\n        );\n\n      const queryParameters = serializeQueryParameters(mergedRestrictions);\n      return Buffer.from(\n        createHmac('sha256', parentApiKey).update(queryParameters).digest('hex') + queryParameters,\n      ).toString('base64');\n    },\n\n    /**\n     * Helper: Retrieves the remaining validity of the previous generated `securedApiKey`, the `ValidUntil` parameter must have been provided.\n     *\n     * @summary Helper: Retrieves the remaining validity of the previous generated `secured_api_key`, the `ValidUntil` parameter must have been provided.\n     * @param getSecuredApiKeyRemainingValidity - The `getSecuredApiKeyRemainingValidity` object.\n     * @param getSecuredApiKeyRemainingValidity.securedApiKey - The secured API key generated with the `generateSecuredApiKey` method.\n     */\n    getSecuredApiKeyRemainingValidity: ({ securedApiKey }: GetSecuredApiKeyRemainingValidityOptions): number => {\n      const decodedString = Buffer.from(securedApiKey, 'base64').toString('ascii');\n      const regex = /validUntil=(\\d+)/;\n      const match = decodedString.match(regex);\n\n      if (match === null) {\n        throw new Error('validUntil not found in given secured api key.');\n      }\n\n      return parseInt(match[1], 10) - Math.round(new Date().getTime() / 1000);\n    },\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  IterableOptions,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport {\n  ApiError,\n  createAuth,\n  createIterablePromise,\n  createTransporter,\n  getAlgoliaAgent,\n  shuffle,\n} from '@algolia/client-common';\n\nimport type { AddApiKeyResponse } from '../model/addApiKeyResponse';\nimport type { ApiKey } from '../model/apiKey';\n\nimport type { BatchParams } from '../model/batchParams';\nimport type { BatchResponse } from '../model/batchResponse';\n\nimport type { BrowseResponse } from '../model/browseResponse';\nimport type { CreatedAtResponse } from '../model/createdAtResponse';\nimport type { DeleteApiKeyResponse } from '../model/deleteApiKeyResponse';\n\nimport type { DeleteSourceResponse } from '../model/deleteSourceResponse';\nimport type { DeletedAtResponse } from '../model/deletedAtResponse';\nimport type { DictionarySettingsParams } from '../model/dictionarySettingsParams';\n\nimport type { GetApiKeyResponse } from '../model/getApiKeyResponse';\nimport type { GetDictionarySettingsResponse } from '../model/getDictionarySettingsResponse';\nimport type { GetLogsResponse } from '../model/getLogsResponse';\nimport type { GetObjectsParams } from '../model/getObjectsParams';\nimport type { GetObjectsResponse } from '../model/getObjectsResponse';\nimport type { GetTaskResponse } from '../model/getTaskResponse';\nimport type { GetTopUserIdsResponse } from '../model/getTopUserIdsResponse';\nimport type { HasPendingMappingsResponse } from '../model/hasPendingMappingsResponse';\n\nimport type { Languages } from '../model/languages';\nimport type { ListApiKeysResponse } from '../model/listApiKeysResponse';\nimport type { ListClustersResponse } from '../model/listClustersResponse';\nimport type { ListIndicesResponse } from '../model/listIndicesResponse';\nimport type { ListUserIdsResponse } from '../model/listUserIdsResponse';\n\nimport type { MultipleBatchResponse } from '../model/multipleBatchResponse';\n\nimport type { RemoveUserIdResponse } from '../model/removeUserIdResponse';\nimport type { ReplaceAllObjectsResponse } from '../model/replaceAllObjectsResponse';\nimport type { ReplaceSourceResponse } from '../model/replaceSourceResponse';\nimport type { Rule } from '../model/rule';\nimport type { SaveObjectResponse } from '../model/saveObjectResponse';\nimport type { SaveSynonymResponse } from '../model/saveSynonymResponse';\n\nimport type { SearchDictionaryEntriesResponse } from '../model/searchDictionaryEntriesResponse';\n\nimport type { SearchForFacetValuesResponse } from '../model/searchForFacetValuesResponse';\nimport type { SearchMethodParams } from '../model/searchMethodParams';\n\nimport type { SearchResponse } from '../model/searchResponse';\nimport type { SearchResponses } from '../model/searchResponses';\n\nimport type { SearchRulesResponse } from '../model/searchRulesResponse';\n\nimport type { SearchSynonymsResponse } from '../model/searchSynonymsResponse';\nimport type { SearchUserIdsParams } from '../model/searchUserIdsParams';\nimport type { SearchUserIdsResponse } from '../model/searchUserIdsResponse';\n\nimport type { SettingsResponse } from '../model/settingsResponse';\nimport type { Source } from '../model/source';\nimport type { SynonymHit } from '../model/synonymHit';\nimport type { UpdateApiKeyResponse } from '../model/updateApiKeyResponse';\nimport type { UpdatedAtResponse } from '../model/updatedAtResponse';\nimport type { UpdatedAtWithObjectIdResponse } from '../model/updatedAtWithObjectIdResponse';\nimport type { UpdatedRuleResponse } from '../model/updatedRuleResponse';\nimport type { UserId } from '../model/userId';\n\nimport type {\n  AddOrUpdateObjectProps,\n  AssignUserIdProps,\n  BatchAssignUserIdsProps,\n  BatchDictionaryEntriesProps,\n  BatchProps,\n  BrowseOptions,\n  BrowseProps,\n  ChunkedBatchOptions,\n  ClearObjectsProps,\n  ClearRulesProps,\n  ClearSynonymsProps,\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteApiKeyProps,\n  DeleteByProps,\n  DeleteIndexProps,\n  DeleteObjectProps,\n  DeleteObjectsOptions,\n  DeleteRuleProps,\n  DeleteSourceProps,\n  DeleteSynonymProps,\n  GetApiKeyProps,\n  GetAppTaskProps,\n  GetLogsProps,\n  GetObjectProps,\n  GetRuleProps,\n  GetSettingsProps,\n  GetSynonymProps,\n  GetTaskProps,\n  GetUserIdProps,\n  HasPendingMappingsProps,\n  LegacySearchMethodProps,\n  ListIndicesProps,\n  ListUserIdsProps,\n  OperationIndexProps,\n  PartialUpdateObjectProps,\n  PartialUpdateObjectsOptions,\n  RemoveUserIdProps,\n  ReplaceAllObjectsOptions,\n  ReplaceSourcesProps,\n  RestoreApiKeyProps,\n  SaveObjectProps,\n  SaveObjectsOptions,\n  SaveRuleProps,\n  SaveRulesProps,\n  SaveSynonymProps,\n  SaveSynonymsProps,\n  SearchDictionaryEntriesProps,\n  SearchForFacetValuesProps,\n  SearchRulesProps,\n  SearchSingleIndexProps,\n  SearchSynonymsProps,\n  SetSettingsProps,\n  UpdateApiKeyProps,\n  WaitForApiKeyOptions,\n  WaitForAppTaskOptions,\n  WaitForTaskOptions,\n} from '../model/clientMethodProps';\n\nimport type { BatchRequest } from '../model/batchRequest';\n\nexport const apiClientVersion = '5.10.2';\n\nfunction getDefaultHosts(appId: string): Host[] {\n  return (\n    [\n      {\n        url: `${appId}-dsn.algolia.net`,\n        accept: 'read',\n        protocol: 'https',\n      },\n      {\n        url: `${appId}.algolia.net`,\n        accept: 'write',\n        protocol: 'https',\n      },\n    ] as Host[]\n  ).concat(\n    shuffle([\n      {\n        url: `${appId}-1.algolianet.com`,\n        accept: 'readWrite',\n        protocol: 'https',\n      },\n      {\n        url: `${appId}-2.algolianet.com`,\n        accept: 'readWrite',\n        protocol: 'https',\n      },\n      {\n        url: `${appId}-3.algolianet.com`,\n        accept: 'readWrite',\n        protocol: 'https',\n      },\n    ]),\n  );\n}\n\nexport function createSearchClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  ...options\n}: CreateClientOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(appIdOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Search',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * Helper: Wait for a task to be published (completed) for a given `indexName` and `taskID`.\n     *\n     * @summary Helper method that waits for a task to be published (completed).\n     * @param waitForTaskOptions - The `waitForTaskOptions` object.\n     * @param waitForTaskOptions.indexName - The `indexName` where the operation was performed.\n     * @param waitForTaskOptions.taskID - The `taskID` returned in the method response.\n     * @param waitForTaskOptions.maxRetries - The maximum number of retries. 50 by default.\n     * @param waitForTaskOptions.timeout - The function to decide how long to wait between retries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.\n     */\n    waitForTask(\n      {\n        indexName,\n        taskID,\n        maxRetries = 50,\n        timeout = (retryCount: number): number => Math.min(retryCount * 200, 5000),\n      }: WaitForTaskOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTaskResponse> {\n      let retryCount = 0;\n\n      return createIterablePromise({\n        func: () => this.getTask({ indexName, taskID }, requestOptions),\n        validate: (response) => response.status === 'published',\n        aggregator: () => (retryCount += 1),\n        error: {\n          validate: () => retryCount >= maxRetries,\n          message: () => `The maximum number of retries exceeded. (${retryCount}/${maxRetries})`,\n        },\n        timeout: () => timeout(retryCount),\n      });\n    },\n\n    /**\n     * Helper: Wait for an application-level task to complete for a given `taskID`.\n     *\n     * @summary Helper method that waits for a task to be published (completed).\n     * @param waitForAppTaskOptions - The `waitForTaskOptions` object.\n     * @param waitForAppTaskOptions.taskID - The `taskID` returned in the method response.\n     * @param waitForAppTaskOptions.maxRetries - The maximum number of retries. 50 by default.\n     * @param waitForAppTaskOptions.timeout - The function to decide how long to wait between retries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.\n     */\n    waitForAppTask(\n      {\n        taskID,\n        maxRetries = 50,\n        timeout = (retryCount: number): number => Math.min(retryCount * 200, 5000),\n      }: WaitForAppTaskOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<GetTaskResponse> {\n      let retryCount = 0;\n\n      return createIterablePromise({\n        func: () => this.getAppTask({ taskID }, requestOptions),\n        validate: (response) => response.status === 'published',\n        aggregator: () => (retryCount += 1),\n        error: {\n          validate: () => retryCount >= maxRetries,\n          message: () => `The maximum number of retries exceeded. (${retryCount}/${maxRetries})`,\n        },\n        timeout: () => timeout(retryCount),\n      });\n    },\n\n    /**\n     * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.\n     *\n     * @summary Helper method that waits for an API key task to be processed.\n     * @param waitForApiKeyOptions - The `waitForApiKeyOptions` object.\n     * @param waitForApiKeyOptions.operation - The `operation` that was done on a `key`.\n     * @param waitForApiKeyOptions.key - The `key` that has been added, deleted or updated.\n     * @param waitForApiKeyOptions.apiKey - Necessary to know if an `update` operation has been processed, compare fields of the response with it.\n     * @param waitForApiKeyOptions.maxRetries - The maximum number of retries. 50 by default.\n     * @param waitForApiKeyOptions.timeout - The function to decide how long to wait between retries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getApikey` method and merged with the transporter requestOptions.\n     */\n    waitForApiKey(\n      {\n        operation,\n        key,\n        apiKey,\n        maxRetries = 50,\n        timeout = (retryCount: number): number => Math.min(retryCount * 200, 5000),\n      }: WaitForApiKeyOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<GetApiKeyResponse | undefined> {\n      let retryCount = 0;\n      const baseIteratorOptions: IterableOptions<GetApiKeyResponse | undefined> = {\n        aggregator: () => (retryCount += 1),\n        error: {\n          validate: () => retryCount >= maxRetries,\n          message: () => `The maximum number of retries exceeded. (${retryCount}/${maxRetries})`,\n        },\n        timeout: () => timeout(retryCount),\n      };\n\n      if (operation === 'update') {\n        if (!apiKey) {\n          throw new Error('`apiKey` is required when waiting for an `update` operation.');\n        }\n\n        return createIterablePromise({\n          ...baseIteratorOptions,\n          func: () => this.getApiKey({ key }, requestOptions),\n          validate: (response) => {\n            for (const field of Object.keys(apiKey)) {\n              const value = apiKey[field as keyof ApiKey];\n              const resValue = response[field as keyof ApiKey];\n              if (Array.isArray(value) && Array.isArray(resValue)) {\n                if (value.length !== resValue.length || value.some((v, index) => v !== resValue[index])) {\n                  return false;\n                }\n              } else if (value !== resValue) {\n                return false;\n              }\n            }\n            return true;\n          },\n        });\n      }\n\n      return createIterablePromise({\n        ...baseIteratorOptions,\n        func: () =>\n          this.getApiKey({ key }, requestOptions).catch((error: ApiError) => {\n            if (error.status === 404) {\n              return undefined;\n            }\n\n            throw error;\n          }),\n        validate: (response) => (operation === 'add' ? response !== undefined : response === undefined),\n      });\n    },\n\n    /**\n     * Helper: Iterate on the `browse` method of the client to allow aggregating objects of an index.\n     *\n     * @summary Helper method that iterates on the `browse` method.\n     * @param browseObjects - The `browseObjects` object.\n     * @param browseObjects.indexName - The index in which to perform the request.\n     * @param browseObjects.browseParams - The `browse` parameters.\n     * @param browseObjects.validate - The validator function. It receive the resolved return of the API call. By default, stops when there is no `cursor` in the response.\n     * @param browseObjects.aggregator - The function that runs right after the API call has been resolved, allows you to do anything with the response before `validate`.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `browse` method and merged with the transporter requestOptions.\n     */\n    browseObjects<T>(\n      { indexName, browseParams, ...browseObjectsOptions }: BrowseOptions<BrowseResponse<T>> & BrowseProps,\n      requestOptions?: RequestOptions,\n    ): Promise<BrowseResponse<T>> {\n      return createIterablePromise<BrowseResponse<T>>({\n        func: (previousResponse) => {\n          return this.browse(\n            {\n              indexName,\n              browseParams: {\n                cursor: previousResponse ? previousResponse.cursor : undefined,\n                ...browseParams,\n              },\n            },\n            requestOptions,\n          );\n        },\n        validate: (response) => response.cursor === undefined,\n        ...browseObjectsOptions,\n      });\n    },\n\n    /**\n     * Helper: Iterate on the `searchRules` method of the client to allow aggregating rules of an index.\n     *\n     * @summary Helper method that iterates on the `searchRules` method.\n     * @param browseRules - The `browseRules` object.\n     * @param browseRules.indexName - The index in which to perform the request.\n     * @param browseRules.searchRulesParams - The `searchRules` method parameters.\n     * @param browseRules.validate - The validator function. It receive the resolved return of the API call. By default, stops when there is less hits returned than the number of maximum hits (1000).\n     * @param browseRules.aggregator - The function that runs right after the API call has been resolved, allows you to do anything with the response before `validate`.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `searchRules` method and merged with the transporter requestOptions.\n     */\n    browseRules(\n      { indexName, searchRulesParams, ...browseRulesOptions }: BrowseOptions<SearchRulesResponse> & SearchRulesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchRulesResponse> {\n      const params = {\n        hitsPerPage: 1000,\n        ...searchRulesParams,\n      };\n\n      return createIterablePromise<SearchRulesResponse>({\n        func: (previousResponse) => {\n          return this.searchRules(\n            {\n              indexName,\n              searchRulesParams: {\n                ...params,\n                page: previousResponse ? previousResponse.page + 1 : params.page || 0,\n              },\n            },\n            requestOptions,\n          );\n        },\n        validate: (response) => response.nbHits < params.hitsPerPage,\n        ...browseRulesOptions,\n      });\n    },\n\n    /**\n     * Helper: Iterate on the `searchSynonyms` method of the client to allow aggregating rules of an index.\n     *\n     * @summary Helper method that iterates on the `searchSynonyms` method.\n     * @param browseSynonyms - The `browseSynonyms` object.\n     * @param browseSynonyms.indexName - The index in which to perform the request.\n     * @param browseSynonyms.validate - The validator function. It receive the resolved return of the API call. By default, stops when there is less hits returned than the number of maximum hits (1000).\n     * @param browseSynonyms.aggregator - The function that runs right after the API call has been resolved, allows you to do anything with the response before `validate`.\n     * @param browseSynonyms.searchSynonymsParams - The `searchSynonyms` method parameters.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `searchSynonyms` method and merged with the transporter requestOptions.\n     */\n    browseSynonyms(\n      {\n        indexName,\n        searchSynonymsParams,\n        ...browseSynonymsOptions\n      }: BrowseOptions<SearchSynonymsResponse> & SearchSynonymsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchSynonymsResponse> {\n      const params = {\n        page: 0,\n        ...searchSynonymsParams,\n        hitsPerPage: 1000,\n      };\n\n      return createIterablePromise<SearchSynonymsResponse>({\n        func: (_) => {\n          const resp = this.searchSynonyms(\n            {\n              indexName,\n              searchSynonymsParams: {\n                ...params,\n                page: params.page,\n              },\n            },\n            requestOptions,\n          );\n          params.page += 1;\n          return resp;\n        },\n        validate: (response) => response.nbHits < params.hitsPerPage,\n        ...browseSynonymsOptions,\n      });\n    },\n\n    /**\n     * Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.\n     *\n     * @summary Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.\n     * @param chunkedBatch - The `chunkedBatch` object.\n     * @param chunkedBatch.indexName - The `indexName` to replace `objects` in.\n     * @param chunkedBatch.objects - The array of `objects` to store in the given Algolia `indexName`.\n     * @param chunkedBatch.action - The `batch` `action` to perform on the given array of `objects`, defaults to `addObject`.\n     * @param chunkedBatch.waitForTasks - Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.\n     * @param chunkedBatch.batchSize - The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.\n     */\n    async chunkedBatch(\n      { indexName, objects, action = 'addObject', waitForTasks, batchSize = 1000 }: ChunkedBatchOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<Array<BatchResponse>> {\n      let requests: Array<BatchRequest> = [];\n      const responses: Array<BatchResponse> = [];\n\n      const objectEntries = objects.entries();\n      for (const [i, obj] of objectEntries) {\n        requests.push({ action, body: obj });\n        if (requests.length === batchSize || i === objects.length - 1) {\n          responses.push(await this.batch({ indexName, batchWriteParams: { requests } }, requestOptions));\n          requests = [];\n        }\n      }\n\n      if (waitForTasks) {\n        for (const resp of responses) {\n          await this.waitForTask({ indexName, taskID: resp.taskID });\n        }\n      }\n\n      return responses;\n    },\n\n    /**\n     * Helper: Saves the given array of objects in the given index. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.\n     *\n     * @summary Helper: Saves the given array of objects in the given index. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.\n     * @param saveObjects - The `saveObjects` object.\n     * @param saveObjects.indexName - The `indexName` to save `objects` in.\n     * @param saveObjects.objects - The array of `objects` to store in the given Algolia `indexName`.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `batch` method and merged with the transporter requestOptions.\n     */\n    async saveObjects(\n      { indexName, objects }: SaveObjectsOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<BatchResponse[]> {\n      return await this.chunkedBatch({ indexName, objects, action: 'addObject' }, requestOptions);\n    },\n\n    /**\n     * Helper: Deletes every records for the given objectIDs. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objectIDs in it.\n     *\n     * @summary Helper: Deletes every records for the given objectIDs. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objectIDs in it.\n     * @param deleteObjects - The `deleteObjects` object.\n     * @param deleteObjects.indexName - The `indexName` to delete `objectIDs` from.\n     * @param deleteObjects.objectIDs - The objectIDs to delete.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `batch` method and merged with the transporter requestOptions.\n     */\n    async deleteObjects(\n      { indexName, objectIDs }: DeleteObjectsOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<BatchResponse[]> {\n      return await this.chunkedBatch(\n        {\n          indexName,\n          objects: objectIDs.map((objectID) => ({ objectID })),\n          action: 'deleteObject',\n        },\n        requestOptions,\n      );\n    },\n\n    /**\n     * Helper: Replaces object content of all the given objects according to their respective `objectID` field. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.\n     *\n     * @summary Helper: Replaces object content of all the given objects according to their respective `objectID` field. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.\n     * @param partialUpdateObjects - The `partialUpdateObjects` object.\n     * @param partialUpdateObjects.indexName - The `indexName` to update `objects` in.\n     * @param partialUpdateObjects.objects - The array of `objects` to update in the given Algolia `indexName`.\n     * @param partialUpdateObjects.createIfNotExists - To be provided if non-existing objects are passed, otherwise, the call will fail..\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.\n     */\n    async partialUpdateObjects(\n      { indexName, objects, createIfNotExists }: PartialUpdateObjectsOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<BatchResponse[]> {\n      return await this.chunkedBatch(\n        {\n          indexName,\n          objects,\n          action: createIfNotExists ? 'partialUpdateObject' : 'partialUpdateObjectNoCreate',\n        },\n        requestOptions,\n      );\n    },\n\n    /**\n     * Helper: Replaces all objects (records) in the given `index_name` with the given `objects`. A temporary index is created during this process in order to backup your data.\n     * See https://api-clients-automation.netlify.app/docs/add-new-api-client#5-helpers for implementation details.\n     *\n     * @summary Helper: Replaces all objects (records) in the given `index_name` with the given `objects`. A temporary index is created during this process in order to backup your data.\n     * @param replaceAllObjects - The `replaceAllObjects` object.\n     * @param replaceAllObjects.indexName - The `indexName` to replace `objects` in.\n     * @param replaceAllObjects.objects - The array of `objects` to store in the given Algolia `indexName`.\n     * @param replaceAllObjects.batchSize - The size of the chunk of `objects`. The number of `batch` calls will be equal to `objects.length / batchSize`. Defaults to 1000.\n     * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `batch`, `operationIndex` and `getTask` method and merged with the transporter requestOptions.\n     */\n    async replaceAllObjects(\n      { indexName, objects, batchSize }: ReplaceAllObjectsOptions,\n      requestOptions?: RequestOptions,\n    ): Promise<ReplaceAllObjectsResponse> {\n      const randomSuffix = Math.floor(Math.random() * 1000000) + 100000;\n      const tmpIndexName = `${indexName}_tmp_${randomSuffix}`;\n\n      let copyOperationResponse = await this.operationIndex(\n        {\n          indexName,\n          operationIndexParams: {\n            operation: 'copy',\n            destination: tmpIndexName,\n            scope: ['settings', 'rules', 'synonyms'],\n          },\n        },\n        requestOptions,\n      );\n\n      const batchResponses = await this.chunkedBatch(\n        { indexName: tmpIndexName, objects, waitForTasks: true, batchSize },\n        requestOptions,\n      );\n\n      await this.waitForTask({\n        indexName: tmpIndexName,\n        taskID: copyOperationResponse.taskID,\n      });\n\n      copyOperationResponse = await this.operationIndex(\n        {\n          indexName,\n          operationIndexParams: {\n            operation: 'copy',\n            destination: tmpIndexName,\n            scope: ['settings', 'rules', 'synonyms'],\n          },\n        },\n        requestOptions,\n      );\n      await this.waitForTask({\n        indexName: tmpIndexName,\n        taskID: copyOperationResponse.taskID,\n      });\n\n      const moveOperationResponse = await this.operationIndex(\n        {\n          indexName: tmpIndexName,\n          operationIndexParams: { operation: 'move', destination: indexName },\n        },\n        requestOptions,\n      );\n      await this.waitForTask({\n        indexName: tmpIndexName,\n        taskID: moveOperationResponse.taskID,\n      });\n\n      return { copyOperationResponse, batchResponses, moveOperationResponse };\n    },\n\n    async indexExists({ indexName }: GetSettingsProps): Promise<boolean> {\n      try {\n        await this.getSettings({ indexName });\n      } catch (error) {\n        if (error instanceof ApiError && error.status === 404) {\n          return false;\n        }\n        throw error;\n      }\n\n      return true;\n    },\n\n    /**\n     * Helper: calls the `search` method but with certainty that we will only request Algolia records (hits) and not facets.\n     * Disclaimer: We don't assert that the parameters you pass to this method only contains `hits` requests to prevent impacting search performances, this helper is purely for typing purposes.\n     *\n     * @summary Search multiple indices for `hits`.\n     * @param searchMethodParams - Query requests and strategies. Results will be received in the same order as the queries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchForHits<T>(\n      searchMethodParams: LegacySearchMethodProps | SearchMethodParams,\n      requestOptions?: RequestOptions,\n    ): Promise<{ results: Array<SearchResponse<T>> }> {\n      return this.search(searchMethodParams, requestOptions) as Promise<{ results: Array<SearchResponse<T>> }>;\n    },\n\n    /**\n     * Helper: calls the `search` method but with certainty that we will only request Algolia facets and not records (hits).\n     * Disclaimer: We don't assert that the parameters you pass to this method only contains `facets` requests to prevent impacting search performances, this helper is purely for typing purposes.\n     *\n     * @summary Search multiple indices for `facets`.\n     * @param searchMethodParams - Query requests and strategies. Results will be received in the same order as the queries.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchForFacets(\n      searchMethodParams: LegacySearchMethodProps | SearchMethodParams,\n      requestOptions?: RequestOptions,\n    ): Promise<{ results: Array<SearchForFacetValuesResponse> }> {\n      return this.search(searchMethodParams, requestOptions) as Promise<{\n        results: Array<SearchForFacetValuesResponse>;\n      }>;\n    },\n    /**\n     * Creates a new API key with specific permissions and restrictions.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param apiKey - The apiKey object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    addApiKey(apiKey: ApiKey, requestOptions?: RequestOptions): Promise<AddApiKeyResponse> {\n      if (!apiKey) {\n        throw new Error('Parameter `apiKey` is required when calling `addApiKey`.');\n      }\n\n      if (!apiKey.acl) {\n        throw new Error('Parameter `apiKey.acl` is required when calling `addApiKey`.');\n      }\n\n      const requestPath = '/1/keys';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: apiKey,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * If a record with the specified object ID exists, the existing record is replaced. Otherwise, a new record is added to the index.  To update _some_ attributes of an existing record, use the [`partial` operation](#tag/Records/operation/partialUpdateObject) instead. To add, update, or replace multiple records, use the [`batch` operation](#tag/Records/operation/batch).\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     * @param addOrUpdateObject - The addOrUpdateObject object.\n     * @param addOrUpdateObject.indexName - Name of the index on which to perform the operation.\n     * @param addOrUpdateObject.objectID - Unique record identifier.\n     * @param addOrUpdateObject.body - The record. A schemaless object with attributes that are useful in the context of search and discovery.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    addOrUpdateObject(\n      { indexName, objectID, body }: AddOrUpdateObjectProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtWithObjectIdResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `addOrUpdateObject`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `addOrUpdateObject`.');\n      }\n\n      if (!body) {\n        throw new Error('Parameter `body` is required when calling `addOrUpdateObject`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Adds a source to the list of allowed sources.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param source - Source to add.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    appendSource(source: Source, requestOptions?: RequestOptions): Promise<CreatedAtResponse> {\n      if (!source) {\n        throw new Error('Parameter `source` is required when calling `appendSource`.');\n      }\n\n      if (!source.source) {\n        throw new Error('Parameter `source.source` is required when calling `appendSource`.');\n      }\n\n      const requestPath = '/1/security/sources/append';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: source,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Assigns or moves a user ID to a cluster.  The time it takes to move a user is proportional to the amount of data linked to the user ID.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param assignUserId - The assignUserId object.\n     * @param assignUserId.xAlgoliaUserID - Unique identifier of the user who makes the search request.\n     * @param assignUserId.assignUserIdParams - The assignUserIdParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    assignUserId(\n      { xAlgoliaUserID, assignUserIdParams }: AssignUserIdProps,\n      requestOptions?: RequestOptions,\n    ): Promise<CreatedAtResponse> {\n      if (!xAlgoliaUserID) {\n        throw new Error('Parameter `xAlgoliaUserID` is required when calling `assignUserId`.');\n      }\n\n      if (!assignUserIdParams) {\n        throw new Error('Parameter `assignUserIdParams` is required when calling `assignUserId`.');\n      }\n\n      if (!assignUserIdParams.cluster) {\n        throw new Error('Parameter `assignUserIdParams.cluster` is required when calling `assignUserId`.');\n      }\n\n      const requestPath = '/1/clusters/mapping';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (xAlgoliaUserID !== undefined) {\n        headers['X-Algolia-User-ID'] = xAlgoliaUserID.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: assignUserIdParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Adds, updates, or deletes records in one index with a single API request.  Batching index updates reduces latency and increases data integrity.  - Actions are applied in the order they\\'re specified. - Actions are equivalent to the individual API requests of the same name.\n     * @param batch - The batch object.\n     * @param batch.indexName - Name of the index on which to perform the operation.\n     * @param batch.batchWriteParams - The batchWriteParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    batch({ indexName, batchWriteParams }: BatchProps, requestOptions?: RequestOptions): Promise<BatchResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `batch`.');\n      }\n\n      if (!batchWriteParams) {\n        throw new Error('Parameter `batchWriteParams` is required when calling `batch`.');\n      }\n\n      if (!batchWriteParams.requests) {\n        throw new Error('Parameter `batchWriteParams.requests` is required when calling `batch`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/batch'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: batchWriteParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Assigns multiple user IDs to a cluster.  **You can\\'t move users with this operation**.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param batchAssignUserIds - The batchAssignUserIds object.\n     * @param batchAssignUserIds.xAlgoliaUserID - Unique identifier of the user who makes the search request.\n     * @param batchAssignUserIds.batchAssignUserIdsParams - The batchAssignUserIdsParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    batchAssignUserIds(\n      { xAlgoliaUserID, batchAssignUserIdsParams }: BatchAssignUserIdsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<CreatedAtResponse> {\n      if (!xAlgoliaUserID) {\n        throw new Error('Parameter `xAlgoliaUserID` is required when calling `batchAssignUserIds`.');\n      }\n\n      if (!batchAssignUserIdsParams) {\n        throw new Error('Parameter `batchAssignUserIdsParams` is required when calling `batchAssignUserIds`.');\n      }\n\n      if (!batchAssignUserIdsParams.cluster) {\n        throw new Error('Parameter `batchAssignUserIdsParams.cluster` is required when calling `batchAssignUserIds`.');\n      }\n      if (!batchAssignUserIdsParams.users) {\n        throw new Error('Parameter `batchAssignUserIdsParams.users` is required when calling `batchAssignUserIds`.');\n      }\n\n      const requestPath = '/1/clusters/mapping/batch';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (xAlgoliaUserID !== undefined) {\n        headers['X-Algolia-User-ID'] = xAlgoliaUserID.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: batchAssignUserIdsParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Adds or deletes multiple entries from your plurals, segmentation, or stop word dictionaries.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param batchDictionaryEntries - The batchDictionaryEntries object.\n     * @param batchDictionaryEntries.dictionaryName - Dictionary type in which to search.\n     * @param batchDictionaryEntries.batchDictionaryEntriesParams - The batchDictionaryEntriesParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    batchDictionaryEntries(\n      { dictionaryName, batchDictionaryEntriesParams }: BatchDictionaryEntriesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!dictionaryName) {\n        throw new Error('Parameter `dictionaryName` is required when calling `batchDictionaryEntries`.');\n      }\n\n      if (!batchDictionaryEntriesParams) {\n        throw new Error('Parameter `batchDictionaryEntriesParams` is required when calling `batchDictionaryEntries`.');\n      }\n\n      if (!batchDictionaryEntriesParams.requests) {\n        throw new Error(\n          'Parameter `batchDictionaryEntriesParams.requests` is required when calling `batchDictionaryEntries`.',\n        );\n      }\n\n      const requestPath = '/1/dictionaries/{dictionaryName}/batch'.replace(\n        '{dictionaryName}',\n        encodeURIComponent(dictionaryName),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: batchDictionaryEntriesParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves records from an index, up to 1,000 per request.  While searching retrieves _hits_ (records augmented with attributes for highlighting and ranking details), browsing _just_ returns matching records. This can be useful if you want to export your indices.  - The Analytics API doesn\\'t collect data when using `browse`. - Records are ranked by attributes and custom ranking. - There\\'s no ranking for: typo-tolerance, number of matched words, proximity, geo distance.  Browse requests automatically apply these settings:  - `advancedSyntax`: `false` - `attributesToHighlight`: `[]` - `attributesToSnippet`: `[]` - `distinct`: `false` - `enablePersonalization`: `false` - `enableRules`: `false` - `facets`: `[]` - `getRankingInfo`: `false` - `ignorePlurals`: `false` - `optionalFilters`: `[]` - `typoTolerance`: `true` or `false` (`min` and `strict` evaluate to `true`)  If you send these parameters with your browse requests, they\\'ll be ignored.\n     *\n     * Required API Key ACLs:\n     *  - browse\n     * @param browse - The browse object.\n     * @param browse.indexName - Name of the index on which to perform the operation.\n     * @param browse.browseParams - The browseParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    browse<T>({ indexName, browseParams }: BrowseProps, requestOptions?: RequestOptions): Promise<BrowseResponse<T>> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `browse`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/browse'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: browseParams ? browseParams : {},\n        useReadTransporter: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes only the records from an index while keeping settings, synonyms, and rules.\n     *\n     * Required API Key ACLs:\n     *  - deleteIndex\n     * @param clearObjects - The clearObjects object.\n     * @param clearObjects.indexName - Name of the index on which to perform the operation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    clearObjects({ indexName }: ClearObjectsProps, requestOptions?: RequestOptions): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `clearObjects`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/clear'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes all rules from the index.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param clearRules - The clearRules object.\n     * @param clearRules.indexName - Name of the index on which to perform the operation.\n     * @param clearRules.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    clearRules(\n      { indexName, forwardToReplicas }: ClearRulesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `clearRules`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/rules/clear'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes all synonyms from the index.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param clearSynonyms - The clearSynonyms object.\n     * @param clearSynonyms.indexName - Name of the index on which to perform the operation.\n     * @param clearSynonyms.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    clearSynonyms(\n      { indexName, forwardToReplicas }: ClearSynonymsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `clearSynonyms`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/synonyms/clear'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes the API key.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param deleteApiKey - The deleteApiKey object.\n     * @param deleteApiKey.key - API key.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteApiKey({ key }: DeleteApiKeyProps, requestOptions?: RequestOptions): Promise<DeleteApiKeyResponse> {\n      if (!key) {\n        throw new Error('Parameter `key` is required when calling `deleteApiKey`.');\n      }\n\n      const requestPath = '/1/keys/{key}'.replace('{key}', encodeURIComponent(key));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This operation doesn\\'t accept empty queries or filters.  It\\'s more efficient to get a list of object IDs with the [`browse` operation](#tag/Search/operation/browse), and then delete the records using the [`batch` operation](#tag/Records/operation/batch).\n     *\n     * Required API Key ACLs:\n     *  - deleteIndex\n     * @param deleteBy - The deleteBy object.\n     * @param deleteBy.indexName - Name of the index on which to perform the operation.\n     * @param deleteBy.deleteByParams - The deleteByParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteBy(\n      { indexName, deleteByParams }: DeleteByProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeletedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteBy`.');\n      }\n\n      if (!deleteByParams) {\n        throw new Error('Parameter `deleteByParams` is required when calling `deleteBy`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/deleteByQuery'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: deleteByParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes an index and all its settings.  - Deleting an index doesn\\'t delete its analytics data. - If you try to delete a non-existing index, the operation is ignored without warning. - If the index you want to delete has replica indices, the replicas become independent indices. - If the index you want to delete is a replica index, you must first unlink it from its primary index before you can delete it.   For more information, see [Delete replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/deleting-replicas/).\n     *\n     * Required API Key ACLs:\n     *  - deleteIndex\n     * @param deleteIndex - The deleteIndex object.\n     * @param deleteIndex.indexName - Name of the index on which to perform the operation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteIndex({ indexName }: DeleteIndexProps, requestOptions?: RequestOptions): Promise<DeletedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteIndex`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a record by its object ID.  To delete more than one record, use the [`batch` operation](#tag/Records/operation/batch). To delete records matching a query, use the [`deleteByQuery` operation](#tag/Records/operation/deleteBy).\n     *\n     * Required API Key ACLs:\n     *  - deleteObject\n     * @param deleteObject - The deleteObject object.\n     * @param deleteObject.indexName - Name of the index on which to perform the operation.\n     * @param deleteObject.objectID - Unique record identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteObject(\n      { indexName, objectID }: DeleteObjectProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeletedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteObject`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `deleteObject`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a rule by its ID. To find the object ID for rules, use the [`search` operation](#tag/Rules/operation/searchRules).\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param deleteRule - The deleteRule object.\n     * @param deleteRule.indexName - Name of the index on which to perform the operation.\n     * @param deleteRule.objectID - Unique identifier of a rule object.\n     * @param deleteRule.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteRule(\n      { indexName, objectID, forwardToReplicas }: DeleteRuleProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteRule`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `deleteRule`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/rules/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a source from the list of allowed sources.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param deleteSource - The deleteSource object.\n     * @param deleteSource.source - IP address range of the source.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteSource({ source }: DeleteSourceProps, requestOptions?: RequestOptions): Promise<DeleteSourceResponse> {\n      if (!source) {\n        throw new Error('Parameter `source` is required when calling `deleteSource`.');\n      }\n\n      const requestPath = '/1/security/sources/{source}'.replace('{source}', encodeURIComponent(source));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a synonym by its ID. To find the object IDs of your synonyms, use the [`search` operation](#tag/Synonyms/operation/searchSynonyms).\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param deleteSynonym - The deleteSynonym object.\n     * @param deleteSynonym.indexName - Name of the index on which to perform the operation.\n     * @param deleteSynonym.objectID - Unique identifier of a synonym object.\n     * @param deleteSynonym.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteSynonym(\n      { indexName, objectID, forwardToReplicas }: DeleteSynonymProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeletedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteSynonym`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `deleteSynonym`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/synonyms/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Gets the permissions and restrictions of an API key.  When authenticating with the admin API key, you can request information for any of your application\\'s keys. When authenticating with other API keys, you can only retrieve information for that key, with the description replaced by `<redacted>`.\n     * @param getApiKey - The getApiKey object.\n     * @param getApiKey.key - API key.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getApiKey({ key }: GetApiKeyProps, requestOptions?: RequestOptions): Promise<GetApiKeyResponse> {\n      if (!key) {\n        throw new Error('Parameter `key` is required when calling `getApiKey`.');\n      }\n\n      const requestPath = '/1/keys/{key}'.replace('{key}', encodeURIComponent(key));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Checks the status of a given application task.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param getAppTask - The getAppTask object.\n     * @param getAppTask.taskID - Unique task identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getAppTask({ taskID }: GetAppTaskProps, requestOptions?: RequestOptions): Promise<GetTaskResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `getAppTask`.');\n      }\n\n      const requestPath = '/1/task/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Lists supported languages with their supported dictionary types and number of custom entries.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getDictionaryLanguages(requestOptions?: RequestOptions): Promise<{ [key: string]: Languages }> {\n      const requestPath = '/1/dictionaries/*/languages';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the languages for which standard dictionary entries are turned off.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getDictionarySettings(requestOptions?: RequestOptions): Promise<GetDictionarySettingsResponse> {\n      const requestPath = '/1/dictionaries/*/settings';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * The request must be authenticated by an API key with the [`logs` ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl).  - Logs are held for the last seven days. - Up to 1,000 API requests per server are logged. - This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn\\'t appear in the logs itself.\n     *\n     * Required API Key ACLs:\n     *  - logs\n     * @param getLogs - The getLogs object.\n     * @param getLogs.offset - First log entry to retrieve. The most recent entries are listed first.\n     * @param getLogs.length - Maximum number of entries to retrieve.\n     * @param getLogs.indexName - Index for which to retrieve log entries. By default, log entries are retrieved for all indices.\n     * @param getLogs.type - Type of log entries to retrieve. By default, all log entries are retrieved.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getLogs(\n      { offset, length, indexName, type }: GetLogsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<GetLogsResponse> {\n      const requestPath = '/1/logs';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (offset !== undefined) {\n        queryParameters['offset'] = offset.toString();\n      }\n\n      if (length !== undefined) {\n        queryParameters['length'] = length.toString();\n      }\n\n      if (indexName !== undefined) {\n        queryParameters['indexName'] = indexName.toString();\n      }\n\n      if (type !== undefined) {\n        queryParameters['type'] = type.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves one record by its object ID.  To retrieve more than one record, use the [`objects` operation](#tag/Records/operation/getObjects).\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param getObject - The getObject object.\n     * @param getObject.indexName - Name of the index on which to perform the operation.\n     * @param getObject.objectID - Unique record identifier.\n     * @param getObject.attributesToRetrieve - Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned.  `objectID` is always retrieved.  Attributes included in `unretrievableAttributes` won\\'t be retrieved unless the request is authenticated with the admin API key.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getObject(\n      { indexName, objectID, attributesToRetrieve }: GetObjectProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getObject`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `getObject`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (attributesToRetrieve !== undefined) {\n        queryParameters['attributesToRetrieve'] = attributesToRetrieve.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves one or more records, potentially from different indices.  Records are returned in the same order as the requests.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param getObjectsParams - Request object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getObjects<T>(getObjectsParams: GetObjectsParams, requestOptions?: RequestOptions): Promise<GetObjectsResponse<T>> {\n      if (!getObjectsParams) {\n        throw new Error('Parameter `getObjectsParams` is required when calling `getObjects`.');\n      }\n\n      if (!getObjectsParams.requests) {\n        throw new Error('Parameter `getObjectsParams.requests` is required when calling `getObjects`.');\n      }\n\n      const requestPath = '/1/indexes/*/objects';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: getObjectsParams,\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a rule by its ID. To find the object ID of rules, use the [`search` operation](#tag/Rules/operation/searchRules).\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param getRule - The getRule object.\n     * @param getRule.indexName - Name of the index on which to perform the operation.\n     * @param getRule.objectID - Unique identifier of a rule object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRule({ indexName, objectID }: GetRuleProps, requestOptions?: RequestOptions): Promise<Rule> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getRule`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `getRule`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/rules/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves an object with non-null index settings.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param getSettings - The getSettings object.\n     * @param getSettings.indexName - Name of the index on which to perform the operation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSettings({ indexName }: GetSettingsProps, requestOptions?: RequestOptions): Promise<SettingsResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getSettings`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/settings'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves all allowed IP addresses with access to your application.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSources(requestOptions?: RequestOptions): Promise<Array<Source>> {\n      const requestPath = '/1/security/sources';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a synonym by its ID. To find the object IDs for your synonyms, use the [`search` operation](#tag/Synonyms/operation/searchSynonyms).\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param getSynonym - The getSynonym object.\n     * @param getSynonym.indexName - Name of the index on which to perform the operation.\n     * @param getSynonym.objectID - Unique identifier of a synonym object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSynonym({ indexName, objectID }: GetSynonymProps, requestOptions?: RequestOptions): Promise<SynonymHit> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getSynonym`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `getSynonym`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/synonyms/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Checks the status of a given task.  Indexing tasks are asynchronous. When you add, update, or delete records or indices, a task is created on a queue and completed depending on the load on the server.  The indexing tasks\\' responses include a task ID that you can use to check the status.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     * @param getTask - The getTask object.\n     * @param getTask.indexName - Name of the index on which to perform the operation.\n     * @param getTask.taskID - Unique task identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTask({ indexName, taskID }: GetTaskProps, requestOptions?: RequestOptions): Promise<GetTaskResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getTask`.');\n      }\n\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `getTask`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/task/{taskID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Get the IDs of the 10 users with the highest number of records per cluster.  Since it can take a few seconds to get the data from the different clusters, the response isn\\'t real-time.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTopUserIds(requestOptions?: RequestOptions): Promise<GetTopUserIdsResponse> {\n      const requestPath = '/1/clusters/mapping/top';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Returns the user ID data stored in the mapping.  Since it can take a few seconds to get the data from the different clusters, the response isn\\'t real-time.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param getUserId - The getUserId object.\n     * @param getUserId.userID - Unique identifier of the user who makes the search request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getUserId({ userID }: GetUserIdProps, requestOptions?: RequestOptions): Promise<UserId> {\n      if (!userID) {\n        throw new Error('Parameter `userID` is required when calling `getUserId`.');\n      }\n\n      const requestPath = '/1/clusters/mapping/{userID}'.replace('{userID}', encodeURIComponent(userID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param hasPendingMappings - The hasPendingMappings object.\n     * @param hasPendingMappings.getClusters - Whether to include the cluster\\'s pending mapping state in the response.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    hasPendingMappings(\n      { getClusters }: HasPendingMappingsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<HasPendingMappingsResponse> {\n      const requestPath = '/1/clusters/mapping/pending';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (getClusters !== undefined) {\n        queryParameters['getClusters'] = getClusters.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Lists all API keys associated with your Algolia application, including their permissions and restrictions.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listApiKeys(requestOptions?: RequestOptions): Promise<ListApiKeysResponse> {\n      const requestPath = '/1/keys';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Lists the available clusters in a multi-cluster setup.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listClusters(requestOptions?: RequestOptions): Promise<ListClustersResponse> {\n      const requestPath = '/1/clusters';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Lists all indices in the current Algolia application.  The request follows any index restrictions of the API key you use to make the request.\n     *\n     * Required API Key ACLs:\n     *  - listIndexes\n     * @param listIndices - The listIndices object.\n     * @param listIndices.page - Requested page of the API response. If `null`, the API response is not paginated.\n     * @param listIndices.hitsPerPage - Number of hits per page.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listIndices(\n      { page, hitsPerPage }: ListIndicesProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListIndicesResponse> {\n      const requestPath = '/1/indexes';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (hitsPerPage !== undefined) {\n        queryParameters['hitsPerPage'] = hitsPerPage.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Lists the userIDs assigned to a multi-cluster application.  Since it can take a few seconds to get the data from the different clusters, the response isn\\'t real-time.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param listUserIds - The listUserIds object.\n     * @param listUserIds.page - Requested page of the API response. If `null`, the API response is not paginated.\n     * @param listUserIds.hitsPerPage - Number of hits per page.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listUserIds(\n      { page, hitsPerPage }: ListUserIdsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListUserIdsResponse> {\n      const requestPath = '/1/clusters/mapping';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (hitsPerPage !== undefined) {\n        queryParameters['hitsPerPage'] = hitsPerPage.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Adds, updates, or deletes records in multiple indices with a single API request.  - Actions are applied in the order they are specified. - Actions are equivalent to the individual API requests of the same name.\n     * @param batchParams - The batchParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    multipleBatch(batchParams: BatchParams, requestOptions?: RequestOptions): Promise<MultipleBatchResponse> {\n      if (!batchParams) {\n        throw new Error('Parameter `batchParams` is required when calling `multipleBatch`.');\n      }\n\n      if (!batchParams.requests) {\n        throw new Error('Parameter `batchParams.requests` is required when calling `multipleBatch`.');\n      }\n\n      const requestPath = '/1/indexes/*/batch';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: batchParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Copies or moves (renames) an index within the same Algolia application.  - Existing destination indices are overwritten, except for their analytics data. - If the destination index doesn\\'t exist yet, it\\'ll be created.  **Copy**  - Copying a source index that doesn\\'t exist creates a new index with 0 records and default settings. - The API keys of the source index are merged with the existing keys in the destination index. - You can\\'t copy the `enableReRanking`, `mode`, and `replicas` settings. - You can\\'t copy to a destination index that already has replicas. - Be aware of the [size limits](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits). - Related guide: [Copy indices](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/how-to/copy-indices/)  **Move**  - Moving a source index that doesn\\'t exist is ignored without returning an error. - When moving an index, the analytics data keeps its original name, and a new set of analytics data is started for the new name.   To access the original analytics in the dashboard, create an index with the original name. - If the destination index has replicas, moving will overwrite the existing index and copy the data to the replica indices. - Related guide: [Move indices](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/how-to/move-indices/).\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     * @param operationIndex - The operationIndex object.\n     * @param operationIndex.indexName - Name of the index on which to perform the operation.\n     * @param operationIndex.operationIndexParams - The operationIndexParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    operationIndex(\n      { indexName, operationIndexParams }: OperationIndexProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `operationIndex`.');\n      }\n\n      if (!operationIndexParams) {\n        throw new Error('Parameter `operationIndexParams` is required when calling `operationIndex`.');\n      }\n\n      if (!operationIndexParams.operation) {\n        throw new Error('Parameter `operationIndexParams.operation` is required when calling `operationIndex`.');\n      }\n      if (!operationIndexParams.destination) {\n        throw new Error('Parameter `operationIndexParams.destination` is required when calling `operationIndex`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/operation'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: operationIndexParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Adds new attributes to a record, or updates existing ones.  - If a record with the specified object ID doesn\\'t exist,   a new record is added to the index **if** `createIfNotExists` is true. - If the index doesn\\'t exist yet, this method creates a new index. - You can use any first-level attribute but not nested attributes.   If you specify a nested attribute, the engine treats it as a replacement for its first-level ancestor.  To update an attribute without pushing the entire record, you can use these built-in operations. These operations can be helpful if you don\\'t have access to your initial data.  - Increment: increment a numeric attribute - Decrement: decrement a numeric attribute - Add: append a number or string element to an array attribute - Remove: remove all matching number or string elements from an array attribute made of numbers or strings - AddUnique: add a number or string element to an array attribute made of numbers or strings only if it\\'s not already present - IncrementFrom: increment a numeric integer attribute only if the provided value matches the current value, and otherwise ignore the whole object update. For example, if you pass an IncrementFrom value of 2 for the version attribute, but the current value of the attribute is 1, the engine ignores the update. If the object doesn\\'t exist, the engine only creates it if you pass an IncrementFrom value of 0. - IncrementSet: increment a numeric integer attribute only if the provided value is greater than the current value, and otherwise ignore the whole object update. For example, if you pass an IncrementSet value of 2 for the version attribute, and the current value of the attribute is 1, the engine updates the object. If the object doesn\\'t exist yet, the engine only creates it if you pass an IncrementSet value greater than 0.  You can specify an operation by providing an object with the attribute to update as the key and its value being an object with the following properties:  - _operation: the operation to apply on the attribute - value: the right-hand side argument to the operation, for example, increment or decrement step, value to add or remove.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     * @param partialUpdateObject - The partialUpdateObject object.\n     * @param partialUpdateObject.indexName - Name of the index on which to perform the operation.\n     * @param partialUpdateObject.objectID - Unique record identifier.\n     * @param partialUpdateObject.attributesToUpdate - Attributes with their values.\n     * @param partialUpdateObject.createIfNotExists - Whether to create a new record if it doesn\\'t exist.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    partialUpdateObject(\n      { indexName, objectID, attributesToUpdate, createIfNotExists }: PartialUpdateObjectProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtWithObjectIdResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `partialUpdateObject`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `partialUpdateObject`.');\n      }\n\n      if (!attributesToUpdate) {\n        throw new Error('Parameter `attributesToUpdate` is required when calling `partialUpdateObject`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{objectID}/partial'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (createIfNotExists !== undefined) {\n        queryParameters['createIfNotExists'] = createIfNotExists.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: attributesToUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a user ID and its associated data from the clusters.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param removeUserId - The removeUserId object.\n     * @param removeUserId.userID - Unique identifier of the user who makes the search request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    removeUserId({ userID }: RemoveUserIdProps, requestOptions?: RequestOptions): Promise<RemoveUserIdResponse> {\n      if (!userID) {\n        throw new Error('Parameter `userID` is required when calling `removeUserId`.');\n      }\n\n      const requestPath = '/1/clusters/mapping/{userID}'.replace('{userID}', encodeURIComponent(userID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Replaces the list of allowed sources.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param replaceSources - The replaceSources object.\n     * @param replaceSources.source - Allowed sources.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    replaceSources({ source }: ReplaceSourcesProps, requestOptions?: RequestOptions): Promise<ReplaceSourceResponse> {\n      if (!source) {\n        throw new Error('Parameter `source` is required when calling `replaceSources`.');\n      }\n\n      const requestPath = '/1/security/sources';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: source,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Restores a deleted API key.  Restoring resets the `validity` attribute to `0`.  Algolia stores up to 1,000 API keys per application. If you create more, the oldest API keys are deleted and can\\'t be restored.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param restoreApiKey - The restoreApiKey object.\n     * @param restoreApiKey.key - API key.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    restoreApiKey({ key }: RestoreApiKeyProps, requestOptions?: RequestOptions): Promise<AddApiKeyResponse> {\n      if (!key) {\n        throw new Error('Parameter `key` is required when calling `restoreApiKey`.');\n      }\n\n      const requestPath = '/1/keys/{key}/restore'.replace('{key}', encodeURIComponent(key));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Adds a record to an index or replace it.  - If the record doesn\\'t have an object ID, a new record with an auto-generated object ID is added to your index. - If a record with the specified object ID exists, the existing record is replaced. - If a record with the specified object ID doesn\\'t exist, a new record is added to your index. - If you add a record to an index that doesn\\'t exist yet, a new index is created.  To update _some_ attributes of a record, use the [`partial` operation](#tag/Records/operation/partialUpdateObject). To add, update, or replace multiple records, use the [`batch` operation](#tag/Records/operation/batch).\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     * @param saveObject - The saveObject object.\n     * @param saveObject.indexName - Name of the index on which to perform the operation.\n     * @param saveObject.body - The record. A schemaless object with attributes that are useful in the context of search and discovery.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    saveObject({ indexName, body }: SaveObjectProps, requestOptions?: RequestOptions): Promise<SaveObjectResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `saveObject`.');\n      }\n\n      if (!body) {\n        throw new Error('Parameter `body` is required when calling `saveObject`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * If a rule with the specified object ID doesn\\'t exist, it\\'s created. Otherwise, the existing rule is replaced.  To create or update more than one rule, use the [`batch` operation](#tag/Rules/operation/saveRules).\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param saveRule - The saveRule object.\n     * @param saveRule.indexName - Name of the index on which to perform the operation.\n     * @param saveRule.objectID - Unique identifier of a rule object.\n     * @param saveRule.rule - The rule object.\n     * @param saveRule.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    saveRule(\n      { indexName, objectID, rule, forwardToReplicas }: SaveRuleProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedRuleResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `saveRule`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `saveRule`.');\n      }\n\n      if (!rule) {\n        throw new Error('Parameter `rule` is required when calling `saveRule`.');\n      }\n\n      if (!rule.objectID) {\n        throw new Error('Parameter `rule.objectID` is required when calling `saveRule`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/rules/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: rule,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Create or update multiple rules.  If a rule with the specified object ID doesn\\'t exist, Algolia creates a new one. Otherwise, existing rules are replaced.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param saveRules - The saveRules object.\n     * @param saveRules.indexName - Name of the index on which to perform the operation.\n     * @param saveRules.rules - The rules object.\n     * @param saveRules.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param saveRules.clearExistingRules - Whether existing rules should be deleted before adding this batch.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    saveRules(\n      { indexName, rules, forwardToReplicas, clearExistingRules }: SaveRulesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `saveRules`.');\n      }\n\n      if (!rules) {\n        throw new Error('Parameter `rules` is required when calling `saveRules`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/rules/batch'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      if (clearExistingRules !== undefined) {\n        queryParameters['clearExistingRules'] = clearExistingRules.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: rules,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * If a synonym with the specified object ID doesn\\'t exist, Algolia adds a new one. Otherwise, the existing synonym is replaced. To add multiple synonyms in a single API request, use the [`batch` operation](#tag/Synonyms/operation/saveSynonyms).\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param saveSynonym - The saveSynonym object.\n     * @param saveSynonym.indexName - Name of the index on which to perform the operation.\n     * @param saveSynonym.objectID - Unique identifier of a synonym object.\n     * @param saveSynonym.synonymHit - The synonymHit object.\n     * @param saveSynonym.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    saveSynonym(\n      { indexName, objectID, synonymHit, forwardToReplicas }: SaveSynonymProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SaveSynonymResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `saveSynonym`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `saveSynonym`.');\n      }\n\n      if (!synonymHit) {\n        throw new Error('Parameter `synonymHit` is required when calling `saveSynonym`.');\n      }\n\n      if (!synonymHit.objectID) {\n        throw new Error('Parameter `synonymHit.objectID` is required when calling `saveSynonym`.');\n      }\n      if (!synonymHit.type) {\n        throw new Error('Parameter `synonymHit.type` is required when calling `saveSynonym`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/synonyms/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: synonymHit,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * If a synonym with the `objectID` doesn\\'t exist, Algolia adds a new one. Otherwise, existing synonyms are replaced.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param saveSynonyms - The saveSynonyms object.\n     * @param saveSynonyms.indexName - Name of the index on which to perform the operation.\n     * @param saveSynonyms.synonymHit - The synonymHit object.\n     * @param saveSynonyms.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param saveSynonyms.replaceExistingSynonyms - Whether to replace all synonyms in the index with the ones sent with this request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    saveSynonyms(\n      { indexName, synonymHit, forwardToReplicas, replaceExistingSynonyms }: SaveSynonymsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `saveSynonyms`.');\n      }\n\n      if (!synonymHit) {\n        throw new Error('Parameter `synonymHit` is required when calling `saveSynonyms`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/synonyms/batch'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      if (replaceExistingSynonyms !== undefined) {\n        queryParameters['replaceExistingSynonyms'] = replaceExistingSynonyms.toString();\n      }\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: synonymHit,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Sends multiple search requests to one or more indices.  This can be useful in these cases:  - Different indices for different purposes, such as, one index for products, another one for marketing content. - Multiple searches to the same index—for example, with different filters.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param searchMethodParams - Muli-search request body. Results are returned in the same order as the requests.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    search<T>(\n      searchMethodParams: SearchMethodParams | LegacySearchMethodProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchResponses<T>> {\n      if (searchMethodParams && Array.isArray(searchMethodParams)) {\n        const newSignatureRequest: SearchMethodParams = {\n          requests: searchMethodParams.map(({ params, ...legacyRequest }) => {\n            if (legacyRequest.type === 'facet') {\n              return {\n                ...legacyRequest,\n                ...params,\n                type: 'facet',\n              };\n            }\n\n            return {\n              ...legacyRequest,\n              ...params,\n              facet: undefined,\n              maxFacetHits: undefined,\n              facetQuery: undefined,\n            };\n          }),\n        };\n\n        searchMethodParams = newSignatureRequest;\n      }\n\n      if (!searchMethodParams) {\n        throw new Error('Parameter `searchMethodParams` is required when calling `search`.');\n      }\n\n      if (!searchMethodParams.requests) {\n        throw new Error('Parameter `searchMethodParams.requests` is required when calling `search`.');\n      }\n\n      const requestPath = '/1/indexes/*/queries';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchMethodParams,\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for standard and custom dictionary entries.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param searchDictionaryEntries - The searchDictionaryEntries object.\n     * @param searchDictionaryEntries.dictionaryName - Dictionary type in which to search.\n     * @param searchDictionaryEntries.searchDictionaryEntriesParams - The searchDictionaryEntriesParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchDictionaryEntries(\n      { dictionaryName, searchDictionaryEntriesParams }: SearchDictionaryEntriesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchDictionaryEntriesResponse> {\n      if (!dictionaryName) {\n        throw new Error('Parameter `dictionaryName` is required when calling `searchDictionaryEntries`.');\n      }\n\n      if (!searchDictionaryEntriesParams) {\n        throw new Error(\n          'Parameter `searchDictionaryEntriesParams` is required when calling `searchDictionaryEntries`.',\n        );\n      }\n\n      if (!searchDictionaryEntriesParams.query) {\n        throw new Error(\n          'Parameter `searchDictionaryEntriesParams.query` is required when calling `searchDictionaryEntries`.',\n        );\n      }\n\n      const requestPath = '/1/dictionaries/{dictionaryName}/search'.replace(\n        '{dictionaryName}',\n        encodeURIComponent(dictionaryName),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchDictionaryEntriesParams,\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for values of a specified facet attribute.  - By default, facet values are sorted by decreasing count.   You can adjust this with the `sortFacetValueBy` parameter. - Searching for facet values doesn\\'t work if you have **more than 65 searchable facets and searchable attributes combined**.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param searchForFacetValues - The searchForFacetValues object.\n     * @param searchForFacetValues.indexName - Name of the index on which to perform the operation.\n     * @param searchForFacetValues.facetName - Facet attribute in which to search for values.  This attribute must be included in the `attributesForFaceting` index setting with the `searchable()` modifier.\n     * @param searchForFacetValues.searchForFacetValuesRequest - The searchForFacetValuesRequest object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchForFacetValues(\n      { indexName, facetName, searchForFacetValuesRequest }: SearchForFacetValuesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchForFacetValuesResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `searchForFacetValues`.');\n      }\n\n      if (!facetName) {\n        throw new Error('Parameter `facetName` is required when calling `searchForFacetValues`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/facets/{facetName}/query'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{facetName}', encodeURIComponent(facetName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchForFacetValuesRequest ? searchForFacetValuesRequest : {},\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for rules in your index.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param searchRules - The searchRules object.\n     * @param searchRules.indexName - Name of the index on which to perform the operation.\n     * @param searchRules.searchRulesParams - The searchRulesParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchRules(\n      { indexName, searchRulesParams }: SearchRulesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchRulesResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `searchRules`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/rules/search'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchRulesParams ? searchRulesParams : {},\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches a single index and returns matching search results (_hits_).  This method lets you retrieve up to 1,000 hits. If you need more, use the [`browse` operation](#tag/Search/operation/browse) or increase the `paginatedLimitedTo` index setting.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param searchSingleIndex - The searchSingleIndex object.\n     * @param searchSingleIndex.indexName - Name of the index on which to perform the operation.\n     * @param searchSingleIndex.searchParams - The searchParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchSingleIndex<T>(\n      { indexName, searchParams }: SearchSingleIndexProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchResponse<T>> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `searchSingleIndex`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/query'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchParams ? searchParams : {},\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for synonyms in your index.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param searchSynonyms - The searchSynonyms object.\n     * @param searchSynonyms.indexName - Name of the index on which to perform the operation.\n     * @param searchSynonyms.searchSynonymsParams - Body of the `searchSynonyms` operation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchSynonyms(\n      { indexName, searchSynonymsParams }: SearchSynonymsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchSynonymsResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `searchSynonyms`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/synonyms/search'.replace(\n        '{indexName}',\n        encodeURIComponent(indexName),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchSynonymsParams ? searchSynonymsParams : {},\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Since it can take a few seconds to get the data from the different clusters, the response isn\\'t real-time.  To ensure rapid updates, the user IDs index isn\\'t built at the same time as the mapping. Instead, it\\'s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param searchUserIdsParams - The searchUserIdsParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchUserIds(\n      searchUserIdsParams: SearchUserIdsParams,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchUserIdsResponse> {\n      if (!searchUserIdsParams) {\n        throw new Error('Parameter `searchUserIdsParams` is required when calling `searchUserIds`.');\n      }\n\n      if (!searchUserIdsParams.query) {\n        throw new Error('Parameter `searchUserIdsParams.query` is required when calling `searchUserIds`.');\n      }\n\n      const requestPath = '/1/clusters/mapping/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchUserIdsParams,\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Turns standard stop word dictionary entries on or off for a given language.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param dictionarySettingsParams - The dictionarySettingsParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    setDictionarySettings(\n      dictionarySettingsParams: DictionarySettingsParams,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!dictionarySettingsParams) {\n        throw new Error('Parameter `dictionarySettingsParams` is required when calling `setDictionarySettings`.');\n      }\n\n      if (!dictionarySettingsParams.disableStandardEntries) {\n        throw new Error(\n          'Parameter `dictionarySettingsParams.disableStandardEntries` is required when calling `setDictionarySettings`.',\n        );\n      }\n\n      const requestPath = '/1/dictionaries/*/settings';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: dictionarySettingsParams,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Update the specified index settings.  Index settings that you don\\'t specify are left unchanged. Specify `null` to reset a setting to its default value.  For best performance, update the index settings before you add new records to your index.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param setSettings - The setSettings object.\n     * @param setSettings.indexName - Name of the index on which to perform the operation.\n     * @param setSettings.indexSettings - The indexSettings object.\n     * @param setSettings.forwardToReplicas - Whether changes are applied to replica indices.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    setSettings(\n      { indexName, indexSettings, forwardToReplicas }: SetSettingsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<UpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `setSettings`.');\n      }\n\n      if (!indexSettings) {\n        throw new Error('Parameter `indexSettings` is required when calling `setSettings`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/settings'.replace('{indexName}', encodeURIComponent(indexName));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (forwardToReplicas !== undefined) {\n        queryParameters['forwardToReplicas'] = forwardToReplicas.toString();\n      }\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: indexSettings,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Replaces the permissions of an existing API key.  Any unspecified attribute resets that attribute to its default value.\n     *\n     * Required API Key ACLs:\n     *  - admin\n     * @param updateApiKey - The updateApiKey object.\n     * @param updateApiKey.key - API key.\n     * @param updateApiKey.apiKey - The apiKey object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateApiKey({ key, apiKey }: UpdateApiKeyProps, requestOptions?: RequestOptions): Promise<UpdateApiKeyResponse> {\n      if (!key) {\n        throw new Error('Parameter `key` is required when calling `updateApiKey`.');\n      }\n\n      if (!apiKey) {\n        throw new Error('Parameter `apiKey` is required when calling `updateApiKey`.');\n      }\n\n      if (!apiKey.acl) {\n        throw new Error('Parameter `apiKey.acl` is required when calling `updateApiKey`.');\n      }\n\n      const requestPath = '/1/keys/{key}'.replace('{key}', encodeURIComponent(key));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: apiKey,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6754, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6760, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/ingestion/builds/node.ts","turbopack://[project]/node_modules/@algolia/ingestion/src/ingestionClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type IngestionClient = ReturnType<typeof createIngestionClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createIngestionClient } from '../src/ingestionClient';\n\nimport type { Region } from '../src/ingestionClient';\nimport { REGIONS } from '../src/ingestionClient';\n\nexport type { Region, RegionOptions } from '../src/ingestionClient';\n\nexport { apiClientVersion, isOnDemandTrigger, isScheduleTrigger, isSubscriptionTrigger } from '../src/ingestionClient';\n\nexport * from '../model';\n\nexport function ingestionClient(\n  appId: string,\n  apiKey: string,\n  region: Region,\n  options?: ClientOptions,\n): IngestionClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  if (!region || (region && (typeof region !== 'string' || !REGIONS.includes(region)))) {\n    throw new Error(`\\`region\\` is required and must be one of the following: ${REGIONS.join(', ')}`);\n  }\n\n  return {\n    ...createIngestionClient({\n      appId,\n      apiKey,\n      region,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { Authentication } from '../model/authentication';\nimport type { AuthenticationCreate } from '../model/authenticationCreate';\nimport type { AuthenticationCreateResponse } from '../model/authenticationCreateResponse';\nimport type { AuthenticationSearch } from '../model/authenticationSearch';\n\nimport type { AuthenticationUpdateResponse } from '../model/authenticationUpdateResponse';\nimport type { DeleteResponse } from '../model/deleteResponse';\nimport type { Destination } from '../model/destination';\nimport type { DestinationCreate } from '../model/destinationCreate';\nimport type { DestinationCreateResponse } from '../model/destinationCreateResponse';\nimport type { DestinationSearch } from '../model/destinationSearch';\n\nimport type { DestinationUpdateResponse } from '../model/destinationUpdateResponse';\n\nimport type { Event } from '../model/event';\n\nimport type { ListAuthenticationsResponse } from '../model/listAuthenticationsResponse';\nimport type { ListDestinationsResponse } from '../model/listDestinationsResponse';\nimport type { ListEventsResponse } from '../model/listEventsResponse';\nimport type { ListSourcesResponse } from '../model/listSourcesResponse';\nimport type { ListTasksResponse } from '../model/listTasksResponse';\nimport type { ListTasksResponseV1 } from '../model/listTasksResponseV1';\nimport type { ListTransformationsResponse } from '../model/listTransformationsResponse';\n\nimport type { Run } from '../model/run';\nimport type { RunListResponse } from '../model/runListResponse';\nimport type { RunResponse } from '../model/runResponse';\n\nimport type { RunSourceResponse } from '../model/runSourceResponse';\n\nimport type { Source } from '../model/source';\nimport type { SourceCreate } from '../model/sourceCreate';\nimport type { SourceCreateResponse } from '../model/sourceCreateResponse';\nimport type { SourceSearch } from '../model/sourceSearch';\n\nimport type { SourceUpdateResponse } from '../model/sourceUpdateResponse';\nimport type { SourceWatchResponse } from '../model/sourceWatchResponse';\nimport type { Task } from '../model/task';\nimport type { TaskCreate } from '../model/taskCreate';\nimport type { TaskCreateResponse } from '../model/taskCreateResponse';\nimport type { TaskCreateV1 } from '../model/taskCreateV1';\nimport type { TaskSearch } from '../model/taskSearch';\n\nimport type { TaskUpdateResponse } from '../model/taskUpdateResponse';\n\nimport type { TaskV1 } from '../model/taskV1';\nimport type { Transformation } from '../model/transformation';\nimport type { TransformationCreate } from '../model/transformationCreate';\nimport type { TransformationCreateResponse } from '../model/transformationCreateResponse';\nimport type { TransformationSearch } from '../model/transformationSearch';\n\nimport type { TransformationTry } from '../model/transformationTry';\nimport type { TransformationTryResponse } from '../model/transformationTryResponse';\nimport type { TransformationUpdateResponse } from '../model/transformationUpdateResponse';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteAuthenticationProps,\n  DeleteDestinationProps,\n  DeleteSourceProps,\n  DeleteTaskProps,\n  DeleteTaskV1Props,\n  DeleteTransformationProps,\n  DisableTaskProps,\n  DisableTaskV1Props,\n  EnableTaskProps,\n  EnableTaskV1Props,\n  GetAuthenticationProps,\n  GetDestinationProps,\n  GetEventProps,\n  GetRunProps,\n  GetSourceProps,\n  GetTaskProps,\n  GetTaskV1Props,\n  GetTransformationProps,\n  ListAuthenticationsProps,\n  ListDestinationsProps,\n  ListEventsProps,\n  ListRunsProps,\n  ListSourcesProps,\n  ListTasksProps,\n  ListTasksV1Props,\n  ListTransformationsProps,\n  PushTaskProps,\n  RunSourceProps,\n  RunTaskProps,\n  RunTaskV1Props,\n  TriggerDockerSourceDiscoverProps,\n  TryTransformationBeforeUpdateProps,\n  UpdateAuthenticationProps,\n  UpdateDestinationProps,\n  UpdateSourceProps,\n  UpdateTaskProps,\n  UpdateTaskV1Props,\n  UpdateTransformationProps,\n  ValidateSourceBeforeUpdateProps,\n} from '../model/clientMethodProps';\n\nimport type { OnDemandTrigger } from '../model/onDemandTrigger';\nimport type { ScheduleTrigger } from '../model/scheduleTrigger';\nimport type { SubscriptionTrigger } from '../model/subscriptionTrigger';\nimport type { TaskCreateTrigger } from '../model/taskCreateTrigger';\nimport type { Trigger } from '../model/trigger';\n\nexport const apiClientVersion = '1.10.2';\n\nexport const REGIONS = ['eu', 'us'] as const;\nexport type Region = (typeof REGIONS)[number];\nexport type RegionOptions = { region: Region };\n\nfunction getDefaultHosts(region: Region): Host[] {\n  const url = 'data.{region}.algolia.com'.replace('{region}', region);\n\n  return [{ url, accept: 'readWrite', protocol: 'https' }];\n}\n\n/**\n * Guard: Return strongly typed specific OnDemandTrigger for a given Trigger.\n *\n * @summary Guard method that returns a strongly typed specific OnDemandTrigger for a given Trigger.\n * @param trigger - The given Task Trigger.\n */\nexport function isOnDemandTrigger(trigger: TaskCreateTrigger | Trigger): trigger is OnDemandTrigger {\n  return trigger.type === 'onDemand';\n}\n\n/**\n * Guard: Return strongly typed specific ScheduleTrigger for a given Trigger.\n *\n * @summary Guard method that returns a strongly typed specific ScheduleTrigger for a given Trigger.\n * @param trigger - The given Task Trigger.\n */\nexport function isScheduleTrigger(trigger: TaskCreateTrigger | Trigger): trigger is ScheduleTrigger {\n  return trigger.type === 'schedule';\n}\n\n/**\n * Guard: Return strongly typed specific SubscriptionTrigger for a given Trigger.\n *\n * @summary Guard method that returns a strongly typed specific SubscriptionTrigger for a given Trigger.\n * @param trigger - The given Task Trigger.\n */\nexport function isSubscriptionTrigger(trigger: TaskCreateTrigger | Trigger): trigger is SubscriptionTrigger {\n  return trigger.type === 'subscription';\n}\n\nexport function createIngestionClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  region: regionOption,\n  ...options\n}: CreateClientOptions & RegionOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(regionOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Ingestion',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * Creates a new authentication resource.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param authenticationCreate -\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createAuthentication(\n      authenticationCreate: AuthenticationCreate,\n      requestOptions?: RequestOptions,\n    ): Promise<AuthenticationCreateResponse> {\n      if (!authenticationCreate) {\n        throw new Error('Parameter `authenticationCreate` is required when calling `createAuthentication`.');\n      }\n\n      if (!authenticationCreate.type) {\n        throw new Error('Parameter `authenticationCreate.type` is required when calling `createAuthentication`.');\n      }\n      if (!authenticationCreate.name) {\n        throw new Error('Parameter `authenticationCreate.name` is required when calling `createAuthentication`.');\n      }\n      if (!authenticationCreate.input) {\n        throw new Error('Parameter `authenticationCreate.input` is required when calling `createAuthentication`.');\n      }\n\n      const requestPath = '/1/authentications';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: authenticationCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Creates a new destination.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param destinationCreate -\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createDestination(\n      destinationCreate: DestinationCreate,\n      requestOptions?: RequestOptions,\n    ): Promise<DestinationCreateResponse> {\n      if (!destinationCreate) {\n        throw new Error('Parameter `destinationCreate` is required when calling `createDestination`.');\n      }\n\n      if (!destinationCreate.type) {\n        throw new Error('Parameter `destinationCreate.type` is required when calling `createDestination`.');\n      }\n      if (!destinationCreate.name) {\n        throw new Error('Parameter `destinationCreate.name` is required when calling `createDestination`.');\n      }\n      if (!destinationCreate.input) {\n        throw new Error('Parameter `destinationCreate.input` is required when calling `createDestination`.');\n      }\n\n      const requestPath = '/1/destinations';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: destinationCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Creates a new source.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param sourceCreate -\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createSource(sourceCreate: SourceCreate, requestOptions?: RequestOptions): Promise<SourceCreateResponse> {\n      if (!sourceCreate) {\n        throw new Error('Parameter `sourceCreate` is required when calling `createSource`.');\n      }\n\n      if (!sourceCreate.type) {\n        throw new Error('Parameter `sourceCreate.type` is required when calling `createSource`.');\n      }\n      if (!sourceCreate.name) {\n        throw new Error('Parameter `sourceCreate.name` is required when calling `createSource`.');\n      }\n\n      const requestPath = '/1/sources';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: sourceCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Creates a new task.\n     * @param taskCreate - Request body for creating a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createTask(taskCreate: TaskCreate, requestOptions?: RequestOptions): Promise<TaskCreateResponse> {\n      if (!taskCreate) {\n        throw new Error('Parameter `taskCreate` is required when calling `createTask`.');\n      }\n\n      if (!taskCreate.sourceID) {\n        throw new Error('Parameter `taskCreate.sourceID` is required when calling `createTask`.');\n      }\n      if (!taskCreate.destinationID) {\n        throw new Error('Parameter `taskCreate.destinationID` is required when calling `createTask`.');\n      }\n      if (!taskCreate.action) {\n        throw new Error('Parameter `taskCreate.action` is required when calling `createTask`.');\n      }\n\n      const requestPath = '/2/tasks';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: taskCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Creates a new task using the v1 endpoint, please use `createTask` instead.\n     * @param taskCreate - Request body for creating a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createTaskV1(taskCreate: TaskCreateV1, requestOptions?: RequestOptions): Promise<TaskCreateResponse> {\n      if (!taskCreate) {\n        throw new Error('Parameter `taskCreate` is required when calling `createTaskV1`.');\n      }\n\n      if (!taskCreate.sourceID) {\n        throw new Error('Parameter `taskCreate.sourceID` is required when calling `createTaskV1`.');\n      }\n      if (!taskCreate.destinationID) {\n        throw new Error('Parameter `taskCreate.destinationID` is required when calling `createTaskV1`.');\n      }\n      if (!taskCreate.trigger) {\n        throw new Error('Parameter `taskCreate.trigger` is required when calling `createTaskV1`.');\n      }\n      if (!taskCreate.action) {\n        throw new Error('Parameter `taskCreate.action` is required when calling `createTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: taskCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Creates a new transformation.\n     * @param transformationCreate - Request body for creating a transformation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    createTransformation(\n      transformationCreate: TransformationCreate,\n      requestOptions?: RequestOptions,\n    ): Promise<TransformationCreateResponse> {\n      if (!transformationCreate) {\n        throw new Error('Parameter `transformationCreate` is required when calling `createTransformation`.');\n      }\n\n      if (!transformationCreate.code) {\n        throw new Error('Parameter `transformationCreate.code` is required when calling `createTransformation`.');\n      }\n      if (!transformationCreate.name) {\n        throw new Error('Parameter `transformationCreate.name` is required when calling `createTransformation`.');\n      }\n\n      const requestPath = '/1/transformations';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: transformationCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes an authentication resource. You can\\'t delete authentication resources that are used by a source or a destination.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param deleteAuthentication - The deleteAuthentication object.\n     * @param deleteAuthentication.authenticationID - Unique identifier of an authentication resource.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteAuthentication(\n      { authenticationID }: DeleteAuthenticationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeleteResponse> {\n      if (!authenticationID) {\n        throw new Error('Parameter `authenticationID` is required when calling `deleteAuthentication`.');\n      }\n\n      const requestPath = '/1/authentications/{authenticationID}'.replace(\n        '{authenticationID}',\n        encodeURIComponent(authenticationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a destination by its ID. You can\\'t delete destinations that are referenced in tasks.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param deleteDestination - The deleteDestination object.\n     * @param deleteDestination.destinationID - Unique identifier of a destination.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteDestination(\n      { destinationID }: DeleteDestinationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeleteResponse> {\n      if (!destinationID) {\n        throw new Error('Parameter `destinationID` is required when calling `deleteDestination`.');\n      }\n\n      const requestPath = '/1/destinations/{destinationID}'.replace(\n        '{destinationID}',\n        encodeURIComponent(destinationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a source by its ID. You can\\'t delete sources that are referenced in tasks.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param deleteSource - The deleteSource object.\n     * @param deleteSource.sourceID - Unique identifier of a source.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteSource({ sourceID }: DeleteSourceProps, requestOptions?: RequestOptions): Promise<DeleteResponse> {\n      if (!sourceID) {\n        throw new Error('Parameter `sourceID` is required when calling `deleteSource`.');\n      }\n\n      const requestPath = '/1/sources/{sourceID}'.replace('{sourceID}', encodeURIComponent(sourceID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a task by its ID.\n     * @param deleteTask - The deleteTask object.\n     * @param deleteTask.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteTask({ taskID }: DeleteTaskProps, requestOptions?: RequestOptions): Promise<DeleteResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `deleteTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a task by its ID using the v1 endpoint, please use `deleteTask` instead.\n     * @param deleteTaskV1 - The deleteTaskV1 object.\n     * @param deleteTaskV1.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteTaskV1({ taskID }: DeleteTaskV1Props, requestOptions?: RequestOptions): Promise<DeleteResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `deleteTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a transformation by its ID.\n     * @param deleteTransformation - The deleteTransformation object.\n     * @param deleteTransformation.transformationID - Unique identifier of a transformation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteTransformation(\n      { transformationID }: DeleteTransformationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeleteResponse> {\n      if (!transformationID) {\n        throw new Error('Parameter `transformationID` is required when calling `deleteTransformation`.');\n      }\n\n      const requestPath = '/1/transformations/{transformationID}'.replace(\n        '{transformationID}',\n        encodeURIComponent(transformationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Disables a task.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param disableTask - The disableTask object.\n     * @param disableTask.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    disableTask({ taskID }: DisableTaskProps, requestOptions?: RequestOptions): Promise<TaskUpdateResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `disableTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}/disable'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Disables a task using the v1 endpoint, please use `disableTask` instead.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param disableTaskV1 - The disableTaskV1 object.\n     * @param disableTaskV1.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    disableTaskV1({ taskID }: DisableTaskV1Props, requestOptions?: RequestOptions): Promise<TaskUpdateResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `disableTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks/{taskID}/disable'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Enables a task.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param enableTask - The enableTask object.\n     * @param enableTask.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    enableTask({ taskID }: EnableTaskProps, requestOptions?: RequestOptions): Promise<TaskUpdateResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `enableTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}/enable'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Enables a task using the v1 endpoint, please use `enableTask` instead.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param enableTaskV1 - The enableTaskV1 object.\n     * @param enableTaskV1.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    enableTaskV1({ taskID }: EnableTaskV1Props, requestOptions?: RequestOptions): Promise<TaskUpdateResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `enableTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks/{taskID}/enable'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves an authentication resource by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getAuthentication - The getAuthentication object.\n     * @param getAuthentication.authenticationID - Unique identifier of an authentication resource.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getAuthentication(\n      { authenticationID }: GetAuthenticationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Authentication> {\n      if (!authenticationID) {\n        throw new Error('Parameter `authenticationID` is required when calling `getAuthentication`.');\n      }\n\n      const requestPath = '/1/authentications/{authenticationID}'.replace(\n        '{authenticationID}',\n        encodeURIComponent(authenticationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a destination by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getDestination - The getDestination object.\n     * @param getDestination.destinationID - Unique identifier of a destination.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getDestination({ destinationID }: GetDestinationProps, requestOptions?: RequestOptions): Promise<Destination> {\n      if (!destinationID) {\n        throw new Error('Parameter `destinationID` is required when calling `getDestination`.');\n      }\n\n      const requestPath = '/1/destinations/{destinationID}'.replace(\n        '{destinationID}',\n        encodeURIComponent(destinationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a single task run event by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getEvent - The getEvent object.\n     * @param getEvent.runID - Unique identifier of a task run.\n     * @param getEvent.eventID - Unique identifier of an event.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getEvent({ runID, eventID }: GetEventProps, requestOptions?: RequestOptions): Promise<Event> {\n      if (!runID) {\n        throw new Error('Parameter `runID` is required when calling `getEvent`.');\n      }\n\n      if (!eventID) {\n        throw new Error('Parameter `eventID` is required when calling `getEvent`.');\n      }\n\n      const requestPath = '/1/runs/{runID}/events/{eventID}'\n        .replace('{runID}', encodeURIComponent(runID))\n        .replace('{eventID}', encodeURIComponent(eventID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieve a single task run by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getRun - The getRun object.\n     * @param getRun.runID - Unique identifier of a task run.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRun({ runID }: GetRunProps, requestOptions?: RequestOptions): Promise<Run> {\n      if (!runID) {\n        throw new Error('Parameter `runID` is required when calling `getRun`.');\n      }\n\n      const requestPath = '/1/runs/{runID}'.replace('{runID}', encodeURIComponent(runID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieve a source by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getSource - The getSource object.\n     * @param getSource.sourceID - Unique identifier of a source.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getSource({ sourceID }: GetSourceProps, requestOptions?: RequestOptions): Promise<Source> {\n      if (!sourceID) {\n        throw new Error('Parameter `sourceID` is required when calling `getSource`.');\n      }\n\n      const requestPath = '/1/sources/{sourceID}'.replace('{sourceID}', encodeURIComponent(sourceID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a task by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getTask - The getTask object.\n     * @param getTask.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTask({ taskID }: GetTaskProps, requestOptions?: RequestOptions): Promise<Task> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `getTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a task by its ID using the v1 endpoint, please use `getTask` instead.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getTaskV1 - The getTaskV1 object.\n     * @param getTaskV1.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTaskV1({ taskID }: GetTaskV1Props, requestOptions?: RequestOptions): Promise<TaskV1> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `getTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a transformation by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param getTransformation - The getTransformation object.\n     * @param getTransformation.transformationID - Unique identifier of a transformation.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getTransformation(\n      { transformationID }: GetTransformationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Transformation> {\n      if (!transformationID) {\n        throw new Error('Parameter `transformationID` is required when calling `getTransformation`.');\n      }\n\n      const requestPath = '/1/transformations/{transformationID}'.replace(\n        '{transformationID}',\n        encodeURIComponent(transformationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of all authentication resources.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listAuthentications - The listAuthentications object.\n     * @param listAuthentications.itemsPerPage - Number of items per page.\n     * @param listAuthentications.page - Page number of the paginated API response.\n     * @param listAuthentications.type - Type of authentication resource to retrieve.\n     * @param listAuthentications.platform - Ecommerce platform for which to retrieve authentications.\n     * @param listAuthentications.sort - Property by which to sort the list of authentications.\n     * @param listAuthentications.order - Sort order of the response, ascending or descending.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listAuthentications(\n      { itemsPerPage, page, type, platform, sort, order }: ListAuthenticationsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListAuthenticationsResponse> {\n      const requestPath = '/1/authentications';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (type !== undefined) {\n        queryParameters['type'] = type.toString();\n      }\n\n      if (platform !== undefined) {\n        queryParameters['platform'] = platform.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of destinations.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listDestinations - The listDestinations object.\n     * @param listDestinations.itemsPerPage - Number of items per page.\n     * @param listDestinations.page - Page number of the paginated API response.\n     * @param listDestinations.type - Destination type.\n     * @param listDestinations.authenticationID - Authentication ID used by destinations.\n     * @param listDestinations.transformationID - Get the list of destinations used by a transformation.\n     * @param listDestinations.sort - Property by which to sort the destinations.\n     * @param listDestinations.order - Sort order of the response, ascending or descending.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listDestinations(\n      { itemsPerPage, page, type, authenticationID, transformationID, sort, order }: ListDestinationsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListDestinationsResponse> {\n      const requestPath = '/1/destinations';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (type !== undefined) {\n        queryParameters['type'] = type.toString();\n      }\n\n      if (authenticationID !== undefined) {\n        queryParameters['authenticationID'] = authenticationID.toString();\n      }\n\n      if (transformationID !== undefined) {\n        queryParameters['transformationID'] = transformationID.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of events for a task run, identified by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listEvents - The listEvents object.\n     * @param listEvents.runID - Unique identifier of a task run.\n     * @param listEvents.itemsPerPage - Number of items per page.\n     * @param listEvents.page - Page number of the paginated API response.\n     * @param listEvents.status - Event status for filtering the list of task runs.\n     * @param listEvents.type - Event type for filtering the list of task runs.\n     * @param listEvents.sort - Property by which to sort the list of task run events.\n     * @param listEvents.order - Sort order of the response, ascending or descending.\n     * @param listEvents.startDate - Date and time in RFC 3339 format for the earliest events to retrieve. By default, the current time minus three hours is used.\n     * @param listEvents.endDate - Date and time in RFC 3339 format for the latest events to retrieve. By default, the current time is used.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listEvents(\n      { runID, itemsPerPage, page, status, type, sort, order, startDate, endDate }: ListEventsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<ListEventsResponse> {\n      if (!runID) {\n        throw new Error('Parameter `runID` is required when calling `listEvents`.');\n      }\n\n      const requestPath = '/1/runs/{runID}/events'.replace('{runID}', encodeURIComponent(runID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (status !== undefined) {\n        queryParameters['status'] = status.toString();\n      }\n\n      if (type !== undefined) {\n        queryParameters['type'] = type.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieve a list of task runs.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listRuns - The listRuns object.\n     * @param listRuns.itemsPerPage - Number of items per page.\n     * @param listRuns.page - Page number of the paginated API response.\n     * @param listRuns.status - Run status for filtering the list of task runs.\n     * @param listRuns.type - Run type for filtering the list of task runs.\n     * @param listRuns.taskID - Task ID for filtering the list of task runs.\n     * @param listRuns.sort - Property by which to sort the list of task runs.\n     * @param listRuns.order - Sort order of the response, ascending or descending.\n     * @param listRuns.startDate - Date in RFC 3339 format for the earliest run to retrieve. By default, the current day minus seven days is used.\n     * @param listRuns.endDate - Date in RFC 3339 format for the latest run to retrieve. By default, the current day is used.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listRuns(\n      { itemsPerPage, page, status, type, taskID, sort, order, startDate, endDate }: ListRunsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<RunListResponse> {\n      const requestPath = '/1/runs';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (status !== undefined) {\n        queryParameters['status'] = status.toString();\n      }\n\n      if (type !== undefined) {\n        queryParameters['type'] = type.toString();\n      }\n\n      if (taskID !== undefined) {\n        queryParameters['taskID'] = taskID.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      if (startDate !== undefined) {\n        queryParameters['startDate'] = startDate.toString();\n      }\n\n      if (endDate !== undefined) {\n        queryParameters['endDate'] = endDate.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of sources.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listSources - The listSources object.\n     * @param listSources.itemsPerPage - Number of items per page.\n     * @param listSources.page - Page number of the paginated API response.\n     * @param listSources.type - Source type. Some sources require authentication.\n     * @param listSources.authenticationID - Authentication IDs of the sources to retrieve. \\'none\\' returns sources that doesn\\'t have an authentication.\n     * @param listSources.sort - Property by which to sort the list of sources.\n     * @param listSources.order - Sort order of the response, ascending or descending.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listSources(\n      { itemsPerPage, page, type, authenticationID, sort, order }: ListSourcesProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListSourcesResponse> {\n      const requestPath = '/1/sources';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (type !== undefined) {\n        queryParameters['type'] = type.toString();\n      }\n\n      if (authenticationID !== undefined) {\n        queryParameters['authenticationID'] = authenticationID.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of tasks.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listTasks - The listTasks object.\n     * @param listTasks.itemsPerPage - Number of items per page.\n     * @param listTasks.page - Page number of the paginated API response.\n     * @param listTasks.action - Actions for filtering the list of tasks.\n     * @param listTasks.enabled - Whether to filter the list of tasks by the `enabled` status.\n     * @param listTasks.sourceID - Source IDs for filtering the list of tasks.\n     * @param listTasks.destinationID - Destination IDs for filtering the list of tasks.\n     * @param listTasks.triggerType - Type of task trigger for filtering the list of tasks.\n     * @param listTasks.sort - Property by which to sort the list of tasks.\n     * @param listTasks.order - Sort order of the response, ascending or descending.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listTasks(\n      { itemsPerPage, page, action, enabled, sourceID, destinationID, triggerType, sort, order }: ListTasksProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListTasksResponse> {\n      const requestPath = '/2/tasks';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (action !== undefined) {\n        queryParameters['action'] = action.toString();\n      }\n\n      if (enabled !== undefined) {\n        queryParameters['enabled'] = enabled.toString();\n      }\n\n      if (sourceID !== undefined) {\n        queryParameters['sourceID'] = sourceID.toString();\n      }\n\n      if (destinationID !== undefined) {\n        queryParameters['destinationID'] = destinationID.toString();\n      }\n\n      if (triggerType !== undefined) {\n        queryParameters['triggerType'] = triggerType.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of tasks using the v1 endpoint, please use `getTasks` instead.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listTasksV1 - The listTasksV1 object.\n     * @param listTasksV1.itemsPerPage - Number of items per page.\n     * @param listTasksV1.page - Page number of the paginated API response.\n     * @param listTasksV1.action - Actions for filtering the list of tasks.\n     * @param listTasksV1.enabled - Whether to filter the list of tasks by the `enabled` status.\n     * @param listTasksV1.sourceID - Source IDs for filtering the list of tasks.\n     * @param listTasksV1.destinationID - Destination IDs for filtering the list of tasks.\n     * @param listTasksV1.triggerType - Type of task trigger for filtering the list of tasks.\n     * @param listTasksV1.sort - Property by which to sort the list of tasks.\n     * @param listTasksV1.order - Sort order of the response, ascending or descending.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listTasksV1(\n      { itemsPerPage, page, action, enabled, sourceID, destinationID, triggerType, sort, order }: ListTasksV1Props = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListTasksResponseV1> {\n      const requestPath = '/1/tasks';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (action !== undefined) {\n        queryParameters['action'] = action.toString();\n      }\n\n      if (enabled !== undefined) {\n        queryParameters['enabled'] = enabled.toString();\n      }\n\n      if (sourceID !== undefined) {\n        queryParameters['sourceID'] = sourceID.toString();\n      }\n\n      if (destinationID !== undefined) {\n        queryParameters['destinationID'] = destinationID.toString();\n      }\n\n      if (triggerType !== undefined) {\n        queryParameters['triggerType'] = triggerType.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a list of transformations.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param listTransformations - The listTransformations object.\n     * @param listTransformations.itemsPerPage - Number of items per page.\n     * @param listTransformations.page - Page number of the paginated API response.\n     * @param listTransformations.sort - Property by which to sort the list of transformations.\n     * @param listTransformations.order - Sort order of the response, ascending or descending.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    listTransformations(\n      { itemsPerPage, page, sort, order }: ListTransformationsProps = {},\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<ListTransformationsResponse> {\n      const requestPath = '/1/transformations';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      if (itemsPerPage !== undefined) {\n        queryParameters['itemsPerPage'] = itemsPerPage.toString();\n      }\n\n      if (page !== undefined) {\n        queryParameters['page'] = page.toString();\n      }\n\n      if (sort !== undefined) {\n        queryParameters['sort'] = sort.toString();\n      }\n\n      if (order !== undefined) {\n        queryParameters['order'] = order.toString();\n      }\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Push a `batch` request payload through the Pipeline. You can check the status of task pushes with the observability endpoints.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param pushTask - The pushTask object.\n     * @param pushTask.taskID - Unique identifier of a task.\n     * @param pushTask.pushTaskPayload - Request body of a Search API `batch` request that will be pushed in the Connectors pipeline.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    pushTask({ taskID, pushTaskPayload }: PushTaskProps, requestOptions?: RequestOptions): Promise<RunResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `pushTask`.');\n      }\n\n      if (!pushTaskPayload) {\n        throw new Error('Parameter `pushTaskPayload` is required when calling `pushTask`.');\n      }\n\n      if (!pushTaskPayload.action) {\n        throw new Error('Parameter `pushTaskPayload.action` is required when calling `pushTask`.');\n      }\n      if (!pushTaskPayload.records) {\n        throw new Error('Parameter `pushTaskPayload.records` is required when calling `pushTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}/push'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: pushTaskPayload,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Runs all tasks linked to a source, only available for Shopify sources. It will create 1 run per task.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param runSource - The runSource object.\n     * @param runSource.sourceID - Unique identifier of a source.\n     * @param runSource.runSourcePayload -\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    runSource(\n      { sourceID, runSourcePayload }: RunSourceProps,\n      requestOptions?: RequestOptions,\n    ): Promise<RunSourceResponse> {\n      if (!sourceID) {\n        throw new Error('Parameter `sourceID` is required when calling `runSource`.');\n      }\n\n      const requestPath = '/1/sources/{sourceID}/run'.replace('{sourceID}', encodeURIComponent(sourceID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: runSourcePayload ? runSourcePayload : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Runs a task. You can check the status of task runs with the observability endpoints.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param runTask - The runTask object.\n     * @param runTask.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    runTask({ taskID }: RunTaskProps, requestOptions?: RequestOptions): Promise<RunResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `runTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}/run'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Runs a task using the v1 endpoint, please use `runTask` instead. You can check the status of task runs with the observability endpoints.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param runTaskV1 - The runTaskV1 object.\n     * @param runTaskV1.taskID - Unique identifier of a task.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    runTaskV1({ taskID }: RunTaskV1Props, requestOptions?: RequestOptions): Promise<RunResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `runTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks/{taskID}/run'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for authentication resources.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param authenticationSearch - The authenticationSearch object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchAuthentications(\n      authenticationSearch: AuthenticationSearch,\n      requestOptions?: RequestOptions,\n    ): Promise<Array<Authentication>> {\n      if (!authenticationSearch) {\n        throw new Error('Parameter `authenticationSearch` is required when calling `searchAuthentications`.');\n      }\n\n      if (!authenticationSearch.authenticationIDs) {\n        throw new Error(\n          'Parameter `authenticationSearch.authenticationIDs` is required when calling `searchAuthentications`.',\n        );\n      }\n\n      const requestPath = '/1/authentications/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: authenticationSearch,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for destinations.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param destinationSearch - The destinationSearch object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchDestinations(\n      destinationSearch: DestinationSearch,\n      requestOptions?: RequestOptions,\n    ): Promise<Array<Destination>> {\n      if (!destinationSearch) {\n        throw new Error('Parameter `destinationSearch` is required when calling `searchDestinations`.');\n      }\n\n      if (!destinationSearch.destinationIDs) {\n        throw new Error('Parameter `destinationSearch.destinationIDs` is required when calling `searchDestinations`.');\n      }\n\n      const requestPath = '/1/destinations/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: destinationSearch,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for sources.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param sourceSearch - The sourceSearch object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchSources(sourceSearch: SourceSearch, requestOptions?: RequestOptions): Promise<Array<Source>> {\n      if (!sourceSearch) {\n        throw new Error('Parameter `sourceSearch` is required when calling `searchSources`.');\n      }\n\n      if (!sourceSearch.sourceIDs) {\n        throw new Error('Parameter `sourceSearch.sourceIDs` is required when calling `searchSources`.');\n      }\n\n      const requestPath = '/1/sources/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: sourceSearch,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for tasks.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param taskSearch - The taskSearch object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchTasks(taskSearch: TaskSearch, requestOptions?: RequestOptions): Promise<Array<Task>> {\n      if (!taskSearch) {\n        throw new Error('Parameter `taskSearch` is required when calling `searchTasks`.');\n      }\n\n      if (!taskSearch.taskIDs) {\n        throw new Error('Parameter `taskSearch.taskIDs` is required when calling `searchTasks`.');\n      }\n\n      const requestPath = '/2/tasks/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: taskSearch,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for tasks using the v1 endpoint, please use `searchTasks` instead.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param taskSearch - The taskSearch object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchTasksV1(taskSearch: TaskSearch, requestOptions?: RequestOptions): Promise<Array<TaskV1>> {\n      if (!taskSearch) {\n        throw new Error('Parameter `taskSearch` is required when calling `searchTasksV1`.');\n      }\n\n      if (!taskSearch.taskIDs) {\n        throw new Error('Parameter `taskSearch.taskIDs` is required when calling `searchTasksV1`.');\n      }\n\n      const requestPath = '/1/tasks/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: taskSearch,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for transformations.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param transformationSearch - The transformationSearch object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchTransformations(\n      transformationSearch: TransformationSearch,\n      requestOptions?: RequestOptions,\n    ): Promise<Array<Transformation>> {\n      if (!transformationSearch) {\n        throw new Error('Parameter `transformationSearch` is required when calling `searchTransformations`.');\n      }\n\n      if (!transformationSearch.transformationIDs) {\n        throw new Error(\n          'Parameter `transformationSearch.transformationIDs` is required when calling `searchTransformations`.',\n        );\n      }\n\n      const requestPath = '/1/transformations/search';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: transformationSearch,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Triggers a stream-listing request for a source. Triggering stream-listing requests only works with sources with `type: docker` and `imageType: singer`.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param triggerDockerSourceDiscover - The triggerDockerSourceDiscover object.\n     * @param triggerDockerSourceDiscover.sourceID - Unique identifier of a source.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    triggerDockerSourceDiscover(\n      { sourceID }: TriggerDockerSourceDiscoverProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SourceWatchResponse> {\n      if (!sourceID) {\n        throw new Error('Parameter `sourceID` is required when calling `triggerDockerSourceDiscover`.');\n      }\n\n      const requestPath = '/1/sources/{sourceID}/discover'.replace('{sourceID}', encodeURIComponent(sourceID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Try a transformation before creating it.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param transformationTry - The transformationTry object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    tryTransformation(\n      transformationTry: TransformationTry,\n      requestOptions?: RequestOptions,\n    ): Promise<TransformationTryResponse> {\n      if (!transformationTry) {\n        throw new Error('Parameter `transformationTry` is required when calling `tryTransformation`.');\n      }\n\n      if (!transformationTry.code) {\n        throw new Error('Parameter `transformationTry.code` is required when calling `tryTransformation`.');\n      }\n      if (!transformationTry.sampleRecord) {\n        throw new Error('Parameter `transformationTry.sampleRecord` is required when calling `tryTransformation`.');\n      }\n\n      const requestPath = '/1/transformations/try';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: transformationTry,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Try a transformation before updating it.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param tryTransformationBeforeUpdate - The tryTransformationBeforeUpdate object.\n     * @param tryTransformationBeforeUpdate.transformationID - Unique identifier of a transformation.\n     * @param tryTransformationBeforeUpdate.transformationTry - The transformationTry object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    tryTransformationBeforeUpdate(\n      { transformationID, transformationTry }: TryTransformationBeforeUpdateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<TransformationTryResponse> {\n      if (!transformationID) {\n        throw new Error('Parameter `transformationID` is required when calling `tryTransformationBeforeUpdate`.');\n      }\n\n      if (!transformationTry) {\n        throw new Error('Parameter `transformationTry` is required when calling `tryTransformationBeforeUpdate`.');\n      }\n\n      if (!transformationTry.code) {\n        throw new Error('Parameter `transformationTry.code` is required when calling `tryTransformationBeforeUpdate`.');\n      }\n      if (!transformationTry.sampleRecord) {\n        throw new Error(\n          'Parameter `transformationTry.sampleRecord` is required when calling `tryTransformationBeforeUpdate`.',\n        );\n      }\n\n      const requestPath = '/1/transformations/{transformationID}/try'.replace(\n        '{transformationID}',\n        encodeURIComponent(transformationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: transformationTry,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates an authentication resource.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param updateAuthentication - The updateAuthentication object.\n     * @param updateAuthentication.authenticationID - Unique identifier of an authentication resource.\n     * @param updateAuthentication.authenticationUpdate - The authenticationUpdate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateAuthentication(\n      { authenticationID, authenticationUpdate }: UpdateAuthenticationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<AuthenticationUpdateResponse> {\n      if (!authenticationID) {\n        throw new Error('Parameter `authenticationID` is required when calling `updateAuthentication`.');\n      }\n\n      if (!authenticationUpdate) {\n        throw new Error('Parameter `authenticationUpdate` is required when calling `updateAuthentication`.');\n      }\n\n      const requestPath = '/1/authentications/{authenticationID}'.replace(\n        '{authenticationID}',\n        encodeURIComponent(authenticationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PATCH',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: authenticationUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates the destination by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param updateDestination - The updateDestination object.\n     * @param updateDestination.destinationID - Unique identifier of a destination.\n     * @param updateDestination.destinationUpdate - The destinationUpdate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateDestination(\n      { destinationID, destinationUpdate }: UpdateDestinationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DestinationUpdateResponse> {\n      if (!destinationID) {\n        throw new Error('Parameter `destinationID` is required when calling `updateDestination`.');\n      }\n\n      if (!destinationUpdate) {\n        throw new Error('Parameter `destinationUpdate` is required when calling `updateDestination`.');\n      }\n\n      const requestPath = '/1/destinations/{destinationID}'.replace(\n        '{destinationID}',\n        encodeURIComponent(destinationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PATCH',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: destinationUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates a source by its ID.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param updateSource - The updateSource object.\n     * @param updateSource.sourceID - Unique identifier of a source.\n     * @param updateSource.sourceUpdate - The sourceUpdate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateSource(\n      { sourceID, sourceUpdate }: UpdateSourceProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SourceUpdateResponse> {\n      if (!sourceID) {\n        throw new Error('Parameter `sourceID` is required when calling `updateSource`.');\n      }\n\n      if (!sourceUpdate) {\n        throw new Error('Parameter `sourceUpdate` is required when calling `updateSource`.');\n      }\n\n      const requestPath = '/1/sources/{sourceID}'.replace('{sourceID}', encodeURIComponent(sourceID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PATCH',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: sourceUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates a task by its ID.\n     * @param updateTask - The updateTask object.\n     * @param updateTask.taskID - Unique identifier of a task.\n     * @param updateTask.taskUpdate - The taskUpdate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateTask({ taskID, taskUpdate }: UpdateTaskProps, requestOptions?: RequestOptions): Promise<TaskUpdateResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `updateTask`.');\n      }\n\n      if (!taskUpdate) {\n        throw new Error('Parameter `taskUpdate` is required when calling `updateTask`.');\n      }\n\n      const requestPath = '/2/tasks/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PATCH',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: taskUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates a task by its ID using the v1 endpoint, please use `updateTask` instead.\n     * @param updateTaskV1 - The updateTaskV1 object.\n     * @param updateTaskV1.taskID - Unique identifier of a task.\n     * @param updateTaskV1.taskUpdate - The taskUpdate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateTaskV1(\n      { taskID, taskUpdate }: UpdateTaskV1Props,\n      requestOptions?: RequestOptions,\n    ): Promise<TaskUpdateResponse> {\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `updateTaskV1`.');\n      }\n\n      if (!taskUpdate) {\n        throw new Error('Parameter `taskUpdate` is required when calling `updateTaskV1`.');\n      }\n\n      const requestPath = '/1/tasks/{taskID}'.replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PATCH',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: taskUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Updates a transformation by its ID.\n     * @param updateTransformation - The updateTransformation object.\n     * @param updateTransformation.transformationID - Unique identifier of a transformation.\n     * @param updateTransformation.transformationCreate - The transformationCreate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    updateTransformation(\n      { transformationID, transformationCreate }: UpdateTransformationProps,\n      requestOptions?: RequestOptions,\n    ): Promise<TransformationUpdateResponse> {\n      if (!transformationID) {\n        throw new Error('Parameter `transformationID` is required when calling `updateTransformation`.');\n      }\n\n      if (!transformationCreate) {\n        throw new Error('Parameter `transformationCreate` is required when calling `updateTransformation`.');\n      }\n\n      if (!transformationCreate.code) {\n        throw new Error('Parameter `transformationCreate.code` is required when calling `updateTransformation`.');\n      }\n      if (!transformationCreate.name) {\n        throw new Error('Parameter `transformationCreate.name` is required when calling `updateTransformation`.');\n      }\n\n      const requestPath = '/1/transformations/{transformationID}'.replace(\n        '{transformationID}',\n        encodeURIComponent(transformationID),\n      );\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: transformationCreate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Validates a source payload to ensure it can be created and that the data source can be reached by Algolia.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param sourceCreate -\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    validateSource(\n      sourceCreate: SourceCreate,\n      requestOptions: RequestOptions | undefined = undefined,\n    ): Promise<SourceWatchResponse> {\n      const requestPath = '/1/sources/validate';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: sourceCreate ? sourceCreate : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Validates an update of a source payload to ensure it can be created and that the data source can be reached by Algolia.\n     *\n     * Required API Key ACLs:\n     *  - addObject\n     *  - deleteIndex\n     *  - editSettings\n     * @param validateSourceBeforeUpdate - The validateSourceBeforeUpdate object.\n     * @param validateSourceBeforeUpdate.sourceID - Unique identifier of a source.\n     * @param validateSourceBeforeUpdate.sourceUpdate - The sourceUpdate object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    validateSourceBeforeUpdate(\n      { sourceID, sourceUpdate }: ValidateSourceBeforeUpdateProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SourceWatchResponse> {\n      if (!sourceID) {\n        throw new Error('Parameter `sourceID` is required when calling `validateSourceBeforeUpdate`.');\n      }\n\n      if (!sourceUpdate) {\n        throw new Error('Parameter `sourceUpdate` is required when calling `validateSourceBeforeUpdate`.');\n      }\n\n      const requestPath = '/1/sources/{sourceID}/validate'.replace('{sourceID}', encodeURIComponent(sourceID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: sourceUpdate,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8611, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8617, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/monitoring/builds/node.ts","turbopack://[project]/node_modules/@algolia/monitoring/src/monitoringClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type MonitoringClient = ReturnType<typeof createMonitoringClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createMonitoringClient } from '../src/monitoringClient';\n\nexport { apiClientVersion } from '../src/monitoringClient';\n\nexport * from '../model';\n\nexport function monitoringClient(appId: string, apiKey: string, options?: ClientOptions): MonitoringClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  return {\n    ...createMonitoringClient({\n      appId,\n      apiKey,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';\n\nimport type { IncidentsResponse } from '../model/incidentsResponse';\nimport type { IndexingTimeResponse } from '../model/indexingTimeResponse';\nimport type { InfrastructureResponse } from '../model/infrastructureResponse';\nimport type { InventoryResponse } from '../model/inventoryResponse';\nimport type { LatencyResponse } from '../model/latencyResponse';\n\nimport type { StatusResponse } from '../model/statusResponse';\n\nimport type {\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  GetClusterIncidentsProps,\n  GetClusterStatusProps,\n  GetIndexingTimeProps,\n  GetLatencyProps,\n  GetMetricsProps,\n  GetReachabilityProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '1.10.2';\n\nfunction getDefaultHosts(): Host[] {\n  return [{ url: 'status.algolia.com', accept: 'readWrite', protocol: 'https' }];\n}\n\nexport function createMonitoringClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  ...options\n}: CreateClientOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Monitoring',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves known incidents for the selected clusters.\n     * @param getClusterIncidents - The getClusterIncidents object.\n     * @param getClusterIncidents.clusters - Subset of clusters, separated by commas.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getClusterIncidents(\n      { clusters }: GetClusterIncidentsProps,\n      requestOptions?: RequestOptions,\n    ): Promise<IncidentsResponse> {\n      if (!clusters) {\n        throw new Error('Parameter `clusters` is required when calling `getClusterIncidents`.');\n      }\n\n      const requestPath = '/1/incidents/{clusters}'.replace('{clusters}', encodeURIComponent(clusters));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the status of selected clusters.\n     * @param getClusterStatus - The getClusterStatus object.\n     * @param getClusterStatus.clusters - Subset of clusters, separated by commas.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getClusterStatus({ clusters }: GetClusterStatusProps, requestOptions?: RequestOptions): Promise<StatusResponse> {\n      if (!clusters) {\n        throw new Error('Parameter `clusters` is required when calling `getClusterStatus`.');\n      }\n\n      const requestPath = '/1/status/{clusters}'.replace('{clusters}', encodeURIComponent(clusters));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves known incidents for all clusters.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getIncidents(requestOptions?: RequestOptions): Promise<IncidentsResponse> {\n      const requestPath = '/1/incidents';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves average times for indexing operations for selected clusters.\n     * @param getIndexingTime - The getIndexingTime object.\n     * @param getIndexingTime.clusters - Subset of clusters, separated by commas.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getIndexingTime(\n      { clusters }: GetIndexingTimeProps,\n      requestOptions?: RequestOptions,\n    ): Promise<IndexingTimeResponse> {\n      if (!clusters) {\n        throw new Error('Parameter `clusters` is required when calling `getIndexingTime`.');\n      }\n\n      const requestPath = '/1/indexing/{clusters}'.replace('{clusters}', encodeURIComponent(clusters));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the average latency for search requests for selected clusters.\n     * @param getLatency - The getLatency object.\n     * @param getLatency.clusters - Subset of clusters, separated by commas.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getLatency({ clusters }: GetLatencyProps, requestOptions?: RequestOptions): Promise<LatencyResponse> {\n      if (!clusters) {\n        throw new Error('Parameter `clusters` is required when calling `getLatency`.');\n      }\n\n      const requestPath = '/1/latency/{clusters}'.replace('{clusters}', encodeURIComponent(clusters));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves metrics related to your Algolia infrastructure, aggregated over a selected time window.  Access to this API is available as part of the [Premium or Elevate plans](https://www.algolia.com/pricing). You must authenticate requests with the `x-algolia-application-id` and `x-algolia-api-key` headers (using the Monitoring API key).\n     * @param getMetrics - The getMetrics object.\n     * @param getMetrics.metric - Metric to report.  For more information about the individual metrics, see the description of the API response. To include all metrics, use `*`.\n     * @param getMetrics.period - Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getMetrics({ metric, period }: GetMetricsProps, requestOptions?: RequestOptions): Promise<InfrastructureResponse> {\n      if (!metric) {\n        throw new Error('Parameter `metric` is required when calling `getMetrics`.');\n      }\n\n      if (!period) {\n        throw new Error('Parameter `period` is required when calling `getMetrics`.');\n      }\n\n      const requestPath = '/1/infrastructure/{metric}/period/{period}'\n        .replace('{metric}', encodeURIComponent(metric))\n        .replace('{period}', encodeURIComponent(period));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Test whether clusters are reachable or not.\n     * @param getReachability - The getReachability object.\n     * @param getReachability.clusters - Subset of clusters, separated by commas.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getReachability(\n      { clusters }: GetReachabilityProps,\n      requestOptions?: RequestOptions,\n    ): Promise<{ [key: string]: { [key: string]: boolean } }> {\n      if (!clusters) {\n        throw new Error('Parameter `clusters` is required when calling `getReachability`.');\n      }\n\n      const requestPath = '/1/reachability/{clusters}/probes'.replace('{clusters}', encodeURIComponent(clusters));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the servers that belong to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application\\'s cluster.  - Without authentication, the response lists the servers for all Algolia clusters.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getServers(requestOptions?: RequestOptions): Promise<InventoryResponse> {\n      const requestPath = '/1/inventory/servers';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves the status of all Algolia clusters and instances.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getStatus(requestOptions?: RequestOptions): Promise<StatusResponse> {\n      const requestPath = '/1/status';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8991, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8997, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/@algolia/recommend/builds/node.ts","turbopack://[project]/node_modules/@algolia/recommend/src/recommendClient.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nexport type RecommendClient = ReturnType<typeof createRecommendClient>;\n\nimport { createHttpRequester } from '@algolia/requester-node-http';\n\nimport {\n  createMemoryCache,\n  createNullCache,\n  createNullLogger,\n  DEFAULT_CONNECT_TIMEOUT_NODE,\n  DEFAULT_READ_TIMEOUT_NODE,\n  DEFAULT_WRITE_TIMEOUT_NODE,\n} from '@algolia/client-common';\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport { createRecommendClient } from '../src/recommendClient';\n\nexport { apiClientVersion } from '../src/recommendClient';\n\nexport * from '../model';\n\nexport function recommendClient(appId: string, apiKey: string, options?: ClientOptions): RecommendClient {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  return {\n    ...createRecommendClient({\n      appId,\n      apiKey,\n      timeouts: {\n        connect: DEFAULT_CONNECT_TIMEOUT_NODE,\n        read: DEFAULT_READ_TIMEOUT_NODE,\n        write: DEFAULT_WRITE_TIMEOUT_NODE,\n      },\n      logger: createNullLogger(),\n      requester: createHttpRequester(),\n      algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],\n      responsesCache: createNullCache(),\n      requestsCache: createNullCache(),\n      hostsCache: createMemoryCache(),\n      ...options,\n    }),\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type {\n  CreateClientOptions,\n  Headers,\n  Host,\n  QueryParameters,\n  Request,\n  RequestOptions,\n} from '@algolia/client-common';\nimport { createAuth, createTransporter, getAlgoliaAgent, shuffle } from '@algolia/client-common';\n\nimport type { DeletedAtResponse } from '../model/deletedAtResponse';\n\nimport type { GetRecommendTaskResponse } from '../model/getRecommendTaskResponse';\nimport type { GetRecommendationsParams } from '../model/getRecommendationsParams';\nimport type { GetRecommendationsResponse } from '../model/getRecommendationsResponse';\n\nimport type { RecommendRule } from '../model/recommendRule';\nimport type { RecommendUpdatedAtResponse } from '../model/recommendUpdatedAtResponse';\n\nimport type { SearchRecommendRulesResponse } from '../model/searchRecommendRulesResponse';\n\nimport type {\n  BatchRecommendRulesProps,\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteRecommendRuleProps,\n  GetRecommendRuleProps,\n  GetRecommendStatusProps,\n  LegacyGetRecommendationsParams,\n  SearchRecommendRulesProps,\n} from '../model/clientMethodProps';\n\nexport const apiClientVersion = '5.10.2';\n\nfunction getDefaultHosts(appId: string): Host[] {\n  return (\n    [\n      {\n        url: `${appId}-dsn.algolia.net`,\n        accept: 'read',\n        protocol: 'https',\n      },\n      {\n        url: `${appId}.algolia.net`,\n        accept: 'write',\n        protocol: 'https',\n      },\n    ] as Host[]\n  ).concat(\n    shuffle([\n      {\n        url: `${appId}-1.algolianet.com`,\n        accept: 'readWrite',\n        protocol: 'https',\n      },\n      {\n        url: `${appId}-2.algolianet.com`,\n        accept: 'readWrite',\n        protocol: 'https',\n      },\n      {\n        url: `${appId}-3.algolianet.com`,\n        accept: 'readWrite',\n        protocol: 'https',\n      },\n    ]),\n  );\n}\n\nexport function createRecommendClient({\n  appId: appIdOption,\n  apiKey: apiKeyOption,\n  authMode,\n  algoliaAgents,\n  ...options\n}: CreateClientOptions) {\n  const auth = createAuth(appIdOption, apiKeyOption, authMode);\n  const transporter = createTransporter({\n    hosts: getDefaultHosts(appIdOption),\n    ...options,\n    algoliaAgent: getAlgoliaAgent({\n      algoliaAgents,\n      client: 'Recommend',\n      version: apiClientVersion,\n    }),\n    baseHeaders: {\n      'content-type': 'text/plain',\n      ...auth.headers(),\n      ...options.baseHeaders,\n    },\n    baseQueryParameters: {\n      ...auth.queryParameters(),\n      ...options.baseQueryParameters,\n    },\n  });\n\n  return {\n    transporter,\n\n    /**\n     * The `appId` currently in use.\n     */\n    appId: appIdOption,\n\n    /**\n     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.\n     */\n    clearCache(): Promise<void> {\n      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);\n    },\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return transporter.algoliaAgent.value;\n    },\n\n    /**\n     * Adds a `segment` to the `x-algolia-agent` sent with every requests.\n     *\n     * @param segment - The algolia agent (user-agent) segment to add.\n     * @param version - The version of the agent.\n     */\n    addAlgoliaAgent(segment: string, version?: string): void {\n      transporter.algoliaAgent.add({ segment, version });\n    },\n\n    /**\n     * Helper method to switch the API key used to authenticate the requests.\n     *\n     * @param params - Method params.\n     * @param params.apiKey - The new API Key to use.\n     */\n    setClientApiKey({ apiKey }: { apiKey: string }): void {\n      if (!authMode || authMode === 'WithinHeaders') {\n        transporter.baseHeaders['x-algolia-api-key'] = apiKey;\n      } else {\n        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;\n      }\n    },\n\n    /**\n     * Create or update a batch of Recommend Rules  Each Recommend Rule is created or updated, depending on whether a Recommend Rule with the same `objectID` already exists. You may also specify `true` for `clearExistingRules`, in which case the batch will atomically replace all the existing Recommend Rules.  Recommend Rules are similar to Search Rules, except that the conditions and consequences apply to a [source item](/doc/guides/algolia-recommend/overview/#recommend-models) instead of a query. The main differences are the following: - Conditions `pattern` and `anchoring` are unavailable. - Condition `filters` triggers if the source item matches the specified filters. - Condition `filters` accepts numeric filters. - Consequence `params` only covers filtering parameters. - Consequence `automaticFacetFilters` doesn\\'t require a facet value placeholder (it tries to match the data source item\\'s attributes instead).\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param batchRecommendRules - The batchRecommendRules object.\n     * @param batchRecommendRules.indexName - Name of the index on which to perform the operation.\n     * @param batchRecommendRules.model - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n     * @param batchRecommendRules.recommendRule - The recommendRule object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    batchRecommendRules(\n      { indexName, model, recommendRule }: BatchRecommendRulesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<RecommendUpdatedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `batchRecommendRules`.');\n      }\n\n      if (!model) {\n        throw new Error('Parameter `model` is required when calling `batchRecommendRules`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{model}/recommend/rules/batch'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{model}', encodeURIComponent(model));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: recommendRule ? recommendRule : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customDelete - The customDelete object.\n     * @param customDelete.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customDelete.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customDelete(\n      { path, parameters }: CustomDeleteProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customDelete`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customGet - The customGet object.\n     * @param customGet.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customGet.parameters - Query parameters to apply to the current query.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customGet`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPost - The customPost object.\n     * @param customPost.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPost.parameters - Query parameters to apply to the current query.\n     * @param customPost.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPost(\n      { path, parameters, body }: CustomPostProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPost`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * This method allow you to send requests to the Algolia REST API.\n     * @param customPut - The customPut object.\n     * @param customPut.path - Path of the endpoint, anything after \\\"/1\\\" must be specified.\n     * @param customPut.parameters - Query parameters to apply to the current query.\n     * @param customPut.body - Parameters to send with the custom request.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    customPut(\n      { path, parameters, body }: CustomPutProps,\n      requestOptions?: RequestOptions,\n    ): Promise<Record<string, unknown>> {\n      if (!path) {\n        throw new Error('Parameter `path` is required when calling `customPut`.');\n      }\n\n      const requestPath = '/{path}'.replace('{path}', path);\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = parameters ? parameters : {};\n\n      const request: Request = {\n        method: 'PUT',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: body ? body : {},\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Deletes a Recommend rule from a recommendation scenario.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param deleteRecommendRule - The deleteRecommendRule object.\n     * @param deleteRecommendRule.indexName - Name of the index on which to perform the operation.\n     * @param deleteRecommendRule.model - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n     * @param deleteRecommendRule.objectID - Unique record identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    deleteRecommendRule(\n      { indexName, model, objectID }: DeleteRecommendRuleProps,\n      requestOptions?: RequestOptions,\n    ): Promise<DeletedAtResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `deleteRecommendRule`.');\n      }\n\n      if (!model) {\n        throw new Error('Parameter `model` is required when calling `deleteRecommendRule`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `deleteRecommendRule`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{model}/recommend/rules/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{model}', encodeURIComponent(model))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'DELETE',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves a Recommend rule that you previously created in the Algolia dashboard.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param getRecommendRule - The getRecommendRule object.\n     * @param getRecommendRule.indexName - Name of the index on which to perform the operation.\n     * @param getRecommendRule.model - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n     * @param getRecommendRule.objectID - Unique record identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRecommendRule(\n      { indexName, model, objectID }: GetRecommendRuleProps,\n      requestOptions?: RequestOptions,\n    ): Promise<RecommendRule> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getRecommendRule`.');\n      }\n\n      if (!model) {\n        throw new Error('Parameter `model` is required when calling `getRecommendRule`.');\n      }\n\n      if (!objectID) {\n        throw new Error('Parameter `objectID` is required when calling `getRecommendRule`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{model}/recommend/rules/{objectID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{model}', encodeURIComponent(model))\n        .replace('{objectID}', encodeURIComponent(objectID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Checks the status of a given task.  Deleting a Recommend rule is asynchronous. When you delete a rule, a task is created on a queue and completed depending on the load on the server. The API response includes a task ID that you can use to check the status.\n     *\n     * Required API Key ACLs:\n     *  - editSettings\n     * @param getRecommendStatus - The getRecommendStatus object.\n     * @param getRecommendStatus.indexName - Name of the index on which to perform the operation.\n     * @param getRecommendStatus.model - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n     * @param getRecommendStatus.taskID - Unique task identifier.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRecommendStatus(\n      { indexName, model, taskID }: GetRecommendStatusProps,\n      requestOptions?: RequestOptions,\n    ): Promise<GetRecommendTaskResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `getRecommendStatus`.');\n      }\n\n      if (!model) {\n        throw new Error('Parameter `model` is required when calling `getRecommendStatus`.');\n      }\n\n      if (!taskID) {\n        throw new Error('Parameter `taskID` is required when calling `getRecommendStatus`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{model}/task/{taskID}'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{model}', encodeURIComponent(model))\n        .replace('{taskID}', encodeURIComponent(taskID));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'GET',\n        path: requestPath,\n        queryParameters,\n        headers,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Retrieves recommendations from selected AI models.\n     *\n     * Required API Key ACLs:\n     *  - search\n     * @param getRecommendationsParams - The getRecommendationsParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    getRecommendations(\n      getRecommendationsParams: GetRecommendationsParams | LegacyGetRecommendationsParams,\n      requestOptions?: RequestOptions,\n    ): Promise<GetRecommendationsResponse> {\n      if (getRecommendationsParams && Array.isArray(getRecommendationsParams)) {\n        const newSignatureRequest: GetRecommendationsParams = {\n          requests: getRecommendationsParams,\n        };\n\n        getRecommendationsParams = newSignatureRequest;\n      }\n\n      if (!getRecommendationsParams) {\n        throw new Error('Parameter `getRecommendationsParams` is required when calling `getRecommendations`.');\n      }\n\n      if (!getRecommendationsParams.requests) {\n        throw new Error('Parameter `getRecommendationsParams.requests` is required when calling `getRecommendations`.');\n      }\n\n      const requestPath = '/1/indexes/*/recommendations';\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: getRecommendationsParams,\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n\n    /**\n     * Searches for Recommend rules.  Use an empty query to list all rules for this recommendation scenario.\n     *\n     * Required API Key ACLs:\n     *  - settings\n     * @param searchRecommendRules - The searchRecommendRules object.\n     * @param searchRecommendRules.indexName - Name of the index on which to perform the operation.\n     * @param searchRecommendRules.model - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n     * @param searchRecommendRules.searchRecommendRulesParams - The searchRecommendRulesParams object.\n     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.\n     */\n    searchRecommendRules(\n      { indexName, model, searchRecommendRulesParams }: SearchRecommendRulesProps,\n      requestOptions?: RequestOptions,\n    ): Promise<SearchRecommendRulesResponse> {\n      if (!indexName) {\n        throw new Error('Parameter `indexName` is required when calling `searchRecommendRules`.');\n      }\n\n      if (!model) {\n        throw new Error('Parameter `model` is required when calling `searchRecommendRules`.');\n      }\n\n      const requestPath = '/1/indexes/{indexName}/{model}/recommend/rules/search'\n        .replace('{indexName}', encodeURIComponent(indexName))\n        .replace('{model}', encodeURIComponent(model));\n      const headers: Headers = {};\n      const queryParameters: QueryParameters = {};\n\n      const request: Request = {\n        method: 'POST',\n        path: requestPath,\n        queryParameters,\n        headers,\n        data: searchRecommendRulesParams ? searchRecommendRulesParams : {},\n        useReadTransporter: true,\n        cacheable: true,\n      };\n\n      return transporter.request(request, requestOptions);\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 9410, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9416, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/algoliasearch/builds/node.ts","turbopack://[project]/node_modules/algoliasearch/builds/models.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport type { AbtestingClient } from '@algolia/client-abtesting';\nimport { abtestingClient } from '@algolia/client-abtesting';\nimport type { AnalyticsClient } from '@algolia/client-analytics';\nimport { analyticsClient } from '@algolia/client-analytics';\nimport type { InsightsClient } from '@algolia/client-insights';\nimport { insightsClient } from '@algolia/client-insights';\nimport type { PersonalizationClient } from '@algolia/client-personalization';\nimport { personalizationClient } from '@algolia/client-personalization';\nimport type { QuerySuggestionsClient } from '@algolia/client-query-suggestions';\nimport { querySuggestionsClient } from '@algolia/client-query-suggestions';\nimport type { SearchClient } from '@algolia/client-search';\nimport { searchClient } from '@algolia/client-search';\nimport type { IngestionClient } from '@algolia/ingestion';\nimport { ingestionClient } from '@algolia/ingestion';\nimport type { MonitoringClient } from '@algolia/monitoring';\nimport { monitoringClient } from '@algolia/monitoring';\nimport type { RecommendClient } from '@algolia/recommend';\nimport { recommendClient } from '@algolia/recommend';\n\nimport type {\n  AbtestingRegionOptions,\n  AnalyticsRegionOptions,\n  IngestionRegionOptions,\n  InitClientOptions,\n  InsightsRegionOptions,\n  PersonalizationRegionOptions,\n  QuerySuggestionsRegionOptions,\n} from './models';\n\nexport * from './models';\n\nexport type Algoliasearch = SearchClient & {\n  initAbtesting: (initOptions: InitClientOptions & AbtestingRegionOptions) => AbtestingClient;\n  initAnalytics: (initOptions: InitClientOptions & AnalyticsRegionOptions) => AnalyticsClient;\n  initIngestion: (initOptions: InitClientOptions & IngestionRegionOptions) => IngestionClient;\n  initInsights: (initOptions: InitClientOptions & InsightsRegionOptions) => InsightsClient;\n  initMonitoring: (initOptions?: InitClientOptions) => MonitoringClient;\n  initPersonalization: (initOptions: InitClientOptions & PersonalizationRegionOptions) => PersonalizationClient;\n  initQuerySuggestions: (initOptions: InitClientOptions & QuerySuggestionsRegionOptions) => QuerySuggestionsClient;\n  initRecommend: (initOptions?: InitClientOptions) => RecommendClient;\n};\n\nexport function algoliasearch(appId: string, apiKey: string, options?: ClientOptions): Algoliasearch {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  const client = searchClient(appId, apiKey, options);\n\n  return {\n    ...client,\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return client.transporter.algoliaAgent.value;\n    },\n\n    initAbtesting: (initOptions: InitClientOptions & AbtestingRegionOptions): AbtestingClient => {\n      return abtestingClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initAnalytics: (initOptions: InitClientOptions & AnalyticsRegionOptions): AnalyticsClient => {\n      return analyticsClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initIngestion: (initOptions: InitClientOptions & IngestionRegionOptions): IngestionClient => {\n      return ingestionClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initInsights: (initOptions: InitClientOptions & InsightsRegionOptions): InsightsClient => {\n      return insightsClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initMonitoring: (initOptions: InitClientOptions = {}): MonitoringClient => {\n      return monitoringClient(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    },\n\n    initPersonalization: (initOptions: InitClientOptions & PersonalizationRegionOptions): PersonalizationClient => {\n      return personalizationClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initQuerySuggestions: (initOptions: InitClientOptions & QuerySuggestionsRegionOptions): QuerySuggestionsClient => {\n      return querySuggestionsClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initRecommend: (initOptions: InitClientOptions = {}): RecommendClient => {\n      return recommendClient(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    },\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type { Region as AbtestingRegion, RegionOptions as AbtestingRegionOptions } from '@algolia/client-abtesting';\nimport type { Region as AnalyticsRegion, RegionOptions as AnalyticsRegionOptions } from '@algolia/client-analytics';\nimport type { Region as InsightsRegion, RegionOptions as InsightsRegionOptions } from '@algolia/client-insights';\nimport type { Region as IngestionRegion, RegionOptions as IngestionRegionOptions } from '@algolia/ingestion';\n\nimport type {\n  Region as PersonalizationRegion,\n  RegionOptions as PersonalizationRegionOptions,\n} from '@algolia/client-personalization';\nimport type {\n  Region as QuerySuggestionsRegion,\n  RegionOptions as QuerySuggestionsRegionOptions,\n} from '@algolia/client-query-suggestions';\n\nimport type { Status } from '@algolia/client-abtesting';\nimport type { ClientOptions } from '@algolia/client-common';\nimport type { EventType } from '@algolia/client-personalization';\nimport type {\n  Action,\n  AdvancedSyntaxFeatures,\n  AlternativesAsExact,\n  Anchoring,\n  AroundPrecision,\n  AroundRadius,\n  AroundRadiusAll,\n  AutomaticFacetFilter,\n  AutomaticFacetFilters,\n  Banner,\n  BannerImage,\n  BannerImageUrl,\n  BannerLink,\n  BaseIndexSettings,\n  BaseSearchParams,\n  BaseSearchParamsWithoutQuery,\n  BaseSearchResponse,\n  BooleanString,\n  Condition,\n  Consequence,\n  ConsequenceHide,\n  ConsequenceParams,\n  ConsequenceQuery,\n  ConsequenceQueryObject,\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteSourceProps,\n  DeletedAtResponse,\n  Distinct,\n  Edit,\n  EditType,\n  ErrorBase,\n  ExactOnSingleWordQuery,\n  Exhaustive,\n  FacetFilters,\n  FacetOrdering,\n  FacetStats,\n  Facets,\n  GetTaskProps,\n  HighlightResult,\n  HighlightResultOption,\n  IgnorePlurals,\n  IndexSettingsAsSearchParams,\n  Languages,\n  MatchLevel,\n  MatchedGeoLocation,\n  Mode,\n  NumericFilters,\n  OptionalFilters,\n  Params,\n  Personalization,\n  Promote,\n  PromoteObjectID,\n  PromoteObjectIDs,\n  QueryType,\n  Range,\n  RankingInfo,\n  ReRankingApplyFilter,\n  Redirect,\n  RedirectRuleIndexData,\n  RedirectRuleIndexMetadata,\n  RedirectURL,\n  RemoveStopWords,\n  RemoveWordsIfNoResults,\n  RenderingContent,\n  SearchPagination,\n  SearchParams,\n  SearchParamsObject,\n  SearchParamsQuery,\n  SemanticSearch,\n  SnippetResult,\n  SnippetResultOption,\n  SortRemainingBy,\n  Source,\n  SupportedLanguage,\n  TagFilters,\n  TaskStatus,\n  TimeRange,\n  TypoTolerance,\n  TypoToleranceEnum,\n  Value,\n  Widgets,\n} from '@algolia/client-search';\nimport { apiClientVersion } from '@algolia/client-search';\n\ntype Region =\n  | AbtestingRegion\n  | AnalyticsRegion\n  | IngestionRegion\n  | InsightsRegion\n  | PersonalizationRegion\n  | QuerySuggestionsRegion;\ntype RegionOptions =\n  | AbtestingRegionOptions\n  | AnalyticsRegionOptions\n  | IngestionRegionOptions\n  | InsightsRegionOptions\n  | PersonalizationRegionOptions\n  | QuerySuggestionsRegionOptions;\n\nexport * from '@algolia/client-abtesting';\nexport * from '@algolia/client-analytics';\nexport * from '@algolia/client-insights';\nexport * from '@algolia/client-personalization';\nexport * from '@algolia/client-query-suggestions';\nexport * from '@algolia/client-search';\nexport * from '@algolia/ingestion';\nexport * from '@algolia/monitoring';\nexport * from '@algolia/recommend';\n\nexport type {\n  AbtestingRegion,\n  AbtestingRegionOptions,\n  Action,\n  AdvancedSyntaxFeatures,\n  AlternativesAsExact,\n  AnalyticsRegion,\n  AnalyticsRegionOptions,\n  Anchoring,\n  AroundPrecision,\n  AroundRadius,\n  AroundRadiusAll,\n  AutomaticFacetFilter,\n  AutomaticFacetFilters,\n  Banner,\n  BannerImage,\n  BannerImageUrl,\n  BannerLink,\n  BaseIndexSettings,\n  BaseSearchParams,\n  BaseSearchParamsWithoutQuery,\n  BaseSearchResponse,\n  BooleanString,\n  Condition,\n  Consequence,\n  ConsequenceHide,\n  ConsequenceParams,\n  ConsequenceQuery,\n  ConsequenceQueryObject,\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteSourceProps,\n  DeletedAtResponse,\n  Distinct,\n  Edit,\n  EditType,\n  ErrorBase,\n  EventType,\n  ExactOnSingleWordQuery,\n  Exhaustive,\n  FacetFilters,\n  FacetOrdering,\n  FacetStats,\n  Facets,\n  GetTaskProps,\n  HighlightResult,\n  HighlightResultOption,\n  IgnorePlurals,\n  IndexSettingsAsSearchParams,\n  IngestionRegion,\n  IngestionRegionOptions,\n  InsightsRegion,\n  InsightsRegionOptions,\n  Languages,\n  MatchLevel,\n  MatchedGeoLocation,\n  Mode,\n  NumericFilters,\n  OptionalFilters,\n  Params,\n  Personalization,\n  PersonalizationRegion,\n  PersonalizationRegionOptions,\n  Promote,\n  PromoteObjectID,\n  PromoteObjectIDs,\n  QuerySuggestionsRegion,\n  QuerySuggestionsRegionOptions,\n  QueryType,\n  Range,\n  RankingInfo,\n  ReRankingApplyFilter,\n  Redirect,\n  RedirectRuleIndexData,\n  RedirectRuleIndexMetadata,\n  RedirectURL,\n  Region,\n  RegionOptions,\n  RemoveStopWords,\n  RemoveWordsIfNoResults,\n  RenderingContent,\n  SearchPagination,\n  SearchParams,\n  SearchParamsObject,\n  SearchParamsQuery,\n  SemanticSearch,\n  SnippetResult,\n  SnippetResultOption,\n  SortRemainingBy,\n  Source,\n  Status,\n  SupportedLanguage,\n  TagFilters,\n  TaskStatus,\n  TimeRange,\n  TypoTolerance,\n  TypoToleranceEnum,\n  Value,\n  Widgets,\n  apiClientVersion,\n};\n\n/**\n * Options forwarded to the client initialized via the `init` method.\n */\nexport type InitClientOptions = Partial<{\n  /**\n   * App to target with the initialized client, defaults to the `algoliasearch` appId.\n   */\n  appId: string;\n  /**\n   * API key of the targeted app ID, defaults to the `algoliasearch` apiKey.\n   */\n  apiKey: string;\n  options: ClientOptions;\n}>;\n"],"names":[],"mappings":";;;AAKA,SAAS,uBAAuB;AAEhC,SAAS,uBAAuB;AAEhC,SAAS,sBAAsB;AAE/B,SAAS,6BAA6B;AAEtC,SAAS,8BAA8B;AAEvC,SAAS,oBAAoB;AAE7B,SAAS,uBAAuB;AAEhC,SAAS,wBAAwB;AAEjC,SAAS,uBAAuB;;;;;;;;;;;;;;;;;;;;;;AArBhC,IAAA,eAAA,CAAA;AAAA,SAAA,cAAA;IAAA,eAAA,IAAA;AAAA;;;;;;;;;;;ACAA,IAAA,iBAAA,CAAA;AA0HA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;AACA,WAAA,gBAAA;;;;;;;;;;;;ADjGA,WAAA,cAAc;AAaP,SAAS,cAAc,KAAA,EAAe,MAAA,EAAgB,OAAA,EAAwC;IACnG,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;QACvC,MAAM,IAAI,MAAM,qBAAqB;IACvC;IAEA,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;QACzC,MAAM,IAAI,MAAM,sBAAsB;IACxC;IAEA,MAAM,qLAAS,eAAA,EAAa,OAAO,QAAQ,OAAO;IAElD,OAAO;QACL,GAAG,MAAA;QAAA;;KAAA,GAKH,IAAI,OAAc;YAChB,OAAO,OAAO,WAAA,CAAY,YAAA,CAAa,KAAA;QACzC;QAEA,eAAe,CAAC,gBAA6E;YAC3F,sLAAO,kBAAA,EACL,YAAY,KAAA,IAAS,OACrB,YAAY,MAAA,IAAU,QACtB,YAAY,MAAA,EACZ,YAAY,OAAA;QAEhB;QAEA,eAAe,CAAC,gBAA6E;YAC3F,sLAAO,kBAAA,EACL,YAAY,KAAA,IAAS,OACrB,YAAY,MAAA,IAAU,QACtB,YAAY,MAAA,EACZ,YAAY,OAAA;QAEhB;QAEA,eAAe,CAAC,gBAA6E;YAC3F,4KAAO,kBAAA,EACL,YAAY,KAAA,IAAS,OACrB,YAAY,MAAA,IAAU,QACtB,YAAY,MAAA,EACZ,YAAY,OAAA;QAEhB;QAEA,cAAc,CAAC,gBAA2E;YACxF,qLAAO,iBAAA,EACL,YAAY,KAAA,IAAS,OACrB,YAAY,MAAA,IAAU,QACtB,YAAY,MAAA,EACZ,YAAY,OAAA;QAEhB;QAEA,gBAAgB,CAAC,cAAiC,CAAC,CAAA,KAAwB;YACzE,6KAAO,mBAAA,EAAiB,YAAY,KAAA,IAAS,OAAO,YAAY,MAAA,IAAU,QAAQ,YAAY,OAAO;QACvG;QAEA,qBAAqB,CAAC,gBAAyF;YAC7G,4LAAO,wBAAA,EACL,YAAY,KAAA,IAAS,OACrB,YAAY,MAAA,IAAU,QACtB,YAAY,MAAA,EACZ,YAAY,OAAA;QAEhB;QAEA,sBAAsB,CAAC,gBAA2F;YAChH,iMAAO,yBAAA,EACL,YAAY,KAAA,IAAS,OACrB,YAAY,MAAA,IAAU,QACtB,YAAY,MAAA,EACZ,YAAY,OAAA;QAEhB;QAEA,eAAe,CAAC,cAAiC,CAAC,CAAA,KAAuB;YACvE,4KAAO,kBAAA,EAAgB,YAAY,KAAA,IAAS,OAAO,YAAY,MAAA,IAAU,QAAQ,YAAY,OAAO;QACtG;IACF;AACF"}},
    {"offset": {"line": 9528, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9534, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAkBA,SAASE,IAAI,EAAEC,KAAK,GAAE;AAjB6G,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAWd,8BAA8B;IAI5BI,SAASC;;;;;;;;IACTC,WAAWC,0DAAAA;AACb,EAAC,QAAA;AAED,MAAA,OAAA;IAAc;IAAA,iCAAoC;QAElD,YAAA;YAAA;YAAA,sCAA4D;gBAC5D,OAAO,KAAA;oBAAMC;oBAAAA,EAAc,IAAIX,mBAAmB;qBAChDY,YAAY;8BACVC,IAAAA,CAAMZ,CAAAA;wBAAAA,KAAUa,GAAAA;4BAAAA,IAAQ;4BAAA;yBAAA;;uBACxBC,MAAM;;iBACNC,UAAU;sBACV,IAAA,CAAA;gBAAA,UAAA;oBAAA,IAAA,eAA2C;oBAAA;iBAAA;sBAC3CC,KAAAA;oBAAAA,IAAY;oBAAA;iBAAA;sBACZC,OAAAA;oBAAAA,EAAU,EAAA;oBAAA;iBAAA;;eACVC,UAAU,EAAE;;KACd;UACAC,UAAU,CAAA;YAAA,IAAA;YAAA;SAAA;;OACRC,YAAYnB;IACd,EAAA,QAAA;IAAA;CAAA"}},
    {"offset": {"line": 9623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}