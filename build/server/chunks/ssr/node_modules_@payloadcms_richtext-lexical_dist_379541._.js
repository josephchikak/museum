module.exports = {

"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js (client proxy) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "LexicalEditorTheme": (()=>LexicalEditorTheme)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const LexicalEditorTheme = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call LexicalEditorTheme() from the server but LexicalEditorTheme is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js <module evaluation>", "LexicalEditorTheme");
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js (client proxy)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "LexicalEditorTheme": (()=>LexicalEditorTheme)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server-edge.js [app-rsc] (ecmascript)");
;
const LexicalEditorTheme = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2d$edge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call LexicalEditorTheme() from the server but LexicalEditorTheme is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js", "LexicalEditorTheme");
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$theme$2f$EditorTheme$2e$js__$28$client__proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js (client proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$theme$2f$EditorTheme$2e$js__$28$client__proxy$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js (client proxy)");
;
__turbopack_export_namespace__(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$theme$2f$EditorTheme$2e$js__$28$client__proxy$29$__);
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "createServerFeature": (()=>createServerFeature)
});
const createServerFeature = ({ dependencies, dependenciesPriority, dependenciesSoft, feature, key })=>{
    const featureProviderProviderServer = (props)=>{
        const featureProviderServer = {
            dependencies,
            dependenciesPriority,
            dependenciesSoft,
            key,
            serverFeatureProps: props
        };
        if (typeof feature === 'function') {
            featureProviderServer.feature = async ({ config, featureProviderMap, isRoot, parentIsLocalized, resolvedFeatures, unSanitizedEditorConfig })=>{
                const toReturn = await feature({
                    config,
                    featureProviderMap,
                    isRoot,
                    parentIsLocalized,
                    props,
                    resolvedFeatures,
                    unSanitizedEditorConfig
                });
                if (toReturn.sanitizedServerFeatureProps === null) {
                    toReturn.sanitizedServerFeatureProps = props;
                }
                return toReturn;
            };
        } else {
            // For explanation why we have to spread feature, see createClientFeature.ts
            const newFeature = {
                ...feature
            };
            newFeature.sanitizedServerFeatureProps = props;
            featureProviderServer.feature = newFeature;
        }
        return featureProviderServer;
    };
    return featureProviderProviderServer;
}; //# sourceMappingURL=createServerFeature.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/bold/markdownTransformers.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "BOLD_ITALIC_STAR": (()=>BOLD_ITALIC_STAR),
    "BOLD_ITALIC_UNDERSCORE": (()=>BOLD_ITALIC_UNDERSCORE),
    "BOLD_STAR": (()=>BOLD_STAR),
    "BOLD_UNDERSCORE": (()=>BOLD_UNDERSCORE)
});
const BOLD_ITALIC_STAR = {
    type: 'text-format',
    format: [
        'bold',
        'italic'
    ],
    tag: '***'
};
const BOLD_ITALIC_UNDERSCORE = {
    type: 'text-format',
    format: [
        'bold',
        'italic'
    ],
    intraword: false,
    tag: '___'
};
const BOLD_STAR = {
    type: 'text-format',
    format: [
        'bold'
    ],
    tag: '**'
};
const BOLD_UNDERSCORE = {
    type: 'text-format',
    format: [
        'bold'
    ],
    intraword: false,
    tag: '__'
}; //# sourceMappingURL=markdownTransformers.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/bold/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "BoldFeature": (()=>BoldFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/bold/markdownTransformers.js [app-rsc] (ecmascript)");
;
;
const BoldFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    dependenciesSoft: [
        'italic'
    ],
    feature: ({ featureProviderMap })=>{
        const markdownTransformers = [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BOLD_STAR"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BOLD_UNDERSCORE"]
        ];
        if (featureProviderMap.get('italic')) {
            markdownTransformers.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BOLD_ITALIC_UNDERSCORE"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BOLD_ITALIC_STAR"]);
        }
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#BoldFeatureClient',
            markdownTransformers
        };
    },
    key: 'bold'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/italic/markdownTransformers.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "ITALIC_STAR": (()=>ITALIC_STAR),
    "ITALIC_UNDERSCORE": (()=>ITALIC_UNDERSCORE)
});
const ITALIC_STAR = {
    type: 'text-format',
    format: [
        'italic'
    ],
    tag: '*'
};
const ITALIC_UNDERSCORE = {
    type: 'text-format',
    format: [
        'italic'
    ],
    intraword: false,
    tag: '_'
}; //# sourceMappingURL=markdownTransformers.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/italic/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "ItalicFeature": (()=>ItalicFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$italic$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/italic/markdownTransformers.js [app-rsc] (ecmascript)");
;
;
const ItalicFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#ItalicFeatureClient',
        markdownTransformers: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$italic$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ITALIC_STAR"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$italic$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ITALIC_UNDERSCORE"]
        ]
    },
    key: 'italic'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/underline/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "UnderlineFeature": (()=>UnderlineFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
;
const UnderlineFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#UnderlineFeatureClient'
    },
    key: 'underline'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/strikethrough/markdownTransformers.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "STRIKETHROUGH": (()=>STRIKETHROUGH)
});
const STRIKETHROUGH = {
    type: 'text-format',
    format: [
        'strikethrough'
    ],
    tag: '~~'
}; //# sourceMappingURL=markdownTransformers.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/strikethrough/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "StrikethroughFeature": (()=>StrikethroughFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$strikethrough$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/strikethrough/markdownTransformers.js [app-rsc] (ecmascript)");
;
;
const StrikethroughFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#StrikethroughFeatureClient',
        markdownTransformers: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$strikethrough$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["STRIKETHROUGH"]
        ]
    },
    key: 'strikethrough'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/subscript/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "SubscriptFeature": (()=>SubscriptFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
;
const SubscriptFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#SubscriptFeatureClient'
    },
    key: 'subscript'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/superscript/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "SuperscriptFeature": (()=>SuperscriptFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
;
const SuperscriptFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#SuperscriptFeatureClient'
    },
    key: 'superscript'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/inlineCode/markdownTransformers.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "INLINE_CODE": (()=>INLINE_CODE)
});
const INLINE_CODE = {
    type: 'text-format',
    format: [
        'code'
    ],
    tag: '`'
}; //# sourceMappingURL=markdownTransformers.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/inlineCode/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "InlineCodeFeature": (()=>InlineCodeFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$inlineCode$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/inlineCode/markdownTransformers.js [app-rsc] (ecmascript)");
;
;
const InlineCodeFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#InlineCodeFeatureClient',
        markdownTransformers: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$inlineCode$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["INLINE_CODE"]
        ]
    },
    key: 'inlineCode'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/paragraph/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'فقرة',
        label2: 'نص عادي'
    },
    az: {
        label: 'Paraqraf',
        label2: 'Normal Mətn'
    },
    bg: {
        label: 'Параграф',
        label2: 'Нормален текст'
    },
    cs: {
        label: 'Odstavec',
        label2: 'Normální text'
    },
    de: {
        label: 'Paragraph',
        label2: 'Normaler Text'
    },
    en: {
        label: 'Paragraph',
        label2: 'Normal Text'
    },
    es: {
        label: 'Párrafo',
        label2: 'Texto normal'
    },
    fa: {
        label: 'پاراگراف',
        label2: 'متن عادی'
    },
    fr: {
        label: 'Paragraphe',
        label2: 'Texte normal'
    },
    he: {
        label: 'פסקה',
        label2: 'טקסט רגיל'
    },
    hr: {
        label: 'Odlomak',
        label2: 'Normalan tekst'
    },
    hu: {
        label: 'Bekezdés',
        label2: 'Normál szöveg'
    },
    it: {
        label: 'Paragrafo',
        label2: 'Testo normale'
    },
    ja: {
        label: '段落',
        label2: '通常のテキスト'
    },
    ko: {
        label: '문단',
        label2: '일반 텍스트'
    },
    my: {
        label: 'Perenggan',
        label2: 'ပုံမှန်စာသား'
    },
    nb: {
        label: 'Avsnitt',
        label2: 'Normal tekst'
    },
    nl: {
        label: 'Paragraaf',
        label2: 'Normale tekst'
    },
    pl: {
        label: 'Akapit',
        label2: 'Normalny tekst'
    },
    pt: {
        label: 'Parágrafo',
        label2: 'Texto Normal'
    },
    ro: {
        label: 'Paragraf',
        label2: 'Text normal'
    },
    rs: {
        label: 'Paragraf',
        label2: 'Normalan tekst'
    },
    'rs-latin': {
        label: 'Paragraf',
        label2: 'Normalan tekst'
    },
    ru: {
        label: 'Параграф',
        label2: 'Нормальный текст'
    },
    sk: {
        label: 'Odsek',
        label2: 'Normálny text'
    },
    sv: {
        label: 'Stycke',
        label2: 'Normal Text'
    },
    th: {
        label: 'ย่อหน้า',
        label2: 'ข้อความธรรมดา'
    },
    tr: {
        label: 'Paragraf',
        label2: 'Normal Metin'
    },
    uk: {
        label: 'Абзац',
        label2: 'Звичайний текст'
    },
    vi: {
        label: 'Đoạn văn',
        label2: 'Văn bản bình thường'
    },
    zh: {
        label: '段落',
        label2: '正常文本'
    },
    'zh-TW': {
        label: '段落',
        label2: '正常文本'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/paragraph/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "ParagraphFeature": (()=>ParagraphFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$paragraph$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/paragraph/server/i18n.js [app-rsc] (ecmascript)");
;
;
const ParagraphFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#ParagraphFeatureClient',
        clientFeatureProps: null,
        i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$paragraph$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"]
    },
    key: 'paragraph'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/heading/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'العنوان {{headingLevel}}'
    },
    az: {
        label: 'Başlıq {{headingLevel}}'
    },
    bg: {
        label: 'Заглавие {{headingLevel}}'
    },
    cs: {
        label: 'Nadpis {{headingLevel}}'
    },
    de: {
        label: 'Überschrift {{headingLevel}}'
    },
    en: {
        label: 'Heading {{headingLevel}}'
    },
    es: {
        label: 'Encabezado {{headingLevel}}'
    },
    fa: {
        label: '[SKIPPED]'
    },
    fr: {
        label: 'En-tête {{headingLevel}}'
    },
    he: {
        label: 'כותרת {{רמת כותרת}}'
    },
    hr: {
        label: 'Naslov {{headingLevel}}'
    },
    hu: {
        label: 'Címsor {{headingLevel}}'
    },
    it: {
        label: 'Intestazione {{headingLevel}}'
    },
    ja: {
        label: '見出し{{headingLevel}}'
    },
    ko: {
        label: '제목 {{headingLevel}}'
    },
    my: {
        label: '[SURAT]\n\nKepala {{headingLevel}}'
    },
    nb: {
        label: 'Overskrift {{headingLevel}}'
    },
    nl: {
        label: 'Kop {{headingLevel}}'
    },
    pl: {
        label: 'Nagłówek {{headingLevel}}'
    },
    pt: {
        label: 'Cabeçalho {{headingLevel}}'
    },
    ro: {
        label: 'Titlu {{headingLevel}}'
    },
    rs: {
        label: 'Naslov {{headingLevel}}'
    },
    'rs-latin': {
        label: 'Naslov {{headingLevel}}'
    },
    ru: {
        label: 'Заголовок {{headingLevel}}'
    },
    sk: {
        label: 'Nadpis {{headingLevel}}'
    },
    sv: {
        label: 'Rubrik {{headingLevel}}'
    },
    th: {
        label: 'หัวข้อ {{headingLevel}}'
    },
    tr: {
        label: 'Başlık {{headingLevel}}'
    },
    uk: {
        label: 'Заголовок {{headingLevel}}'
    },
    vi: {
        label: 'Tiêu đề {{headingLevel}}'
    },
    zh: {
        label: '标题 {{headingLevel}}'
    },
    'zh-TW': {
        label: '標題 {{headingLevel}}'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/utils/markdown/createBlockNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "createBlockNode": (()=>createBlockNode)
});
const createBlockNode = (createNode)=>{
    return (parentNode, children, match)=>{
        const node = createNode(match);
        if (node) {
            node.append(...children);
            parentNode.replace(node);
            node.select(0, 0);
        }
    };
}; //# sourceMappingURL=createBlockNode.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/heading/markdownTransformer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "MarkdownTransformer": (()=>MarkdownTransformer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$utils$2f$markdown$2f$createBlockNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/utils/markdown/createBlockNode.js [app-rsc] (ecmascript)");
;
;
const MarkdownTransformer = (enabledHeadingSizes)=>{
    // Convert enabledHeadingSizes to a list of numbers (1 for h1, 2 for h2, etc.)
    const enabledSizes = enabledHeadingSizes.map((tag)=>Number(tag.slice(1)));
    // Create a regex pattern that matches any of the enabled sizes
    const pattern = `^(${enabledSizes.map((size)=>`#{${size}}`).join('|')})\\s`;
    const regExp = new RegExp(pattern);
    return {
        type: 'element',
        dependencies: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HeadingNode"]
        ],
        export: (node, exportChildren)=>{
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isHeadingNode"])(node)) {
                return null;
            }
            const level = Number(node.getTag().slice(1));
            return '#'.repeat(level) + ' ' + exportChildren(node);
        },
        regExp,
        replace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$utils$2f$markdown$2f$createBlockNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createBlockNode"])((match)=>{
            const tag = 'h' + match[1].length;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createHeadingNode"])(tag);
        })
    };
}; //# sourceMappingURL=markdownTransformer.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
/**
 * Utility function to create a node with hooks. You don't have to use this utility, but it improves type inference
 * @param node the node
 */ __turbopack_esm__({
    "createNode": (()=>createNode)
});
function createNode(node) {
    return node;
} //# sourceMappingURL=typeUtilities.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/converters/html/converter/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "convertLexicalNodesToHTML": (()=>convertLexicalNodesToHTML),
    "convertLexicalToHTML": (()=>convertLexicalToHTML)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createLocalReq$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/createLocalReq.js [app-rsc] (ecmascript)");
;
async function convertLexicalToHTML({ converters, currentDepth, data, depth, draft, overrideAccess, payload, req, showHiddenFields }) {
    if (data?.root?.children?.length) {
        if (req === undefined && payload) {
            req = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createLocalReq$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createLocalReq"])({}, payload);
        }
        if (!currentDepth) {
            currentDepth = 0;
        }
        if (!depth) {
            depth = req?.payload?.config?.defaultDepth;
        }
        return await convertLexicalNodesToHTML({
            converters,
            currentDepth,
            depth: depth,
            draft: draft === undefined ? false : draft,
            lexicalNodes: data?.root?.children,
            overrideAccess: overrideAccess === undefined ? false : overrideAccess,
            parent: data?.root,
            req: req,
            showHiddenFields: showHiddenFields === undefined ? false : showHiddenFields
        });
    }
    return '';
}
async function convertLexicalNodesToHTML({ converters, currentDepth, depth, draft, lexicalNodes, overrideAccess, parent, req, showHiddenFields }) {
    const unknownConverter = converters.find((converter)=>converter.nodeTypes.includes('unknown'));
    const htmlArray = await Promise.all(lexicalNodes.map(async (node, i)=>{
        const converterForNode = converters.find((converter)=>converter.nodeTypes.includes(node.type));
        try {
            if (!converterForNode) {
                if (unknownConverter) {
                    return await unknownConverter.converter({
                        childIndex: i,
                        converters,
                        currentDepth,
                        depth,
                        draft,
                        node,
                        overrideAccess,
                        parent,
                        req,
                        showHiddenFields
                    });
                }
                return '<span>unknown node</span>';
            }
            return await converterForNode.converter({
                childIndex: i,
                converters,
                currentDepth,
                depth,
                draft,
                node,
                overrideAccess,
                parent,
                req,
                showHiddenFields
            });
        } catch (error) {
            console.error('Error converting lexical node to HTML:', error, 'node:', node);
            return '';
        }
    }));
    return htmlArray.join('') || '';
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/heading/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "HeadingFeature": (()=>HeadingFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$heading$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/heading/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$heading$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/heading/markdownTransformer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/converters/html/converter/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
;
const HeadingFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: ({ props })=>{
        if (!props) {
            props = {};
        }
        const { enabledHeadingSizes = [
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6'
        ] } = props;
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#HeadingFeatureClient',
            clientFeatureProps: props,
            i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$heading$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
            markdownTransformers: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$heading$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MarkdownTransformer"])(enabledHeadingSizes)
            ],
            nodes: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: {
                            converter: async ({ converters, currentDepth, depth, draft, node, overrideAccess, parent, req, showHiddenFields })=>{
                                const childrenText = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertLexicalNodesToHTML"])({
                                    converters,
                                    currentDepth,
                                    depth,
                                    draft,
                                    lexicalNodes: node.children,
                                    overrideAccess,
                                    parent: {
                                        ...node,
                                        parent
                                    },
                                    req,
                                    showHiddenFields
                                });
                                return '<' + node?.tag + '>' + childrenText + '</' + node?.tag + '>';
                            },
                            nodeTypes: [
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HeadingNode"].getType()
                            ]
                        }
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HeadingNode"]
                })
            ],
            sanitizedServerFeatureProps: props
        };
    },
    key: 'heading'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/align/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        alignCenterLabel: 'محاذاة في الوسط',
        alignJustifyLabel: 'محاذاة التبرير',
        alignLeftLabel: 'محاذاة إلى اليسار',
        alignRightLabel: 'محاذاة إلى اليمين'
    },
    az: {
        alignCenterLabel: 'Mərkəzə Düzəlt',
        alignJustifyLabel: 'Düzəldin Səsləndirin',
        alignLeftLabel: 'Sola Doğru Hizalama',
        alignRightLabel: 'Sağa Doğru Hizalama'
    },
    bg: {
        alignCenterLabel: 'Центрирай',
        alignJustifyLabel: 'Подравняване по двата края',
        alignLeftLabel: 'Подравняване отляво',
        alignRightLabel: 'Подравняване вдясно'
    },
    cs: {
        alignCenterLabel: 'Zarovnat na střed',
        alignJustifyLabel: 'Zarovnat do bloku',
        alignLeftLabel: 'Zarovnat vlevo',
        alignRightLabel: 'Zarovnat vpravo'
    },
    de: {
        alignCenterLabel: 'Zentrieren',
        alignJustifyLabel: 'Blocksatz',
        alignLeftLabel: 'Linksbündig',
        alignRightLabel: 'Rechtsbündig'
    },
    en: {
        alignCenterLabel: 'Align Center',
        alignJustifyLabel: 'Align Justify',
        alignLeftLabel: 'Align Left',
        alignRightLabel: 'Align Right'
    },
    es: {
        alignCenterLabel: 'Alinear al centro',
        alignJustifyLabel: 'Alinear Justificar',
        alignLeftLabel: 'Alinear a la izquierda',
        alignRightLabel: 'Alinear a la derecha'
    },
    fa: {
        alignCenterLabel: 'تراز در مرکز',
        alignJustifyLabel: 'تراز کردن از دو طرف',
        alignLeftLabel: 'چپ تراز',
        alignRightLabel: 'راست چین'
    },
    fr: {
        alignCenterLabel: 'Aligner au centre',
        alignJustifyLabel: 'Aligner Justifier',
        alignLeftLabel: 'Aligner à gauche',
        alignRightLabel: 'Aligner à droite'
    },
    he: {
        alignCenterLabel: 'ממורכז',
        alignJustifyLabel: 'יישור דו-צדדי',
        alignLeftLabel: 'הסב לשמאל',
        alignRightLabel: 'יישור לימין'
    },
    hr: {
        alignCenterLabel: 'Poravnaj središnje',
        alignJustifyLabel: 'Poravnaj opravdaj',
        alignLeftLabel: 'Poravnaj lijevo',
        alignRightLabel: 'Poravnaj desno'
    },
    hu: {
        alignCenterLabel: 'Középre igazítás',
        alignJustifyLabel: 'Igazítás Sorkizárás',
        alignLeftLabel: 'Igazítás balra',
        alignRightLabel: 'Igazítás jobbra'
    },
    it: {
        alignCenterLabel: 'Allinea al centro',
        alignJustifyLabel: 'Allinea Giustifica',
        alignLeftLabel: 'Allinea a sinistra',
        alignRightLabel: 'Allinea a destra'
    },
    ja: {
        alignCenterLabel: '中央揃え',
        alignJustifyLabel: '両端揃え',
        alignLeftLabel: '左揃え',
        alignRightLabel: '右揃え'
    },
    ko: {
        alignCenterLabel: '중앙 정렬',
        alignJustifyLabel: '정렬 맞춤',
        alignLeftLabel: '왼쪽 정렬',
        alignRightLabel: '오른쪽 정렬'
    },
    my: {
        alignCenterLabel: 'Pusat Selaras',
        alignJustifyLabel: 'Penjajaran Justify',
        alignLeftLabel: 'ဘယ်ဘက်ဦးတည်ခြင်း',
        alignRightLabel: 'Penjajaran Kanan'
    },
    nb: {
        alignCenterLabel: 'Sentrer tekst',
        alignJustifyLabel: 'Juster linje',
        alignLeftLabel: 'Juster til venstre',
        alignRightLabel: 'Juster til høyre'
    },
    nl: {
        alignCenterLabel: 'Centreer uitlijnen',
        alignJustifyLabel: 'Uitlijnen Rechtvaardigen',
        alignLeftLabel: 'Links uitlijnen',
        alignRightLabel: 'Rechts uitlijnen'
    },
    pl: {
        alignCenterLabel: 'Wyśrodkuj',
        alignJustifyLabel: 'Wyjustuj wyrównanie',
        alignLeftLabel: 'Wyrównaj do lewej',
        alignRightLabel: 'Wyrównaj do prawej'
    },
    pt: {
        alignCenterLabel: 'Alinhar ao Centro',
        alignJustifyLabel: 'Alinhar Justificar',
        alignLeftLabel: 'Alinhar à Esquerda',
        alignRightLabel: 'Alinhar à Direita'
    },
    ro: {
        alignCenterLabel: 'Aliniați Centrul',
        alignJustifyLabel: 'Aliniaza Justifica',
        alignLeftLabel: 'Aliniați la stânga',
        alignRightLabel: 'Aliniați la dreapta'
    },
    rs: {
        alignCenterLabel: 'Centriraj',
        alignJustifyLabel: 'Poravnaj opravdaj',
        alignLeftLabel: 'Poravnaj levo',
        alignRightLabel: 'Poravnaj desno'
    },
    'rs-latin': {
        alignCenterLabel: 'Poravnaj centar',
        alignJustifyLabel: 'Poravnaj opravdanje',
        alignLeftLabel: 'Poravnaj levo',
        alignRightLabel: 'Poravnaj desno'
    },
    ru: {
        alignCenterLabel: 'Выровнять по центру',
        alignJustifyLabel: 'Выровнять по ширине',
        alignLeftLabel: 'Выровнять по левому краю',
        alignRightLabel: 'Выровнять по правому краю'
    },
    sk: {
        alignCenterLabel: 'Vycentrovať',
        alignJustifyLabel: 'Zarovnať do bloku',
        alignLeftLabel: 'Zarovnať doľava',
        alignRightLabel: 'Zarovnať doprava'
    },
    sv: {
        alignCenterLabel: 'Centrera',
        alignJustifyLabel: 'Justera Justify',
        alignLeftLabel: 'Justera till vänster',
        alignRightLabel: 'Justera till höger'
    },
    th: {
        alignCenterLabel: 'จัดแนวกึ่งกลาง',
        alignJustifyLabel: 'จัดแนวตรง',
        alignLeftLabel: 'จัดชิดซ้าย',
        alignRightLabel: 'จัดชิดขวา'
    },
    tr: {
        alignCenterLabel: 'Ortaya Hizala',
        alignJustifyLabel: 'Hizala Yasla',
        alignLeftLabel: 'Sola Hizala',
        alignRightLabel: 'Sağa Hizala'
    },
    uk: {
        alignCenterLabel: 'Вирівняти по центру',
        alignJustifyLabel: 'Вирівняти за шириною',
        alignLeftLabel: 'Вирівняти по лівому краю',
        alignRightLabel: 'Вирівняти по правому краю'
    },
    vi: {
        alignCenterLabel: 'Căn giữa',
        alignJustifyLabel: 'Căn đều',
        alignLeftLabel: 'Căn lề trái',
        alignRightLabel: 'Căn phải'
    },
    zh: {
        alignCenterLabel: '居中对齐',
        alignJustifyLabel: '对齐调整',
        alignLeftLabel: '向左对齐',
        alignRightLabel: '向右对齐'
    },
    'zh-TW': {
        alignCenterLabel: '對齊中心',
        alignJustifyLabel: '對齊並排列',
        alignLeftLabel: '向左對齊',
        alignRightLabel: '向右對齊'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/align/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "AlignFeature": (()=>AlignFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$align$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/align/server/i18n.js [app-rsc] (ecmascript)");
;
;
const AlignFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#AlignFeatureClient',
        i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$align$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"]
    },
    key: 'align'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/indent/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        decreaseLabel: 'تقليل المسافة البادئة',
        increaseLabel: 'زيادة المسافة البادئة'
    },
    az: {
        decreaseLabel: 'İntervalı Azaltın',
        increaseLabel: 'Girintiyi Artırın'
    },
    bg: {
        decreaseLabel: 'Намали отстоянието',
        increaseLabel: 'Увеличете отстоянието'
    },
    cs: {
        decreaseLabel: 'Zmenšit odsazení',
        increaseLabel: 'Zvětšit odsazení'
    },
    de: {
        decreaseLabel: 'Einzug verkleinern',
        increaseLabel: 'Einzug erhöhen'
    },
    en: {
        decreaseLabel: 'Decrease Indent',
        increaseLabel: 'Increase Indent'
    },
    es: {
        decreaseLabel: 'Disminuir Sangría',
        increaseLabel: 'Aumentar Sangría'
    },
    fa: {
        decreaseLabel: 'کاهش تورفتگی',
        increaseLabel: 'افزایش تورفتگی'
    },
    fr: {
        decreaseLabel: "Diminuer l'indentation",
        increaseLabel: "Augmenter l'indentation"
    },
    he: {
        decreaseLabel: 'הקטן הזחה',
        increaseLabel: 'הגדל כניסה'
    },
    hr: {
        decreaseLabel: 'Smanji uvlačenje',
        increaseLabel: 'Povećaj uvlačenje'
    },
    hu: {
        decreaseLabel: 'Csökkentse a behúzást',
        increaseLabel: 'Behúzás növelése'
    },
    it: {
        decreaseLabel: 'Diminuisci rientro',
        increaseLabel: 'Aumenta Rientro'
    },
    ja: {
        decreaseLabel: 'インデントを減らす',
        increaseLabel: 'インデントを増やす'
    },
    ko: {
        decreaseLabel: '들여쓰기 줄이기',
        increaseLabel: '들여쓰기 늘리기'
    },
    my: {
        decreaseLabel: 'Kurangkan Inden',
        increaseLabel: 'Tingkatkan Inden'
    },
    nb: {
        decreaseLabel: 'Reduser innrykk',
        increaseLabel: 'Øke innrykk'
    },
    nl: {
        decreaseLabel: 'Verminder Inspringing',
        increaseLabel: 'Inspring verhogen'
    },
    pl: {
        decreaseLabel: 'Zmniejsz wcięcie',
        increaseLabel: 'Zwiększ wcięcie'
    },
    pt: {
        decreaseLabel: 'Diminuir recuo',
        increaseLabel: 'Aumentar Indentação'
    },
    ro: {
        decreaseLabel: 'Reducere indentare',
        increaseLabel: 'Crește indentarea'
    },
    rs: {
        decreaseLabel: 'Smanji uvlačenje',
        increaseLabel: 'Povećaj uvlačenje'
    },
    'rs-latin': {
        decreaseLabel: 'Smanji uvlačenje',
        increaseLabel: 'Povećaj uvlačenje'
    },
    ru: {
        decreaseLabel: 'Уменьшить отступ',
        increaseLabel: 'Увеличить отступ'
    },
    sk: {
        decreaseLabel: 'Znížiť odsadenie',
        increaseLabel: 'Zväčšiť odsadenie'
    },
    sv: {
        decreaseLabel: 'Minska indrag',
        increaseLabel: 'Öka indrag'
    },
    th: {
        decreaseLabel: 'ลดการเยื้อง',
        increaseLabel: 'เพิ่มการเยื้อง'
    },
    tr: {
        decreaseLabel: 'Girintiyi Azalt',
        increaseLabel: 'Girintiyi Artır'
    },
    uk: {
        decreaseLabel: 'Зменшити відступ',
        increaseLabel: 'Збільшити відступ'
    },
    vi: {
        decreaseLabel: 'Giảm lề',
        increaseLabel: 'Tăng lề'
    },
    zh: {
        decreaseLabel: '减少缩进',
        increaseLabel: '增加缩进'
    },
    'zh-TW': {
        decreaseLabel: '減少縮排',
        increaseLabel: '增加縮排'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/indent/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "IndentFeature": (()=>IndentFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$indent$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/indent/server/i18n.js [app-rsc] (ecmascript)");
;
;
const IndentFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#IndentFeatureClient',
        i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$indent$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"]
    },
    key: 'indent'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/unorderedList/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'قائمة غير مرتبة'
    },
    az: {
        label: 'Sırasız Siyahı'
    },
    bg: {
        label: 'Неподреден списък'
    },
    cs: {
        label: 'Neuspořádaný seznam'
    },
    de: {
        label: 'Ungeordnete Liste'
    },
    en: {
        label: 'Unordered List'
    },
    es: {
        label: 'Lista desordenada'
    },
    fa: {
        label: 'لیست بدون ترتیب'
    },
    fr: {
        label: 'Liste non ordonnée'
    },
    he: {
        label: 'רשימה לא מסודרת'
    },
    hr: {
        label: 'Neuređeni popis'
    },
    hu: {
        label: 'Rendezetlen lista'
    },
    it: {
        label: 'Elenco non ordinato'
    },
    ja: {
        label: '順不同リスト'
    },
    ko: {
        label: '비정렬 목록'
    },
    my: {
        label: 'Senarai Tidak Tertib'
    },
    nb: {
        label: 'Usortert liste'
    },
    nl: {
        label: 'Ongeordende lijst'
    },
    pl: {
        label: 'Nieuporządkowana lista'
    },
    pt: {
        label: 'Lista Não Ordenada'
    },
    ro: {
        label: 'Listă neordonată'
    },
    rs: {
        label: 'Neporedani spisak'
    },
    'rs-latin': {
        label: 'Neuređena Lista'
    },
    ru: {
        label: 'Несортированный список'
    },
    sk: {
        label: 'Neusporiadaný zoznam'
    },
    sv: {
        label: 'Oordnad lista'
    },
    th: {
        label: 'รายการที่ไม่ได้เรียงลำดับ'
    },
    tr: {
        label: 'Sırasız Liste'
    },
    uk: {
        label: 'Невпорядкований список'
    },
    vi: {
        label: 'Danh sách không theo thứ tự'
    },
    zh: {
        label: '无序列表'
    },
    'zh-TW': {
        label: '無順序列表'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/shared/markdown.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
// Copied from https://github.com/facebook/lexical/blob/176b8cf16ecb332ee5efe2c75219e223b7b019f2/packages/lexical-markdown/src/MarkdownTransformers.ts#L97C1-L172C1
__turbopack_esm__({
    "listExport": (()=>listExport),
    "listReplace": (()=>listReplace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
;
// Amount of spaces that define indentation level
const LIST_INDENT_SIZE = 4;
const listReplace = (listType)=>{
    return (parentNode, children, match)=>{
        const previousNode = parentNode.getPreviousSibling();
        const nextNode = parentNode.getNextSibling();
        const listItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createListItemNode"])(listType === 'check' ? match[3] === 'x' : undefined);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListNode"])(nextNode) && nextNode.getListType() === listType) {
            const firstChild = nextNode.getFirstChild();
            if (firstChild !== null) {
                firstChild.insertBefore(listItem);
            } else {
                // should never happen, but let's handle gracefully, just in case.
                nextNode.append(listItem);
            }
            parentNode.remove();
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListNode"])(previousNode) && previousNode.getListType() === listType) {
            previousNode.append(listItem);
            parentNode.remove();
        } else {
            const list = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createListNode"])(listType, listType === 'number' ? Number(match[2]) : undefined);
            list.append(listItem);
            parentNode.replace(list);
        }
        listItem.append(...children);
        listItem.select(0, 0);
        const indent = Math.floor(match[1].length / LIST_INDENT_SIZE);
        if (indent) {
            listItem.setIndent(indent);
        }
    };
};
const listExport = (listNode, exportChildren, depth)=>{
    const output = [];
    const children = listNode.getChildren();
    let index = 0;
    for (const listItemNode of children){
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListItemNode"])(listItemNode)) {
            if (listItemNode.getChildrenSize() === 1) {
                const firstChild = listItemNode.getFirstChild();
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListNode"])(firstChild)) {
                    output.push(listExport(firstChild, exportChildren, depth + 1));
                    continue;
                }
            }
            const indent = ' '.repeat(depth * LIST_INDENT_SIZE);
            const listType = listNode.getListType();
            const prefix = listType === 'number' ? `${listNode.getStart() + index}. ` : listType === 'check' ? `- [${listItemNode.getChecked() ? 'x' : ' '}] ` : '- ';
            output.push(indent + prefix + exportChildren(listItemNode));
            index++;
        }
    }
    return output.join('\n');
}; //# sourceMappingURL=markdown.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/unorderedList/markdownTransformer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "UNORDERED_LIST": (()=>UNORDERED_LIST)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/shared/markdown.js [app-rsc] (ecmascript)");
;
;
const UNORDERED_LIST = {
    type: 'element',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"]
    ],
    export: (node, exportChildren)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListNode"])(node) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listExport"])(node, exportChildren, 0) : null;
    },
    regExp: /^(\s*)[-*+]\s/,
    replace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listReplace"])('bullet')
}; //# sourceMappingURL=markdownTransformer.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/htmlConverter.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "ListHTMLConverter": (()=>ListHTMLConverter),
    "ListItemHTMLConverter": (()=>ListItemHTMLConverter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/converters/html/converter/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__v4$3e$__ = __turbopack_import__("[project]/node_modules/uuid/dist/esm-node/v4.js [app-rsc] (ecmascript) <export default as v4>");
;
;
;
const ListHTMLConverter = {
    converter: async ({ converters, currentDepth, depth, draft, node, overrideAccess, parent, req, showHiddenFields })=>{
        const childrenText = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertLexicalNodesToHTML"])({
            converters,
            currentDepth,
            depth,
            draft,
            lexicalNodes: node.children,
            overrideAccess,
            parent: {
                ...node,
                parent
            },
            req,
            showHiddenFields
        });
        return `<${node?.tag} class="list-${node?.listType}">${childrenText}</${node?.tag}>`;
    },
    nodeTypes: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"].getType()
    ]
};
const ListItemHTMLConverter = {
    converter: async ({ converters, currentDepth, depth, draft, node, overrideAccess, parent, req, showHiddenFields })=>{
        const hasSubLists = node.children.some((child)=>child.type === 'list');
        const childrenText = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertLexicalNodesToHTML"])({
            converters,
            currentDepth,
            depth,
            draft,
            lexicalNodes: node.children,
            overrideAccess,
            parent: {
                ...node,
                parent
            },
            req,
            showHiddenFields
        });
        if ('listType' in parent && parent?.listType === 'check') {
            const uuid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__v4$3e$__["v4"])();
            return `<li aria-checked=${node.checked ? 'true' : 'false'} class="${'list-item-checkbox' + (node.checked ? ' list-item-checkbox-checked' : ' list-item-checkbox-unchecked') + (hasSubLists ? ' nestedListItem' : '')}"
          role="checkbox"
          tabIndex=${-1}
          value=${node?.value}
      >
      ${hasSubLists ? childrenText : `
        <input type="checkbox" id="${uuid}"${node.checked ? ' checked' : ''}>
        <label for="${uuid}">${childrenText}</label><br>
      `}


          </li>`;
        } else {
            return `<li ${hasSubLists ? `class="nestedListItem" ` : ''}value=${node?.value}>${childrenText}</li>`;
        }
    },
    nodeTypes: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"].getType()
    ]
}; //# sourceMappingURL=htmlConverter.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/unorderedList/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "UnorderedListFeature": (()=>UnorderedListFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$unorderedList$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/unorderedList/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$unorderedList$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/unorderedList/markdownTransformer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/htmlConverter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
;
const UnorderedListFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#UnorderedListFeatureClient',
        i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$unorderedList$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
        markdownTransformers: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$unorderedList$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UNORDERED_LIST"]
        ],
        nodes: [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                converters: {
                    html: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListHTMLConverter"]
                },
                node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"]
            }),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                converters: {
                    html: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemHTMLConverter"]
                },
                node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"]
            })
        ]
    },
    key: 'unorderedList'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/orderedList/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'قائمة مرتبة'
    },
    az: {
        label: 'Sıralı Siyahı'
    },
    bg: {
        label: 'Подреден списък'
    },
    cs: {
        label: 'Seřazený seznam'
    },
    de: {
        label: 'Geordnete Liste'
    },
    en: {
        label: 'Ordered List'
    },
    es: {
        label: 'Lista ordenada'
    },
    fa: {
        label: 'لیست مرتب شده'
    },
    fr: {
        label: 'Liste ordonnée'
    },
    he: {
        label: 'רשימה ממוינת'
    },
    hr: {
        label: 'Naručeni popis'
    },
    hu: {
        label: 'Rendelt lista'
    },
    it: {
        label: 'Elenco ordinato'
    },
    ja: {
        label: '順序付きリスト'
    },
    ko: {
        label: '주문된 목록'
    },
    my: {
        label: 'စီစဉ်ထားသော စာရင်း'
    },
    nb: {
        label: 'Ordnet Liste'
    },
    nl: {
        label: 'Geordende Lijst'
    },
    pl: {
        label: 'Uporządkowana lista'
    },
    pt: {
        label: 'Lista Ordenada'
    },
    ro: {
        label: 'Lista ordonată'
    },
    rs: {
        label: 'Naručeni Spisak'
    },
    'rs-latin': {
        label: 'Naručeni spisak'
    },
    ru: {
        label: 'Упорядоченный список'
    },
    sk: {
        label: 'Zoradený zoznam'
    },
    sv: {
        label: 'Ordnad Lista'
    },
    th: {
        label: 'รายการที่ถูกจัดลำดับ'
    },
    tr: {
        label: 'Sıralı Liste'
    },
    uk: {
        label: 'Впорядкований список'
    },
    vi: {
        label: 'Danh sách đã sắp xếp'
    },
    zh: {
        label: '有序列表'
    },
    'zh-TW': {
        label: '有序列表'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/orderedList/markdownTransformer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "ORDERED_LIST": (()=>ORDERED_LIST)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/shared/markdown.js [app-rsc] (ecmascript)");
;
;
const ORDERED_LIST = {
    type: 'element',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"]
    ],
    export: (node, exportChildren)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListNode"])(node) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listExport"])(node, exportChildren, 0) : null;
    },
    regExp: /^(\s*)(\d+)\.\s/,
    replace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listReplace"])('number')
}; //# sourceMappingURL=markdownTransformer.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/orderedList/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "OrderedListFeature": (()=>OrderedListFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$orderedList$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/orderedList/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$orderedList$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/orderedList/markdownTransformer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/htmlConverter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
;
const OrderedListFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: ({ featureProviderMap })=>{
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#OrderedListFeatureClient',
            i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$orderedList$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
            markdownTransformers: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$orderedList$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ORDERED_LIST"]
            ],
            nodes: featureProviderMap.has('unorderedList') ? [] : [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListHTMLConverter"]
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"]
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemHTMLConverter"]
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"]
                })
            ]
        };
    },
    key: 'orderedList'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/checklist/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'قائمة التحقق'
    },
    az: {
        label: 'Yoxlama Siyahısı'
    },
    bg: {
        label: 'Списък за проверка'
    },
    cs: {
        label: 'Seznam kontrol'
    },
    de: {
        label: 'Checkliste'
    },
    en: {
        label: 'Check List'
    },
    es: {
        label: 'Lista de comprobación'
    },
    fa: {
        label: 'لیست بررسی'
    },
    fr: {
        label: 'Liste de contrôle'
    },
    he: {
        label: 'רשימת בדיקה'
    },
    hr: {
        label: 'Kontrolni popis'
    },
    hu: {
        label: 'Ellenőrzőlista'
    },
    it: {
        label: 'Lista di controllo'
    },
    ja: {
        label: 'チェックリスト'
    },
    ko: {
        label: '체크 리스트'
    },
    my: {
        label: 'Senarai Semak'
    },
    nb: {
        label: 'Sjekkliste'
    },
    nl: {
        label: 'Checklist'
    },
    pl: {
        label: 'Lista kontrolna'
    },
    pt: {
        label: 'Lista de Verificação'
    },
    ro: {
        label: 'Listă de verificare'
    },
    rs: {
        label: 'Lista provere'
    },
    'rs-latin': {
        label: 'Lista provere'
    },
    ru: {
        label: 'Список Проверки'
    },
    sk: {
        label: 'Kontrolný zoznam'
    },
    sv: {
        label: 'Kontrollista'
    },
    th: {
        label: 'รายการตรวจสอบ'
    },
    tr: {
        label: 'Kontrol Listesi'
    },
    uk: {
        label: 'Список перевірки'
    },
    vi: {
        label: 'Danh sách kiểm tra'
    },
    zh: {
        label: '检查清单'
    },
    'zh-TW': {
        label: '檢查清單'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/checklist/markdownTransformers.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "CHECK_LIST": (()=>CHECK_LIST)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/shared/markdown.js [app-rsc] (ecmascript)");
;
;
const CHECK_LIST = {
    type: 'element',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"]
    ],
    export: (node, exportChildren)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isListNode"])(node) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listExport"])(node, exportChildren, 0) : null;
    },
    regExp: /^(\s*)(?:-\s)?\s?(\[(\s|x)?\])\s/i,
    replace: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$shared$2f$markdown$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["listReplace"])('check')
}; //# sourceMappingURL=markdownTransformers.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/checklist/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "ChecklistFeature": (()=>ChecklistFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$checklist$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/checklist/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$checklist$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/checklist/markdownTransformers.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/htmlConverter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/list/LexicalList.dev.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
;
const ChecklistFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: ({ featureProviderMap })=>{
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#ChecklistFeatureClient',
            i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$checklist$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
            markdownTransformers: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$checklist$2f$markdownTransformers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CHECK_LIST"]
            ],
            nodes: featureProviderMap.has('unorderedList') || featureProviderMap.has('orderedList') ? [] : [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListHTMLConverter"]
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListNode"]
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$htmlConverter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemHTMLConverter"]
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$list$2f$LexicalList$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ListItemNode"]
                })
            ]
        };
    },
    key: 'checklist'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/utils/url.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "sanitizeUrl": (()=>sanitizeUrl),
    "validateUrl": (()=>validateUrl),
    "validateUrlMinimal": (()=>validateUrlMinimal)
});
function sanitizeUrl(url) {
    /** A pattern that matches safe  URLs. */ const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;
    /** A pattern that matches safe data URLs. */ const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z\d+/]+=*$/i;
    url = String(url).trim();
    if (url.match(SAFE_URL_PATTERN) != null || url.match(DATA_URL_PATTERN) != null) {
        return url;
    }
    return 'https://';
}
// Source: https://stackoverflow.com/a/8234912/2013580
const absoluteRegExp = /(?:[A-Za-z]{3,9}:(?:\/\/)?(?:[-;:&=+$,\w]+@)?[A-Za-z\d.-]+|(?:www.|[-;:&=+$,\w]+@)[A-Za-z\d.-]+)(?:\/[+~%/.\w-]*)?\??[-+=&;%@.\w]*#?\w*/;
/**
 * This regex checks for relative URLs starting with / or anchor links starting with # in a string. Tested for the following use cases:
 * - /privacy-policy
 * - /privacy-policy#primary-terms
 * - #primary-terms
 *  */ const relativeOrAnchorRegExp = /^[\w\-./]*(?:#\w[\w-]*)?$/;
function validateUrlMinimal(url) {
    if (!url) {
        return false;
    }
    return !url.includes(' ');
}
function validateUrl(url) {
    // TODO Fix UI for link insertion; it should never default to an invalid URL such as https://.
    // Maybe show a dialog where they user can type the URL before inserting it.
    if (!url) {
        return false;
    }
    if (url === 'https://') {
        return true;
    }
    // This makes sure URLs starting with www. instead of https are valid too
    if (absoluteRegExp.test(url)) {
        return true;
    }
    // Check relative or anchor links
    if (relativeOrAnchorRegExp.test(url)) {
        return true;
    }
    // While this doesn't allow URLs starting with www (which is why we use the regex above), it does properly handle tel: URLs
    try {
        new URL(url);
        return true;
    } catch  {
    /* empty */ }
    return false;
} //# sourceMappingURL=url.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/baseFields.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "getBaseFields": (()=>getBaseFields)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$utils$2f$url$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/utils/url.js [app-rsc] (ecmascript)");
;
const getBaseFields = (config, enabledCollections, disabledCollections, maxDepth)=>{
    let enabledRelations;
    /**
  * Figure out which relations should be enabled (enabledRelations) based on a collection's admin.enableRichTextLink property,
  * or the Link Feature's enabledCollections and disabledCollections properties which override it.
  */ if (enabledCollections) {
        enabledRelations = enabledCollections;
    } else if (disabledCollections) {
        enabledRelations = config.collections.filter(({ slug })=>!disabledCollections.includes(slug)).map(({ slug })=>slug);
    } else {
        enabledRelations = config.collections.filter(({ admin: { enableRichTextLink, hidden } })=>{
            if (typeof hidden !== 'function' && hidden) {
                return false;
            }
            return enableRichTextLink;
        }).map(({ slug })=>slug);
    }
    const baseFields = [
        {
            name: 'text',
            type: 'text',
            label: ({ t })=>t('fields:textToDisplay'),
            required: true
        },
        {
            name: 'linkType',
            type: 'radio',
            admin: {
                description: ({ t })=>t('fields:chooseBetweenCustomTextOrDocument')
            },
            defaultValue: 'custom',
            label: ({ t })=>t('fields:linkType'),
            options: [
                {
                    label: ({ t })=>t('fields:customURL'),
                    value: 'custom'
                }
            ],
            required: true
        },
        {
            name: 'url',
            type: 'text',
            hooks: {
                beforeChange: [
                    ({ value })=>{
                        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$utils$2f$url$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["validateUrl"])(value)) {
                            return encodeURIComponent(value);
                        }
                        return value;
                    }
                ]
            },
            label: ({ t })=>t('fields:enterURL'),
            required: true,
            // @ts-expect-error - TODO: fix this
            validate: (value)=>{
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$utils$2f$url$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["validateUrlMinimal"])(value)) {
                    return 'Invalid URL';
                }
            }
        }
    ];
    // Only display internal link-specific fields / options / conditions if there are enabled relations
    if (enabledRelations?.length) {
        baseFields[1].options.push({
            label: ({ t })=>t('fields:internalLink'),
            value: 'internal'
        });
        baseFields[2].admin = {
            condition: ({ linkType })=>linkType !== 'internal'
        };
        baseFields.push({
            name: 'doc',
            admin: {
                condition: ({ linkType })=>{
                    return linkType === 'internal';
                }
            },
            // when admin.hidden is a function we need to dynamically call hidden with the user to know if the collection should be shown
            type: 'relationship',
            filterOptions: !enabledCollections && !disabledCollections ? ({ relationTo, user })=>{
                const hidden = config.collections.find(({ slug })=>slug === relationTo)?.admin.hidden;
                if (typeof hidden === 'function' && hidden({
                    user
                })) {
                    return false;
                }
                return true;
            } : null,
            label: ({ t })=>t('fields:chooseDocumentToLink'),
            maxDepth,
            relationTo: enabledRelations,
            required: true
        });
    }
    baseFields.push({
        name: 'newTab',
        type: 'checkbox',
        label: ({ t })=>t('fields:openInNewTab')
    });
    return baseFields;
}; //# sourceMappingURL=baseFields.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/transformExtraFields.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "transformExtraFields": (()=>transformExtraFields)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$baseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/baseFields.js [app-rsc] (ecmascript)");
;
function transformExtraFields(customFieldSchema, config, enabledCollections, disabledCollections, maxDepth) {
    const baseFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$baseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getBaseFields"])(config, enabledCollections, disabledCollections, maxDepth);
    let fields;
    if (typeof customFieldSchema === 'function') {
        fields = customFieldSchema({
            config,
            defaultFields: baseFields
        });
    } else if (Array.isArray(customFieldSchema)) {
        fields = customFieldSchema;
    } else {
        fields = baseFields;
    }
    return fields;
} //# sourceMappingURL=transformExtraFields.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'رابط'
    },
    az: {
        label: 'Keçid'
    },
    bg: {
        label: 'Връзка'
    },
    cs: {
        label: 'Odkaz'
    },
    de: {
        label: 'Verknüpfung'
    },
    en: {
        label: 'Link'
    },
    es: {
        label: 'Enlace'
    },
    fa: {
        label: 'پیوند'
    },
    fr: {
        label: 'Lien'
    },
    he: {
        label: 'קישור'
    },
    hr: {
        label: 'Poveznica'
    },
    hu: {
        label: 'Hivatkozás'
    },
    it: {
        label: 'Collegamento'
    },
    ja: {
        label: 'リンク'
    },
    ko: {
        label: '링크'
    },
    my: {
        label: 'လင့်'
    },
    nb: {
        label: 'Lenke'
    },
    nl: {
        label: 'Link'
    },
    pl: {
        label: 'Łącze'
    },
    pt: {
        label: 'Ligação'
    },
    ro: {
        label: 'Legătură'
    },
    rs: {
        label: 'Veza'
    },
    'rs-latin': {
        label: 'Veza'
    },
    ru: {
        label: 'Ссылка'
    },
    sk: {
        label: 'Odkaz'
    },
    sv: {
        label: 'Länk'
    },
    th: {
        label: 'ลิงค์'
    },
    tr: {
        label: 'Bağlantı'
    },
    uk: {
        label: 'Посилання'
    },
    vi: {
        label: 'Liên kết'
    },
    zh: {
        label: '链接'
    },
    'zh-TW': {
        label: '連結'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/nodes/LinkNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "$createLinkNode": (()=>$createLinkNode),
    "$isLinkNode": (()=>$isLinkNode),
    "$toggleLink": (()=>$toggleLink),
    "LinkNode": (()=>LinkNode),
    "TOGGLE_LINK_COMMAND": (()=>TOGGLE_LINK_COMMAND)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bson-objectid/objectid.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$utils$2f$LexicalUtils$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lexical/utils/LexicalUtils.dev.mjs [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lexical/Lexical.dev.mjs [app-rsc] (ecmascript)");
;
;
;
const SUPPORTED_URL_PROTOCOLS = new Set([
    'http:',
    'https:',
    'mailto:',
    'sms:',
    'tel:'
]);
class LinkNode extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ElementNode"] {
    __fields;
    __id;
    constructor({ id, fields = {
        doc: null,
        linkType: 'custom',
        newTab: false,
        url: ''
    }, key }){
        super(key);
        this.__fields = fields;
        this.__id = id;
    }
    static clone(node) {
        return new LinkNode({
            id: node.__id,
            fields: node.__fields,
            key: node.__key
        });
    }
    static getType() {
        return 'link';
    }
    static importDOM() {
        return {
            a: (node)=>({
                    conversion: $convertAnchorElement,
                    priority: 1
                })
        };
    }
    static importJSON(serializedNode) {
        if (serializedNode.version === 1 && typeof serializedNode.fields?.doc?.value === 'object' && serializedNode.fields?.doc?.value?.id) {
            serializedNode.fields.doc.value = serializedNode.fields.doc.value.id;
            serializedNode.version = 2;
        }
        if (serializedNode.version === 2 && !serializedNode.id) {
            serializedNode.id = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].default().toHexString();
            serializedNode.version = 3;
        }
        const node = $createLinkNode({
            id: serializedNode.id,
            fields: serializedNode.fields
        });
        node.setFormat(serializedNode.format);
        node.setIndent(serializedNode.indent);
        node.setDirection(serializedNode.direction);
        return node;
    }
    canBeEmpty() {
        return false;
    }
    canInsertTextAfter() {
        return false;
    }
    canInsertTextBefore() {
        return false;
    }
    createDOM(config) {
        const element = document.createElement('a');
        if (this.__fields?.linkType === 'custom') {
            element.href = this.sanitizeUrl(this.__fields.url ?? '');
        }
        if (this.__fields?.newTab ?? false) {
            element.target = '_blank';
        }
        if (this.__fields?.newTab === true && this.__fields?.linkType === 'custom') {
            element.rel = manageRel(element.rel, 'add', 'noopener');
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$utils$2f$LexicalUtils$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["addClassNamesToElement"])(element, config.theme.link);
        return element;
    }
    exportJSON() {
        const returnObject = {
            ...super.exportJSON(),
            type: 'link',
            fields: this.getFields(),
            version: 3
        };
        const id = this.getID();
        if (id) {
            returnObject.id = id;
        }
        return returnObject;
    }
    extractWithChild(child, selection, destination) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isRangeSelection"])(selection)) {
            return false;
        }
        const anchorNode = selection.anchor.getNode();
        const focusNode = selection.focus.getNode();
        return this.isParentOf(anchorNode) && this.isParentOf(focusNode) && selection.getTextContent().length > 0;
    }
    getFields() {
        return this.getLatest().__fields;
    }
    getID() {
        return this.getLatest().__id;
    }
    insertNewAfter(selection, restoreSelection = true) {
        const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isElementNode"])(element)) {
            const linkNode = $createLinkNode({
                fields: this.__fields
            });
            element.append(linkNode);
            return linkNode;
        }
        return null;
    }
    isInline() {
        return true;
    }
    sanitizeUrl(url) {
        try {
            const parsedUrl = new URL(url);
            if (!SUPPORTED_URL_PROTOCOLS.has(parsedUrl.protocol)) {
                return 'about:blank';
            }
        } catch (e) {
            return 'https://';
        }
        return url;
    }
    setFields(fields) {
        const writable = this.getWritable();
        writable.__fields = fields;
    }
    updateDOM(prevNode, anchor, config) {
        const url = this.__fields?.url;
        const newTab = this.__fields?.newTab;
        if (url != null && url !== prevNode.__fields?.url && this.__fields?.linkType === 'custom') {
            anchor.href = url;
        }
        if (this.__fields?.linkType === 'internal' && prevNode.__fields?.linkType === 'custom') {
            anchor.removeAttribute('href');
        }
        // TODO: not 100% sure why we're settign rel to '' - revisit
        // Start rel config here, then check newTab below
        if (anchor.rel == null) {
            anchor.rel = '';
        }
        if (newTab !== prevNode.__fields?.newTab) {
            if (newTab ?? false) {
                anchor.target = '_blank';
                if (this.__fields?.linkType === 'custom') {
                    anchor.rel = manageRel(anchor.rel, 'add', 'noopener');
                }
            } else {
                anchor.removeAttribute('target');
                anchor.rel = manageRel(anchor.rel, 'remove', 'noopener');
            }
        }
        return false;
    }
}
function $convertAnchorElement(domNode) {
    let node = null;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isHTMLAnchorElement"])(domNode)) {
        const content = domNode.textContent;
        if (content !== null && content !== '') {
            node = $createLinkNode({
                id: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].default().toHexString(),
                fields: {
                    doc: null,
                    linkType: 'custom',
                    newTab: domNode.getAttribute('target') === '_blank',
                    url: domNode.getAttribute('href') ?? ''
                }
            });
        }
    }
    return {
        node
    };
}
function $createLinkNode({ id, fields }) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$applyNodeReplacement"])(new LinkNode({
        id: id ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].default().toHexString(),
        fields
    }));
}
function $isLinkNode(node) {
    return node instanceof LinkNode;
}
const TOGGLE_LINK_COMMAND = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createCommand"])('TOGGLE_LINK_COMMAND');
function $toggleLink(payload) {
    const selection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$getSelection"])();
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isRangeSelection"])(selection) && !payload.selectedNodes?.length) {
        return;
    }
    const nodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isRangeSelection"])(selection) ? selection.extract() : payload.selectedNodes;
    if (payload === null) {
        // Remove LinkNodes
        nodes?.forEach((node)=>{
            const parent = node.getParent();
            if ($isLinkNode(parent)) {
                const children = parent.getChildren();
                for(let i = 0; i < children.length; i += 1){
                    parent.insertBefore(children[i]);
                }
                parent.remove();
            }
        });
    } else {
        // Add or merge LinkNodes
        if (nodes?.length === 1) {
            const firstNode = nodes[0];
            // if the first node is a LinkNode or if its
            // parent is a LinkNode, we update the URL, target and rel.
            const linkNode = $isLinkNode(firstNode) ? firstNode : $getLinkAncestor(firstNode);
            if (linkNode !== null) {
                linkNode.setFields(payload.fields);
                if (payload.text != null && payload.text !== linkNode.getTextContent()) {
                    // remove all children and add child with new textcontent:
                    linkNode.append((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createTextNode"])(payload.text));
                    linkNode.getChildren().forEach((child)=>{
                        if (child !== linkNode.getLastChild()) {
                            child.remove();
                        }
                    });
                }
                return;
            }
        }
        let prevParent = null;
        let linkNode = null;
        nodes?.forEach((node)=>{
            const parent = node.getParent();
            if (parent === linkNode || parent === null || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isElementNode"])(node) && !node.isInline()) {
                return;
            }
            if ($isLinkNode(parent)) {
                linkNode = parent;
                parent.setFields(payload.fields);
                if (payload.text != null && payload.text !== parent.getTextContent()) {
                    // remove all children and add child with new textcontent:
                    parent.append((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createTextNode"])(payload.text));
                    parent.getChildren().forEach((child)=>{
                        if (child !== parent.getLastChild()) {
                            child.remove();
                        }
                    });
                }
                return;
            }
            if (!parent.is(prevParent)) {
                prevParent = parent;
                linkNode = $createLinkNode({
                    fields: payload.fields
                });
                if ($isLinkNode(parent)) {
                    if (node.getPreviousSibling() === null) {
                        parent.insertBefore(linkNode);
                    } else {
                        parent.insertAfter(linkNode);
                    }
                } else {
                    node.insertBefore(linkNode);
                }
            }
            if ($isLinkNode(node)) {
                if (node.is(linkNode)) {
                    return;
                }
                if (linkNode !== null) {
                    const children = node.getChildren();
                    for(let i = 0; i < children.length; i += 1){
                        linkNode.append(children[i]);
                    }
                }
                node.remove();
                return;
            }
            if (linkNode !== null) {
                linkNode.append(node);
            }
        });
    }
}
function $getLinkAncestor(node) {
    return $getAncestor(node, (ancestor)=>$isLinkNode(ancestor));
}
function $getAncestor(node, predicate) {
    let parent = node;
    while(parent !== null){
        parent = parent.getParent();
        if (parent === null || predicate(parent)) {
            break;
        }
    }
    return parent;
}
function manageRel(input, action, value) {
    let result;
    let mutableInput = `${input}`;
    if (action === 'add') {
        // if we somehow got out of sync - clean up
        if (mutableInput.includes(value)) {
            const re = new RegExp(value, 'g');
            mutableInput = mutableInput.replace(re, '').trim();
        }
        mutableInput = mutableInput.trim();
        result = mutableInput.length === 0 ? `${value}` : `${mutableInput} ${value}`;
    } else {
        const re = new RegExp(value, 'g');
        result = mutableInput.replace(re, '').trim();
    }
    return result;
} //# sourceMappingURL=LinkNode.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/markdownTransformer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
/**
 * Code taken from https://github.com/facebook/lexical/blob/main/packages/lexical-markdown/src/MarkdownTransformers.ts#L357
 */ // Order of text transformers matters:
//
// - code should go first as it prevents any transformations inside
__turbopack_esm__({
    "LinkMarkdownTransformer": (()=>LinkMarkdownTransformer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/nodes/LinkNode.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lexical/Lexical.dev.mjs [app-rsc] (ecmascript)");
;
;
const LinkMarkdownTransformer = {
    type: 'text-match',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkNode"]
    ],
    export: (_node, exportChildren, exportFormat)=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isLinkNode"])(_node)) {
            return null;
        }
        const node = _node;
        const { url } = node.getFields();
        const linkContent = `[${node.getTextContent()}](${url})`;
        const firstChild = node.getFirstChild();
        // Add text styles only if link has single text node inside. If it's more
        // then one we ignore it as markdown does not support nested styles for links
        if (node.getChildrenSize() === 1 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isTextNode"])(firstChild)) {
            return exportFormat(firstChild, linkContent);
        } else {
            return linkContent;
        }
    },
    importRegExp: /\[([^[]+)\]\(([^()\s]+)(?:\s"((?:[^"]*\\")*[^"]*)"\s*)?\)/,
    regExp: /\[([^[]+)\]\(([^()\s]+)(?:\s"((?:[^"]*\\")*[^"]*)"\s*)?\)$/,
    replace: (textNode, match)=>{
        const [, linkText, linkUrl] = match;
        const linkNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createLinkNode"])({
            fields: {
                doc: null,
                linkType: 'custom',
                newTab: false,
                url: linkUrl
            }
        });
        const linkTextNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createTextNode"])(linkText);
        linkTextNode.setFormat(textNode.getFormat());
        linkNode.append(linkTextNode);
        textNode.replace(linkNode);
    },
    trigger: ')'
}; //# sourceMappingURL=markdownTransformer.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/nodes/AutoLinkNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "$createAutoLinkNode": (()=>$createAutoLinkNode),
    "$isAutoLinkNode": (()=>$isAutoLinkNode),
    "AutoLinkNode": (()=>AutoLinkNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lexical/Lexical.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/nodes/LinkNode.js [app-rsc] (ecmascript)");
;
;
class AutoLinkNode extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkNode"] {
    static clone(node) {
        return new AutoLinkNode({
            id: '',
            fields: node.__fields,
            key: node.__key
        });
    }
    static getType() {
        return 'autolink';
    }
    static importDOM() {
        // TODO: Should link node should handle the import over autolink?
        return null;
    }
    static importJSON(serializedNode) {
        if (serializedNode.version === 1 && typeof serializedNode.fields?.doc?.value === 'object' && serializedNode.fields?.doc?.value?.id) {
            serializedNode.fields.doc.value = serializedNode.fields.doc.value.id;
            serializedNode.version = 2;
        }
        const node = $createAutoLinkNode({
            fields: serializedNode.fields
        });
        node.setFormat(serializedNode.format);
        node.setIndent(serializedNode.indent);
        node.setDirection(serializedNode.direction);
        return node;
    }
    // @ts-expect-error
    exportJSON() {
        const serialized = super.exportJSON();
        return {
            type: 'autolink',
            children: serialized.children,
            direction: serialized.direction,
            fields: serialized.fields,
            format: serialized.format,
            indent: serialized.indent,
            version: 2
        };
    }
    insertNewAfter(selection, restoreSelection = true) {
        const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isElementNode"])(element)) {
            const linkNode = $createAutoLinkNode({
                fields: this.__fields
            });
            element.append(linkNode);
            return linkNode;
        }
        return null;
    }
}
function $createAutoLinkNode({ fields }) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$applyNodeReplacement"])(new AutoLinkNode({
        id: '',
        fields
    }));
}
function $isAutoLinkNode(node) {
    return node instanceof AutoLinkNode;
} //# sourceMappingURL=AutoLinkNode.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/validate.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "linkValidation": (()=>linkValidation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$ui$2f$dist$2f$forms$2f$buildStateFromSchema$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@payloadcms/ui/dist/forms/buildStateFromSchema/index.js [app-rsc] (ecmascript) <locals>");
;
const linkValidation = (props, sanitizedFieldsWithoutText)=>{
    return async ({ node, validation: { options: { id, collectionSlug, operation, preferences, req } } })=>{
        /**
    * Run buildStateFromSchema as that properly validates link fields and link sub-fields
    */ const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$ui$2f$dist$2f$forms$2f$buildStateFromSchema$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["buildStateFromSchema"])({
            id,
            collectionSlug,
            data: node.fields,
            fieldSchema: sanitizedFieldsWithoutText,
            operation: operation === 'create' || operation === 'update' ? operation : 'update',
            preferences,
            req,
            siblingData: node.fields
        });
        let errorPaths = [];
        for(const fieldKey in result){
            if (result[fieldKey].errorPaths) {
                errorPaths = errorPaths.concat(result[fieldKey].errorPaths);
            }
        }
        if (errorPaths.length) {
            return 'The following fields are invalid: ' + errorPaths.join(', ');
        }
        return true;
    };
}; //# sourceMappingURL=validate.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/recursivelyPopulateFieldsForGraphQL.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "recursivelyPopulateFieldsForGraphQL": (()=>recursivelyPopulateFieldsForGraphQL)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$afterRead$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__afterReadTraverseFields$3e$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/hooks/afterRead/traverseFields.js [app-rsc] (ecmascript) <export traverseFields as afterReadTraverseFields>");
;
const recursivelyPopulateFieldsForGraphQL = ({ context, currentDepth = 0, data, depth, draft, fieldPromises, fields, findMany, flattenLocales, overrideAccess = false, populationPromises, req, showHiddenFields, siblingDoc })=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$afterRead$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__afterReadTraverseFields$3e$__["afterReadTraverseFields"])({
        collection: null,
        context,
        currentDepth,
        depth,
        doc: data,
        draft,
        fallbackLocale: req.fallbackLocale,
        fieldPromises,
        fields,
        findMany,
        flattenLocales,
        global: null,
        locale: req.locale,
        overrideAccess,
        path: [],
        populationPromises,
        req,
        schemaPath: [],
        showHiddenFields,
        siblingDoc,
        triggerHooks: false
    });
}; //# sourceMappingURL=recursivelyPopulateFieldsForGraphQL.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/graphQLPopulationPromise.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "linkPopulationPromiseHOC": (()=>linkPopulationPromiseHOC)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$recursivelyPopulateFieldsForGraphQL$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/recursivelyPopulateFieldsForGraphQL.js [app-rsc] (ecmascript)");
;
const linkPopulationPromiseHOC = (props)=>{
    return ({ context, currentDepth, depth, draft, editorPopulationPromises, fieldPromises, findMany, flattenLocales, node, overrideAccess, populationPromises, req, showHiddenFields })=>{
        if (!props.fields?.length) {
            return;
        }
        /**
    * Should populate all fields, including the doc field (for internal links), as it's treated like a normal field
    */ if (Array.isArray(props.fields)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$recursivelyPopulateFieldsForGraphQL$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recursivelyPopulateFieldsForGraphQL"])({
                context,
                currentDepth,
                data: node.fields,
                depth,
                draft,
                editorPopulationPromises,
                fieldPromises,
                fields: props.fields,
                findMany,
                flattenLocales,
                overrideAccess,
                populationPromises,
                req,
                showHiddenFields,
                siblingDoc: node.fields
            });
        }
    };
}; //# sourceMappingURL=graphQLPopulationPromise.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "LinkFeature": (()=>LinkFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$escape$2d$html$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/escape-html/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$transformExtraFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/transformExtraFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/deepCopyObject.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/sanitize.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/markdownTransformer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/converters/html/converter/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$AutoLinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/nodes/AutoLinkNode.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/validate.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/nodes/LinkNode.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$graphQLPopulationPromise$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/graphQLPopulationPromise.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
const LinkFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: async ({ config: _config, isRoot, parentIsLocalized, props })=>{
        if (!props) {
            props = {};
        }
        const validRelationships = _config.collections.map((c)=>c.slug) || [];
        const _transformedFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$transformExtraFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["transformExtraFields"])(props.fields ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObject"])(props.fields) : null, _config, props.enabledCollections, props.disabledCollections, props.maxDepth);
        const sanitizedFields = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeFields"])({
            config: _config,
            fields: _transformedFields,
            parentIsLocalized,
            requireFieldLevelRichTextEditor: isRoot,
            validRelationships
        });
        props.fields = sanitizedFields;
        // the text field is not included in the node data.
        // Thus, for tasks like validation, we do not want to pass it a text field in the schema which will never have data.
        // Otherwise, it will cause a validation error (field is required).
        const sanitizedFieldsWithoutText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObject"])(sanitizedFields).filter((field)=>!('name' in field) || field.name !== 'text');
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#LinkFeatureClient',
            clientFeatureProps: {
                disabledCollections: props.disabledCollections,
                enabledCollections: props.enabledCollections
            },
            generateSchemaMap: ()=>{
                if (!sanitizedFields || !Array.isArray(sanitizedFields) || sanitizedFields.length === 0) {
                    return null;
                }
                const schemaMap = new Map();
                schemaMap.set('fields', sanitizedFields);
                return schemaMap;
            },
            i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
            markdownTransformers: [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkMarkdownTransformer"]
            ],
            nodes: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: {
                            converter: async ({ converters, currentDepth, depth, draft, node, overrideAccess, parent, req, showHiddenFields })=>{
                                const childrenText = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertLexicalNodesToHTML"])({
                                    converters,
                                    currentDepth,
                                    depth,
                                    draft,
                                    lexicalNodes: node.children,
                                    overrideAccess,
                                    parent: {
                                        ...node,
                                        parent
                                    },
                                    req,
                                    showHiddenFields
                                });
                                const rel = node.fields.newTab ? ' rel="noopener noreferrer"' : '';
                                const target = node.fields.newTab ? ' target="_blank"' : '';
                                let href = node.fields.url;
                                if (node.fields.linkType === 'internal') {
                                    href = typeof node.fields.doc?.value !== 'object' ? String(node.fields.doc?.value) : String(node.fields.doc?.value?.id);
                                }
                                return `<a href="${href}"${target}${rel}>${childrenText}</a>`;
                            },
                            nodeTypes: [
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$AutoLinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AutoLinkNode"].getType()
                            ]
                        }
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$AutoLinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AutoLinkNode"],
                    // Since AutoLinkNodes are just internal links, they need no hooks or graphQL population promises
                    validations: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["linkValidation"])(props, sanitizedFieldsWithoutText)
                    ]
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: {
                            converter: async ({ converters, currentDepth, depth, draft, node, overrideAccess, parent, req, showHiddenFields })=>{
                                const childrenText = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertLexicalNodesToHTML"])({
                                    converters,
                                    currentDepth,
                                    depth,
                                    draft,
                                    lexicalNodes: node.children,
                                    overrideAccess,
                                    parent: {
                                        ...node,
                                        parent
                                    },
                                    req,
                                    showHiddenFields
                                });
                                const rel = node.fields.newTab ? ' rel="noopener noreferrer"' : '';
                                const target = node.fields.newTab ? ' target="_blank"' : '';
                                const href = node.fields.linkType === 'custom' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$escape$2d$html$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(node.fields.url) : node.fields.doc?.value;
                                return `<a href="${href}"${target}${rel}>${childrenText}</a>`;
                            },
                            nodeTypes: [
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkNode"].getType()
                            ]
                        }
                    },
                    getSubFields: ()=>{
                        return sanitizedFieldsWithoutText;
                    },
                    getSubFieldsData: ({ node })=>{
                        return node?.fields;
                    },
                    graphQLPopulationPromises: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$graphQLPopulationPromise$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["linkPopulationPromiseHOC"])(props)
                    ],
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$nodes$2f$LinkNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkNode"],
                    validations: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["linkValidation"])(props, sanitizedFieldsWithoutText)
                    ]
                })
            ],
            sanitizedServerFeatureProps: props
        };
    },
    key: 'link'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'العلاقة'
    },
    az: {
        label: 'Münasibət'
    },
    bg: {
        label: 'Връзка'
    },
    cs: {
        label: 'Vztah'
    },
    de: {
        label: 'Beziehung'
    },
    en: {
        label: 'Relationship'
    },
    es: {
        label: 'Relación'
    },
    fa: {
        label: 'روابط'
    },
    fr: {
        label: 'Relation'
    },
    he: {
        label: 'יחסים'
    },
    hr: {
        label: 'Odnos'
    },
    hu: {
        label: 'Kapcsolat'
    },
    it: {
        label: 'Relazione'
    },
    ja: {
        label: '関係性'
    },
    ko: {
        label: '관계'
    },
    my: {
        label: 'Hubungan'
    },
    nb: {
        label: 'Forhold'
    },
    nl: {
        label: 'Relatie'
    },
    pl: {
        label: 'Relacja'
    },
    pt: {
        label: 'Relacionamento'
    },
    ro: {
        label: 'Relație'
    },
    rs: {
        label: 'Veza'
    },
    'rs-latin': {
        label: 'Odnos'
    },
    ru: {
        label: 'Отношения'
    },
    sk: {
        label: 'Vzťah'
    },
    sv: {
        label: 'Relation'
    },
    th: {
        label: 'ความสัมพันธ์'
    },
    tr: {
        label: 'İlişki'
    },
    uk: {
        label: 'Стосунки'
    },
    vi: {
        label: 'Mối quan hệ'
    },
    zh: {
        label: '关系'
    },
    'zh-TW': {
        label: '關係'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populate.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "populate": (()=>populate)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$collections$2f$dataloader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/collections/dataloader.js [app-rsc] (ecmascript)");
;
const populate = async ({ id, collectionSlug, currentDepth, data, depth, draft, key, overrideAccess, req, showHiddenFields })=>{
    const shouldPopulate = depth && currentDepth <= depth;
    // usually depth is checked within recursivelyPopulateFieldsForGraphQL. But since this populate function can be called outside of that (in rest afterRead node hooks) we need to check here too
    if (!shouldPopulate) {
        return;
    }
    const dataRef = data;
    const doc = await req.payloadDataLoader?.load((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$collections$2f$dataloader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createDataloaderCacheKey"])({
        collectionSlug,
        currentDepth: currentDepth + 1,
        depth,
        docID: id,
        draft,
        fallbackLocale: req.fallbackLocale,
        locale: req.locale,
        overrideAccess,
        showHiddenFields,
        transactionID: req.transactionID
    }));
    if (doc) {
        dataRef[key] = doc;
    } else {
        dataRef[key] = null;
    }
}; //# sourceMappingURL=populate.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/graphQLPopulationPromise.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "relationshipPopulationPromiseHOC": (()=>relationshipPopulationPromiseHOC)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populate.js [app-rsc] (ecmascript)");
;
const relationshipPopulationPromiseHOC = (props)=>{
    const relationshipPopulationPromise = ({ currentDepth, depth, draft, node, overrideAccess, populationPromises, req, showHiddenFields })=>{
        if (node?.value) {
            // @ts-expect-error
            const id = node?.value?.id || node?.value // for backwards-compatibility
            ;
            const collection = req.payload.collections[node?.relationTo];
            if (collection) {
                const populateDepth = props?.maxDepth !== undefined && props?.maxDepth < depth ? props?.maxDepth : depth;
                populationPromises.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["populate"])({
                    id,
                    collectionSlug: collection.config.slug,
                    currentDepth,
                    data: node,
                    depth: populateDepth,
                    draft,
                    key: 'value',
                    overrideAccess,
                    req,
                    showHiddenFields
                }));
            }
        }
    };
    return relationshipPopulationPromise;
}; //# sourceMappingURL=graphQLPopulationPromise.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/nodes/RelationshipNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "$createServerRelationshipNode": (()=>$createServerRelationshipNode),
    "$isServerRelationshipNode": (()=>$isServerRelationshipNode),
    "RelationshipServerNode": (()=>RelationshipServerNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$node_modules$2f40$lexical$2f$react$2f$LexicalDecoratorBlockNode$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/node_modules/@lexical/react/LexicalDecoratorBlockNode.dev.mjs [app-rsc] (ecmascript)");
;
function $relationshipElementToServerNode(domNode) {
    const id = domNode.getAttribute('data-lexical-relationship-id');
    const relationTo = domNode.getAttribute('data-lexical-relationship-relationTo');
    if (id != null && relationTo != null) {
        const node = $createServerRelationshipNode({
            relationTo,
            value: id
        });
        return {
            node
        };
    }
    return null;
}
class RelationshipServerNode extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$node_modules$2f40$lexical$2f$react$2f$LexicalDecoratorBlockNode$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecoratorBlockNode"] {
    __data;
    constructor({ data, format, key }){
        super(format, key);
        this.__data = data;
    }
    static clone(node) {
        return new this({
            data: node.__data,
            format: node.__format,
            key: node.__key
        });
    }
    static getType() {
        return 'relationship';
    }
    static importDOM() {
        return {
            div: (domNode)=>{
                if (!domNode.hasAttribute('data-lexical-relationship-relationTo') || !domNode.hasAttribute('data-lexical-relationship-id')) {
                    return null;
                }
                return {
                    conversion: $relationshipElementToServerNode,
                    priority: 2
                };
            }
        };
    }
    static importJSON(serializedNode) {
        if (serializedNode.version === 1 && serializedNode?.value?.id) {
            serializedNode.value = serializedNode.value.id;
        }
        const importedData = {
            relationTo: serializedNode.relationTo,
            value: serializedNode.value
        };
        const node = $createServerRelationshipNode(importedData);
        node.setFormat(serializedNode.format);
        return node;
    }
    static isInline() {
        return false;
    }
    decorate(editor, config) {
        return null;
    }
    exportDOM() {
        const element = document.createElement('div');
        element.setAttribute('data-lexical-relationship-id', String(this.__data?.value));
        element.setAttribute('data-lexical-relationship-relationTo', this.__data?.relationTo);
        const text = document.createTextNode(this.getTextContent());
        element.append(text);
        return {
            element
        };
    }
    exportJSON() {
        return {
            ...super.exportJSON(),
            ...this.getData(),
            type: 'relationship',
            version: 2
        };
    }
    getData() {
        return this.getLatest().__data;
    }
    getTextContent() {
        return `${this.__data?.relationTo} relation to ${this.__data?.value}`;
    }
    setData(data) {
        const writable = this.getWritable();
        writable.__data = data;
    }
}
function $createServerRelationshipNode(data) {
    return new RelationshipServerNode({
        data
    });
}
function $isServerRelationshipNode(node) {
    return node instanceof RelationshipServerNode;
} //# sourceMappingURL=RelationshipNode.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "RelationshipFeature": (()=>RelationshipFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$graphQLPopulationPromise$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/graphQLPopulationPromise.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populate.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$nodes$2f$RelationshipNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/nodes/RelationshipNode.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const RelationshipFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: ({ props })=>{
        // we don't need to pass maxDepth to the client, it's only used on the server
        const { maxDepth, ...clientFeatureProps } = props ?? {};
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#RelationshipFeatureClient',
            clientFeatureProps,
            i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
            nodes: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    graphQLPopulationPromises: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$graphQLPopulationPromise$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["relationshipPopulationPromiseHOC"])(props)
                    ],
                    hooks: {
                        afterRead: [
                            ({ currentDepth, depth, draft, node, overrideAccess, populationPromises, req, showHiddenFields })=>{
                                if (!node?.value) {
                                    return node;
                                }
                                const collection = req.payload.collections[node?.relationTo];
                                if (!collection) {
                                    return node;
                                }
                                // @ts-expect-error
                                const id = node?.value?.id || node?.value // for backwards-compatibility
                                ;
                                const populateDepth = maxDepth !== undefined && maxDepth < depth ? maxDepth : depth;
                                populationPromises.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["populate"])({
                                    id,
                                    collectionSlug: collection.config.slug,
                                    currentDepth,
                                    data: node,
                                    depth: populateDepth,
                                    draft,
                                    key: 'value',
                                    overrideAccess,
                                    req,
                                    showHiddenFields
                                }));
                                return node;
                            }
                        ]
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$nodes$2f$RelationshipNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RelationshipServerNode"]
                })
            ]
        };
    },
    key: 'relationship'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/blockquote/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'اقتباس'
    },
    az: {
        label: 'Blokkvota'
    },
    bg: {
        label: 'Цитат'
    },
    cs: {
        label: 'Citace'
    },
    de: {
        label: 'Blockzitat'
    },
    en: {
        label: 'Blockquote'
    },
    es: {
        label: 'Cita en bloque'
    },
    fa: {
        label: 'نقل قول بلوکی'
    },
    fr: {
        label: 'Citation'
    },
    he: {
        label: 'בלוק ציטוט'
    },
    hr: {
        label: 'Blok citat'
    },
    hu: {
        label: 'Idézetblokk'
    },
    it: {
        label: 'Citazione'
    },
    ja: {
        label: 'ブロッククォート'
    },
    ko: {
        label: '인용구'
    },
    my: {
        label: 'ဒေါင်းချီးခြင်း'
    },
    nb: {
        label: 'Blokksitat'
    },
    nl: {
        label: 'Citaat'
    },
    pl: {
        label: 'Cytat blokowy'
    },
    pt: {
        label: 'Citação em bloco'
    },
    ro: {
        label: 'Citat'
    },
    rs: {
        label: 'Blok citat'
    },
    'rs-latin': {
        label: 'Blok citata'
    },
    ru: {
        label: 'Цитата'
    },
    sk: {
        label: 'Citát'
    },
    sv: {
        label: 'Blockcitat'
    },
    th: {
        label: '[SKIPPED]'
    },
    tr: {
        label: 'Alıntı'
    },
    uk: {
        label: 'Блокцитата'
    },
    vi: {
        label: 'Trích dẫn'
    },
    zh: {
        label: '块引用'
    },
    'zh-TW': {
        label: '引用塊'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/blockquote/markdownTransformer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "MarkdownTransformer": (()=>MarkdownTransformer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lexical/Lexical.dev.mjs [app-rsc] (ecmascript)");
;
;
const MarkdownTransformer = {
    type: 'element',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["QuoteNode"]
    ],
    export: (node, exportChildren)=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isQuoteNode"])(node)) {
            return null;
        }
        const lines = exportChildren(node).split('\n');
        const output = [];
        for (const line of lines){
            output.push('> ' + line);
        }
        return output.join('\n');
    },
    regExp: /^>\s/,
    replace: (parentNode, children, _match, isImport)=>{
        if (isImport) {
            const previousNode = parentNode.getPreviousSibling();
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isQuoteNode"])(previousNode)) {
                previousNode.splice(previousNode.getChildrenSize(), 0, [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createLineBreakNode"])(),
                    ...children
                ]);
                previousNode.select(0, 0);
                parentNode.remove();
                return;
            }
        }
        const node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createQuoteNode"])();
        node.append(...children);
        parentNode.replace(node);
        node.select(0, 0);
    }
}; //# sourceMappingURL=markdownTransformer.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/blockquote/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "BlockquoteFeature": (()=>BlockquoteFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$blockquote$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/blockquote/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$blockquote$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/blockquote/markdownTransformer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/converters/html/converter/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
;
const BlockquoteFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#BlockquoteFeatureClient',
        clientFeatureProps: null,
        i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$blockquote$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
        markdownTransformers: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$blockquote$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MarkdownTransformer"]
        ],
        nodes: [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                converters: {
                    html: {
                        converter: async ({ converters, currentDepth, depth, draft, node, overrideAccess, parent, req, showHiddenFields })=>{
                            const childrenText = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$converters$2f$html$2f$converter$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["convertLexicalNodesToHTML"])({
                                converters,
                                currentDepth,
                                depth,
                                draft,
                                lexicalNodes: node.children,
                                overrideAccess,
                                parent: {
                                    ...node,
                                    parent
                                },
                                req,
                                showHiddenFields
                            });
                            return `<blockquote>${childrenText}</blockquote>`;
                        },
                        nodeTypes: [
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["QuoteNode"].getType()
                        ]
                    }
                },
                node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$rich$2d$text$2f$LexicalRichText$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["QuoteNode"]
            })
        ]
    },
    key: 'blockquote'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'تحميل'
    },
    az: {
        label: 'Yükləyin'
    },
    bg: {
        label: 'Качване'
    },
    cs: {
        label: 'Nahrát'
    },
    de: {
        label: 'Datei'
    },
    en: {
        label: 'Upload'
    },
    es: {
        label: 'Subir'
    },
    fa: {
        label: 'بارگذاری'
    },
    fr: {
        label: 'Télécharger'
    },
    he: {
        label: 'העלה'
    },
    hr: {
        label: 'Prenesi'
    },
    hu: {
        label: 'Feltöltés'
    },
    it: {
        label: 'Carica'
    },
    ja: {
        label: 'アップロード'
    },
    ko: {
        label: '업로드'
    },
    my: {
        label: 'တင်ပြီး'
    },
    nb: {
        label: 'Last opp'
    },
    nl: {
        label: 'Uploaden'
    },
    pl: {
        label: 'Prześlij'
    },
    pt: {
        label: 'Carregar'
    },
    ro: {
        label: 'Încarcă'
    },
    rs: {
        label: 'Otpremi'
    },
    'rs-latin': {
        label: 'Otpremi'
    },
    ru: {
        label: 'Загрузить'
    },
    sk: {
        label: 'Nahrať'
    },
    sv: {
        label: 'Ladda upp'
    },
    th: {
        label: 'อัปโหลด'
    },
    tr: {
        label: 'Yükle'
    },
    uk: {
        label: 'Завантажити'
    },
    vi: {
        label: 'Tải lên'
    },
    zh: {
        label: '上传'
    },
    'zh-TW': {
        label: '上傳'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/nodes/UploadNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "$createUploadServerNode": (()=>$createUploadServerNode),
    "$isUploadServerNode": (()=>$isUploadServerNode),
    "UploadServerNode": (()=>UploadServerNode),
    "isGoogleDocCheckboxImg": (()=>isGoogleDocCheckboxImg)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bson-objectid/objectid.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$node_modules$2f40$lexical$2f$react$2f$LexicalDecoratorBlockNode$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/node_modules/@lexical/react/LexicalDecoratorBlockNode.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lexical/Lexical.dev.mjs [app-rsc] (ecmascript)");
;
;
;
;
;
function isGoogleDocCheckboxImg(img) {
    return img.parentElement != null && img.parentElement.tagName === 'LI' && img.previousSibling === null && img.getAttribute('aria-roledescription') === 'checkbox';
}
function $convertUploadServerElement(domNode) {
    if (domNode.hasAttribute('data-lexical-upload-relation-to') && domNode.hasAttribute('data-lexical-upload-id')) {
        const id = domNode.getAttribute('data-lexical-upload-id');
        const relationTo = domNode.getAttribute('data-lexical-upload-relation-to');
        if (id != null && relationTo != null) {
            const node = $createUploadServerNode({
                data: {
                    fields: {},
                    relationTo,
                    value: id
                }
            });
            return {
                node
            };
        }
    }
    const img = domNode;
    if (img.src.startsWith('file:///') || isGoogleDocCheckboxImg(img)) {
        return null;
    }
    // TODO: Auto-upload functionality here!
    //}
    return null;
}
class UploadServerNode extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$node_modules$2f40$lexical$2f$react$2f$LexicalDecoratorBlockNode$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecoratorBlockNode"] {
    __data;
    constructor({ data, format, key }){
        super(format, key);
        this.__data = data;
    }
    static clone(node) {
        return new this({
            data: node.__data,
            format: node.__format,
            key: node.__key
        });
    }
    static getType() {
        return 'upload';
    }
    static importDOM() {
        return {
            img: (node)=>({
                    conversion: $convertUploadServerElement,
                    priority: 0
                })
        };
    }
    static importJSON(serializedNode) {
        if (serializedNode.version === 1 && serializedNode?.value?.id) {
            serializedNode.value = serializedNode.value.id;
        }
        if (serializedNode.version === 2 && !serializedNode?.id) {
            serializedNode.id = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].default().toHexString();
            serializedNode.version = 3;
        }
        const importedData = {
            id: serializedNode.id,
            fields: serializedNode.fields,
            relationTo: serializedNode.relationTo,
            value: serializedNode.value
        };
        const node = $createUploadServerNode({
            data: importedData
        });
        node.setFormat(serializedNode.format);
        return node;
    }
    static isInline() {
        return false;
    }
    decorate() {
        // @ts-expect-error
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsx"])(RawUploadComponent, {
            data: this.__data,
            format: this.__format,
            nodeKey: this.getKey()
        });
    }
    exportDOM() {
        const element = document.createElement('img');
        element.setAttribute('data-lexical-upload-id', String(this.__data?.value));
        element.setAttribute('data-lexical-upload-relation-to', this.__data?.relationTo);
        return {
            element
        };
    }
    exportJSON() {
        return {
            ...super.exportJSON(),
            ...this.getData(),
            type: 'upload',
            version: 3
        };
    }
    getData() {
        return this.getLatest().__data;
    }
    setData(data) {
        const writable = this.getWritable();
        writable.__data = data;
    }
    updateDOM() {
        return false;
    }
}
function $createUploadServerNode({ data }) {
    if (!data?.id) {
        data.id = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bson$2d$objectid$2f$objectid$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].default().toHexString();
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$applyNodeReplacement"])(new UploadServerNode({
        data: data
    }));
}
function $isUploadServerNode(node) {
    return node instanceof UploadServerNode;
} //# sourceMappingURL=UploadNode.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/graphQLPopulationPromise.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "uploadPopulationPromiseHOC": (()=>uploadPopulationPromiseHOC)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populate.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$recursivelyPopulateFieldsForGraphQL$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/recursivelyPopulateFieldsForGraphQL.js [app-rsc] (ecmascript)");
;
;
const uploadPopulationPromiseHOC = (props)=>{
    return ({ context, currentDepth, depth, draft, editorPopulationPromises, fieldPromises, findMany, flattenLocales, node, overrideAccess, populationPromises, req, showHiddenFields })=>{
        if (node?.value) {
            const collection = req.payload.collections[node?.relationTo];
            if (collection) {
                // @ts-expect-error
                const id = node?.value?.id || node?.value // for backwards-compatibility
                ;
                const populateDepth = props?.maxDepth !== undefined && props?.maxDepth < depth ? props?.maxDepth : depth;
                populationPromises.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["populate"])({
                    id,
                    collectionSlug: collection.config.slug,
                    currentDepth,
                    data: node,
                    depth: populateDepth,
                    draft,
                    key: 'value',
                    overrideAccess,
                    req,
                    showHiddenFields
                }));
                const collectionFieldSchema = props?.collections?.[node?.relationTo]?.fields;
                if (Array.isArray(collectionFieldSchema)) {
                    if (!collectionFieldSchema?.length) {
                        return;
                    }
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$recursivelyPopulateFieldsForGraphQL$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recursivelyPopulateFieldsForGraphQL"])({
                        context,
                        currentDepth,
                        data: node.fields || {},
                        depth,
                        draft,
                        editorPopulationPromises,
                        fieldPromises,
                        fields: collectionFieldSchema,
                        findMany,
                        flattenLocales,
                        overrideAccess,
                        populationPromises,
                        req,
                        showHiddenFields,
                        siblingDoc: node.fields || {}
                    });
                }
            }
        }
    };
}; //# sourceMappingURL=graphQLPopulationPromise.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/validate.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "uploadValidation": (()=>uploadValidation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$isValidID$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/isValidID.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$ui$2f$dist$2f$forms$2f$buildStateFromSchema$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@payloadcms/ui/dist/forms/buildStateFromSchema/index.js [app-rsc] (ecmascript) <locals>");
;
;
const uploadValidation = (props)=>{
    return async ({ node, validation: { options: { id, operation, preferences, req, req: { payload, t } } } })=>{
        const idType = payload.collections[node.relationTo].customIDType || payload.db.defaultIDType;
        // @ts-expect-error
        const nodeID = node?.value?.id || node?.value // for backwards-compatibility
        ;
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$isValidID$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isValidID"])(nodeID, idType)) {
            return t('validation:validUploadID');
        }
        if (!props?.collections) {
            return true;
        }
        if (Object.keys(props?.collections).length === 0) {
            return true;
        }
        const collection = props?.collections[node.relationTo];
        if (!collection?.fields?.length) {
            return true;
        }
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$ui$2f$dist$2f$forms$2f$buildStateFromSchema$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["buildStateFromSchema"])({
            id,
            collectionSlug: node.relationTo,
            data: node?.fields ?? {},
            fieldSchema: collection.fields,
            operation: operation === 'create' || operation === 'update' ? operation : 'update',
            preferences,
            req,
            siblingData: node?.fields ?? {}
        });
        let errorPaths = [];
        for(const fieldKey in result){
            if (result[fieldKey].errorPaths) {
                errorPaths = errorPaths.concat(result[fieldKey].errorPaths);
            }
        }
        if (errorPaths.length) {
            return 'The following fields are invalid: ' + errorPaths.join(', ');
        }
        return true;
    };
}; //# sourceMappingURL=validate.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/feature.server.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "UploadFeature": (()=>UploadFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/sanitize.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populate.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$nodes$2f$UploadNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/nodes/UploadNode.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$graphQLPopulationPromise$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/graphQLPopulationPromise.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/validate.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
/**
 * Get the absolute URL for an upload URL by potentially prepending the serverURL
 */ function getAbsoluteURL(url, payload) {
    return url?.startsWith('http') ? url : (payload?.config?.serverURL || '') + url;
}
const UploadFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: async ({ config: _config, isRoot, parentIsLocalized, props })=>{
        if (!props) {
            props = {
                collections: {}
            };
        }
        const clientProps = {
            collections: {}
        };
        if (props.collections) {
            for(const collection in props.collections){
                clientProps.collections[collection] = {
                    hasExtraFields: props.collections[collection].fields.length >= 1
                };
            }
        }
        const validRelationships = _config.collections.map((c)=>c.slug) || [];
        for(const collection in props.collections){
            if (props.collections[collection].fields?.length) {
                props.collections[collection].fields = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeFields"])({
                    config: _config,
                    fields: props.collections[collection].fields,
                    parentIsLocalized,
                    requireFieldLevelRichTextEditor: isRoot,
                    validRelationships
                });
            }
        }
        return {
            ClientFeature: '@payloadcms/richtext-lexical/client#UploadFeatureClient',
            clientFeatureProps: clientProps,
            generateSchemaMap: ({ props })=>{
                if (!props?.collections) {
                    return null;
                }
                const schemaMap = new Map();
                for(const collection in props.collections){
                    if (props.collections[collection].fields?.length) {
                        schemaMap.set(collection, props.collections[collection].fields);
                    }
                }
                return schemaMap;
            },
            i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
            nodes: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                    converters: {
                        html: {
                            converter: async ({ currentDepth, depth, draft, node, overrideAccess, req, showHiddenFields })=>{
                                // @ts-expect-error - for backwards-compatibility
                                const id = node?.value?.id || node?.value;
                                if (req?.payload) {
                                    const uploadDocument = {};
                                    try {
                                        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["populate"])({
                                            id,
                                            collectionSlug: node.relationTo,
                                            currentDepth,
                                            data: uploadDocument,
                                            depth,
                                            draft,
                                            key: 'value',
                                            overrideAccess,
                                            req,
                                            showHiddenFields
                                        });
                                    } catch (ignored) {
                                        // eslint-disable-next-line no-console
                                        console.error('Lexical upload node HTML converter: error fetching upload file', ignored, 'Node:', node);
                                        return `<img />`;
                                    }
                                    const url = getAbsoluteURL(uploadDocument?.value?.url ?? '', req?.payload);
                                    /**
                * If the upload is not an image, return a link to the upload
                */ if (!uploadDocument?.value?.mimeType?.startsWith('image')) {
                                        return `<a href="${url}" rel="noopener noreferrer">${uploadDocument.value?.filename}</a>`;
                                    }
                                    /**
                * If the upload is a simple image with no different sizes, return a simple img tag
                */ if (!uploadDocument?.value?.sizes || !Object.keys(uploadDocument?.value?.sizes).length) {
                                        return `<img src="${url}" alt="${uploadDocument?.value?.filename}" width="${uploadDocument?.value?.width}"  height="${uploadDocument?.value?.height}"/>`;
                                    }
                                    /**
                * If the upload is an image with different sizes, return a picture element
                */ let pictureHTML = '<picture>';
                                    // Iterate through each size in the data.sizes object
                                    for(const size in uploadDocument.value?.sizes){
                                        const imageSize = uploadDocument.value?.sizes[size];
                                        // Skip if any property of the size object is null
                                        if (!imageSize.width || !imageSize.height || !imageSize.mimeType || !imageSize.filesize || !imageSize.filename || !imageSize.url) {
                                            continue;
                                        }
                                        const imageSizeURL = getAbsoluteURL(imageSize?.url, req?.payload);
                                        pictureHTML += `<source srcset="${imageSizeURL}" media="(max-width: ${imageSize.width}px)" type="${imageSize.mimeType}">`;
                                    }
                                    // Add the default img tag
                                    pictureHTML += `<img src="${url}" alt="Image" width="${uploadDocument.value?.width}" height="${uploadDocument.value?.height}">`;
                                    pictureHTML += '</picture>';
                                    return pictureHTML;
                                } else {
                                    return `<img src="${id}" />`;
                                }
                            },
                            nodeTypes: [
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$nodes$2f$UploadNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UploadServerNode"].getType()
                            ]
                        }
                    },
                    getSubFields: ({ node, req })=>{
                        if (!node) {
                            let allSubFields = [];
                            for(const collection in props?.collections){
                                allSubFields = allSubFields.concat(props?.collections?.[collection]?.fields);
                            }
                            return allSubFields;
                        }
                        const collection = req ? req.payload.collections[node?.relationTo] : null;
                        if (collection) {
                            const collectionFieldSchema = props?.collections?.[node?.relationTo]?.fields;
                            if (Array.isArray(collectionFieldSchema)) {
                                if (!collectionFieldSchema?.length) {
                                    return null;
                                }
                                return collectionFieldSchema;
                            }
                        }
                        return null;
                    },
                    getSubFieldsData: ({ node })=>{
                        return node?.fields;
                    },
                    graphQLPopulationPromises: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$graphQLPopulationPromise$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["uploadPopulationPromiseHOC"])(props)
                    ],
                    hooks: {
                        afterRead: [
                            ({ currentDepth, depth, draft, node, overrideAccess, populationPromises, req, showHiddenFields })=>{
                                if (!node?.value) {
                                    return node;
                                }
                                const collection = req.payload.collections[node?.relationTo];
                                if (!collection) {
                                    return node;
                                }
                                // @ts-expect-error
                                const id = node?.value?.id || node?.value // for backwards-compatibility
                                ;
                                const populateDepth = props?.maxDepth !== undefined && props?.maxDepth < depth ? props?.maxDepth : depth;
                                populationPromises.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["populate"])({
                                    id,
                                    collectionSlug: collection.config.slug,
                                    currentDepth,
                                    data: node,
                                    depth: populateDepth,
                                    draft,
                                    key: 'value',
                                    overrideAccess,
                                    req,
                                    showHiddenFields
                                }));
                                return node;
                            }
                        ]
                    },
                    node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$nodes$2f$UploadNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UploadServerNode"],
                    validations: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$validate$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["uploadValidation"])(props)
                    ]
                })
            ],
            sanitizedServerFeatureProps: props
        };
    },
    key: 'upload'
}); //# sourceMappingURL=feature.server.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        label: 'القاعدة الأفقية'
    },
    az: {
        label: 'Üfüqi Xətt'
    },
    bg: {
        label: 'Хоризонтална линия'
    },
    cs: {
        label: 'Vodorovný pravítko'
    },
    de: {
        label: 'Trennlinie'
    },
    en: {
        label: 'Horizontal Rule'
    },
    es: {
        label: 'Regla Horizontal'
    },
    fa: {
        label: 'قاعده افقی'
    },
    fr: {
        label: 'Règle horizontale'
    },
    he: {
        label: 'קו אופקי'
    },
    hr: {
        label: 'Vodoravna linija'
    },
    hu: {
        label: 'Vízszintes vonal'
    },
    it: {
        label: 'Regola Orizzontale'
    },
    ja: {
        label: '水平線'
    },
    ko: {
        label: '수평 규칙'
    },
    my: {
        label: 'Peraturan Mendatar'
    },
    nb: {
        label: 'Horisontal Regel'
    },
    nl: {
        label: 'Horizontale Regel'
    },
    pl: {
        label: 'Pozioma Linia'
    },
    pt: {
        label: 'Regra Horizontal'
    },
    ro: {
        label: 'Linie orizontală'
    },
    rs: {
        label: 'Horizontalna linija'
    },
    'rs-latin': {
        label: 'Horizontalna linija'
    },
    ru: {
        label: 'Горизонтальная линия'
    },
    sk: {
        label: 'Vodorovná čiara'
    },
    sv: {
        label: 'Horisontell linje'
    },
    th: {
        label: 'กฎขีดตรง'
    },
    tr: {
        label: 'Yatay Çizgi'
    },
    uk: {
        label: 'Горизонтальна лінія'
    },
    vi: {
        label: 'Quy tắc ngang'
    },
    zh: {
        label: '水平线'
    },
    'zh-TW': {
        label: '水平線'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/nodes/HorizontalRuleNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "$createHorizontalRuleServerNode": (()=>$createHorizontalRuleServerNode),
    "$isHorizontalRuleServerNode": (()=>$isHorizontalRuleServerNode),
    "HorizontalRuleServerNode": (()=>HorizontalRuleServerNode),
    "INSERT_HORIZONTAL_RULE_COMMAND": (()=>INSERT_HORIZONTAL_RULE_COMMAND)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lexical/Lexical.dev.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$utils$2f$LexicalUtils$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lexical/utils/LexicalUtils.dev.mjs [app-rsc] (ecmascript) <locals>");
;
;
const INSERT_HORIZONTAL_RULE_COMMAND = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createCommand"])('INSERT_HORIZONTAL_RULE_COMMAND');
class HorizontalRuleServerNode extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecoratorNode"] {
    static clone(node) {
        return new this(node.__key);
    }
    static getType() {
        return 'horizontalrule';
    }
    /**
  * Defines what happens if you copy an hr element from another page and paste it into the lexical editor
  *
  * This also determines the behavior of lexical's internal HTML -> Lexical converter
  */ static importDOM() {
        return {
            hr: ()=>({
                    conversion: $convertHorizontalRuleElement,
                    priority: 0
                })
        };
    }
    /**
  * The data for this node is stored serialized as JSON. This is the "load function" of that node: it takes the saved data and converts it into a node.
  */ static importJSON(serializedNode) {
        return $createHorizontalRuleServerNode();
    }
    /**
  * Determines how the hr element is rendered in the lexical editor. This is only the "initial" / "outer" HTML element.
  */ createDOM(config) {
        const element = document.createElement('hr');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lexical$2f$utils$2f$LexicalUtils$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["addClassNamesToElement"])(element, config.theme.hr);
        return element;
    }
    decorate() {
        return null;
    }
    /**
  * Opposite of importDOM, this function defines what happens when you copy an hr element from the lexical editor and paste it into another page.
  *
  * This also determines the behavior of lexical's internal Lexical -> HTML converter
  */ exportDOM() {
        return {
            element: document.createElement('hr')
        };
    }
    /**
  * Opposite of importJSON. This determines what data is saved in the database / in the lexical editor state.
  */ exportJSON() {
        return {
            type: 'horizontalrule',
            version: 1
        };
    }
    getTextContent() {
        return '\n';
    }
    isInline() {
        return false;
    }
    updateDOM() {
        return false;
    }
}
function $convertHorizontalRuleElement() {
    return {
        node: $createHorizontalRuleServerNode()
    };
}
function $createHorizontalRuleServerNode() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lexical$2f$Lexical$2e$dev$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$applyNodeReplacement"])(new HorizontalRuleServerNode());
}
function $isHorizontalRuleServerNode(node) {
    return node instanceof HorizontalRuleServerNode;
} //# sourceMappingURL=HorizontalRuleNode.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/markdownTransformer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "MarkdownTransformer": (()=>MarkdownTransformer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/nodes/HorizontalRuleNode.js [app-rsc] (ecmascript)");
;
const MarkdownTransformer = {
    type: 'element',
    dependencies: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HorizontalRuleServerNode"]
    ],
    export: (node, exportChildren)=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$isHorizontalRuleServerNode"])(node)) {
            return null;
        }
        return '---';
    },
    // match ---
    regExp: /^---\s*$/,
    replace: (parentNode)=>{
        const node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["$createHorizontalRuleServerNode"])();
        if (node) {
            parentNode.replace(node);
        }
    }
}; //# sourceMappingURL=markdownTransformer.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "HorizontalRuleFeature": (()=>HorizontalRuleFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/markdownTransformer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/typeUtilities.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/nodes/HorizontalRuleNode.js [app-rsc] (ecmascript)");
;
;
;
;
;
const HorizontalRuleFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#HorizontalRuleFeatureClient',
        i18n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"],
        markdownTransformers: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$markdownTransformer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MarkdownTransformer"]
        ],
        nodes: [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$typeUtilities$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createNode"])({
                converters: {
                    html: {
                        converter: ()=>{
                            return `<hr/>`;
                        },
                        nodeTypes: [
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HorizontalRuleServerNode"].getType()
                        ]
                    }
                },
                node: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$nodes$2f$HorizontalRuleNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HorizontalRuleServerNode"]
            })
        ]
    },
    key: 'horizontalRule'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/features/toolbars/inline/server/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "InlineToolbarFeature": (()=>InlineToolbarFeature)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/createServerFeature.js [app-rsc] (ecmascript)");
;
const InlineToolbarFeature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$createServerFeature$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createServerFeature"])({
    feature: {
        ClientFeature: '@payloadcms/richtext-lexical/client#InlineToolbarFeatureClient'
    },
    key: 'toolbarInline'
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/default.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "defaultEditorConfig": (()=>defaultEditorConfig),
    "defaultEditorFeatures": (()=>defaultEditorFeatures),
    "defaultEditorLexicalConfig": (()=>defaultEditorLexicalConfig)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$theme$2f$EditorTheme$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/theme/EditorTheme.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/bold/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$italic$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/italic/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$underline$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/underline/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$strikethrough$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/strikethrough/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$subscript$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/subscript/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$superscript$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/superscript/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$inlineCode$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/format/inlineCode/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$paragraph$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/paragraph/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$heading$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/heading/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$align$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/align/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$indent$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/indent/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$unorderedList$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/unorderedList/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$orderedList$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/orderedList/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$checklist$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/lists/checklist/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/link/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/relationship/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$blockquote$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/blockquote/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/upload/server/feature.server.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/horizontalRule/server/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$toolbars$2f$inline$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/features/toolbars/inline/server/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const defaultEditorLexicalConfig = {
    namespace: 'lexical',
    theme: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$theme$2f$EditorTheme$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LexicalEditorTheme"]
};
const defaultEditorFeatures = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$bold$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BoldFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$italic$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ItalicFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$underline$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UnderlineFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$strikethrough$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["StrikethroughFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$subscript$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SubscriptFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$superscript$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SuperscriptFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$format$2f$inlineCode$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["InlineCodeFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$paragraph$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ParagraphFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$heading$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HeadingFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$align$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AlignFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$indent$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["IndentFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$unorderedList$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UnorderedListFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$orderedList$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OrderedListFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$lists$2f$checklist$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ChecklistFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$link$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LinkFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$relationship$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RelationshipFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$blockquote$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BlockquoteFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$upload$2f$server$2f$feature$2e$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UploadFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$horizontalRule$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["HorizontalRuleFeature"])(),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$features$2f$toolbars$2f$inline$2f$server$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["InlineToolbarFeature"])()
];
const defaultEditorConfig = {
    features: defaultEditorFeatures,
    lexical: defaultEditorLexicalConfig
}; //# sourceMappingURL=default.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/loader.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "loadFeatures": (()=>loadFeatures),
    "sortFeaturesForOptimalLoading": (()=>sortFeaturesForOptimalLoading)
});
function createDependencyGraph(featureProviders) {
    const graph = {};
    for (const fp of featureProviders){
        graph[fp.key] = {
            dependencies: fp.dependencies || [],
            dependenciesPriority: fp.dependenciesPriority || [],
            dependenciesSoft: fp.dependenciesSoft || [],
            featureProvider: fp
        };
    }
    return graph;
}
function topologicallySortFeatures(featureProviders) {
    const graph = createDependencyGraph(featureProviders);
    const visited = {};
    const stack = [];
    for(const key in graph){
        if (!visited[key]) {
            visit(graph, key, visited, stack);
        }
    }
    return stack.reverse();
}
function visit(graph, key, visited, stack, currentPath = []) {
    if (!graph[key]) {
        throw new Error(`Feature key ${key} is not present in the dependency graph.`);
    }
    if (currentPath.includes(key)) {
        throw new Error(`Circular dependency detected: ${currentPath.join(' -> ')} -> ${key}`);
    }
    if (visited[key]) {
        return;
    }
    visited[key] = true;
    currentPath.push(key);
    // First process the hard priority dependencies
    for (const dep of graph[key].dependenciesPriority){
        if (!visited[dep]) {
            visit(graph, dep, visited, stack, currentPath);
        }
    }
    // Then process the normal dependencies, but make sure to not violate hard dependencies
    for (const dep of graph[key].dependencies){
        if (!visited[dep] && !graph[key].dependenciesPriority.includes(dep)) {
            visit(graph, dep, visited, stack, currentPath);
        }
    }
    // Then process the soft dependencies. Make sure to not violate hard and normal dependencies.
    for (const dep of graph[key].dependenciesSoft){
        if (graph[dep] && !visited[dep] && !graph[key].dependenciesPriority.includes(dep) && !graph[key].dependencies.includes(dep)) {
            visit(graph, dep, visited, stack, currentPath);
        }
    }
    stack.push(graph[key].featureProvider);
    currentPath.pop();
}
function sortFeaturesForOptimalLoading(featureProviders) {
    return topologicallySortFeatures(featureProviders);
}
async function loadFeatures({ config, isRoot, parentIsLocalized, unSanitizedEditorConfig }) {
    // First remove all duplicate features. The LAST feature with a given key wins.
    unSanitizedEditorConfig.features = unSanitizedEditorConfig.features.reverse().filter((f, i, arr)=>{
        const firstIndex = arr.findIndex((f2)=>f2.key === f.key);
        return firstIndex === i;
    }).reverse();
    unSanitizedEditorConfig.features = sortFeaturesForOptimalLoading(unSanitizedEditorConfig.features);
    const featureProviderMap = new Map(unSanitizedEditorConfig.features.map((f)=>[
            f.key,
            f
        ]));
    const resolvedFeatures = new Map();
    // Make sure all dependencies declared in the respective features exist
    let loaded = 0;
    for (const featureProvider of unSanitizedEditorConfig.features){
        if (!featureProvider.key) {
            throw new Error(`A Feature you've added does not have a key. Please add a key to the feature. This is used to uniquely identify the feature.`);
        }
        if (featureProvider.dependencies?.length) {
            for (const dependencyKey of featureProvider.dependencies){
                const found = unSanitizedEditorConfig.features.find((f)=>f.key === dependencyKey);
                if (!found) {
                    throw new Error(`Feature ${featureProvider.key} has a dependency ${dependencyKey} which does not exist.`);
                }
            }
        }
        if (featureProvider.dependenciesPriority?.length) {
            for (const priorityDependencyKey of featureProvider.dependenciesPriority){
                // look in the resolved features instead of the editorConfig.features, as a dependency requires the feature to be loaded before it, contrary to a soft-dependency
                const found = resolvedFeatures.get(priorityDependencyKey);
                if (!found) {
                    const existsInEditorConfig = unSanitizedEditorConfig.features.find((f)=>f.key === priorityDependencyKey);
                    if (!existsInEditorConfig) {
                        throw new Error(`Feature ${featureProvider.key} has a priority dependency ${priorityDependencyKey} which does not exist.`);
                    } else {
                        throw new Error(`Feature ${featureProvider.key} has a priority dependency ${priorityDependencyKey} which is not loaded before it.`);
                    }
                }
            }
        }
        const feature = typeof featureProvider.feature === 'function' ? await featureProvider.feature({
            config,
            featureProviderMap,
            isRoot,
            parentIsLocalized,
            resolvedFeatures,
            unSanitizedEditorConfig
        }) : featureProvider.feature;
        resolvedFeatures.set(featureProvider.key, {
            ...feature,
            dependencies: featureProvider.dependencies,
            dependenciesPriority: featureProvider.dependenciesPriority,
            dependenciesSoft: featureProvider.dependenciesSoft,
            key: featureProvider.key,
            order: loaded
        });
        loaded++;
    }
    return resolvedFeatures;
} //# sourceMappingURL=loader.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/sanitize.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "sanitizeServerEditorConfig": (()=>sanitizeServerEditorConfig),
    "sanitizeServerFeatures": (()=>sanitizeServerFeatures)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$loader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/loader.js [app-rsc] (ecmascript)");
;
const sanitizeServerFeatures = (features)=>{
    const sanitized = {
        converters: {
            html: []
        },
        enabledFeatures: [],
        generatedTypes: {
            modifyOutputSchemas: []
        },
        getSubFields: new Map(),
        getSubFieldsData: new Map(),
        graphQLPopulationPromises: new Map(),
        hooks: {
            afterChange: [],
            afterRead: [],
            beforeChange: [],
            beforeValidate: []
        },
        i18n: {},
        markdownTransformers: [],
        nodeHooks: {
            afterChange: new Map(),
            afterRead: new Map(),
            beforeChange: new Map(),
            beforeValidate: new Map()
        },
        nodes: [],
        validations: new Map()
    };
    if (!features?.size) {
        return sanitized;
    }
    features.forEach((feature)=>{
        if (feature?.generatedTypes?.modifyOutputSchema) {
            sanitized.generatedTypes.modifyOutputSchemas.push(feature.generatedTypes.modifyOutputSchema);
        }
        if (feature?.hooks?.beforeValidate?.length) {
            sanitized.hooks.beforeValidate = sanitized.hooks.beforeValidate?.concat(feature.hooks.beforeValidate);
        }
        if (feature?.hooks?.beforeChange?.length) {
            sanitized.hooks.beforeChange = sanitized.hooks.beforeChange?.concat(feature.hooks.beforeChange);
        }
        if (feature?.hooks?.afterRead?.length) {
            sanitized.hooks.afterRead = sanitized.hooks.afterRead?.concat(feature.hooks.afterRead);
        }
        if (feature?.hooks?.afterChange?.length) {
            sanitized.hooks.afterChange = sanitized.hooks.afterChange?.concat(feature.hooks.afterChange);
        }
        if (feature?.i18n) {
            for(const lang in feature.i18n){
                if (!sanitized.i18n[lang]) {
                    sanitized.i18n[lang] = {
                        lexical: {}
                    };
                }
                sanitized.i18n[lang].lexical[feature.key] = feature.i18n[lang];
            }
        }
        if (feature.nodes?.length) {
            sanitized.nodes = sanitized.nodes.concat(feature.nodes);
            feature.nodes.forEach((node)=>{
                const nodeType = 'with' in node.node ? node.node.replace.getType() : node.node.getType() // TODO: Idk if this works for node replacements
                ;
                if (node?.graphQLPopulationPromises?.length) {
                    sanitized.graphQLPopulationPromises.set(nodeType, node.graphQLPopulationPromises);
                }
                if (node?.validations?.length) {
                    sanitized.validations.set(nodeType, node.validations);
                }
                if (node?.converters?.html) {
                    sanitized.converters.html.push(node.converters.html);
                }
                if (node?.hooks?.afterChange) {
                    sanitized.nodeHooks?.afterChange?.set(nodeType, node.hooks.afterChange);
                }
                if (node?.hooks?.afterRead) {
                    sanitized.nodeHooks?.afterRead?.set(nodeType, node.hooks.afterRead);
                }
                if (node?.hooks?.beforeChange) {
                    sanitized.nodeHooks?.beforeChange?.set(nodeType, node.hooks.beforeChange);
                }
                if (node?.hooks?.beforeValidate) {
                    sanitized.nodeHooks?.beforeValidate?.set(nodeType, node.hooks.beforeValidate);
                }
                if (node?.getSubFields) {
                    sanitized.getSubFields?.set(nodeType, node.getSubFields);
                }
                if (node?.getSubFieldsData) {
                    sanitized.getSubFieldsData?.set(nodeType, node.getSubFieldsData);
                }
            });
        }
        if (feature.markdownTransformers?.length) {
            sanitized.markdownTransformers = sanitized.markdownTransformers.concat(feature.markdownTransformers);
        }
        sanitized.enabledFeatures.push(feature.key);
    });
    return sanitized;
};
async function sanitizeServerEditorConfig(editorConfig, config, parentIsLocalized) {
    const resolvedFeatureMap = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$loader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["loadFeatures"])({
        config,
        parentIsLocalized: parentIsLocalized,
        unSanitizedEditorConfig: editorConfig
    });
    return {
        features: sanitizeServerFeatures(resolvedFeatureMap),
        lexical: editorConfig.lexical,
        resolvedFeatureMap
    };
} //# sourceMappingURL=sanitize.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/i18n.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "i18n": (()=>i18n)
});
const i18n = {
    ar: {
        placeholder: "ابدأ بالكتابة، أو اضغط على '/' للأوامر ...",
        slashMenuBasicGroupLabel: 'أساسي',
        slashMenuListGroupLabel: 'قوائم'
    },
    az: {
        placeholder: "Yazmağa başlayın və ya əmrlər üçün '/' düyməsini basın...",
        slashMenuBasicGroupLabel: 'Əsas',
        slashMenuListGroupLabel: 'Siyahılar'
    },
    bg: {
        placeholder: "Започнете да пишете или натиснете '/' за команди...",
        slashMenuBasicGroupLabel: 'Основен',
        slashMenuListGroupLabel: 'Списъци'
    },
    cs: {
        placeholder: "Začněte psát nebo stiskněte '/' pro příkazy...",
        slashMenuBasicGroupLabel: 'Základní',
        slashMenuListGroupLabel: 'Seznamy'
    },
    de: {
        placeholder: "Beginne zu tippen oder drücke '/' für Befehle...",
        slashMenuBasicGroupLabel: 'Basis',
        slashMenuListGroupLabel: 'Listen'
    },
    en: {
        placeholder: "Start typing, or press '/' for commands...",
        slashMenuBasicGroupLabel: 'Basic',
        slashMenuListGroupLabel: 'Lists'
    },
    es: {
        placeholder: "Comience a escribir, o presione '/' para comandos...",
        slashMenuBasicGroupLabel: 'Básico',
        slashMenuListGroupLabel: 'Listas'
    },
    fa: {
        placeholder: "شروع به تایپ کنید، یا برای دستورات '/' را فشار دهید ...",
        slashMenuBasicGroupLabel: 'پایه',
        slashMenuListGroupLabel: 'لیست ها'
    },
    fr: {
        placeholder: "Commencez à taper, ou appuyez sur '/' pour les commandes...",
        slashMenuBasicGroupLabel: 'De base',
        slashMenuListGroupLabel: 'Listes'
    },
    he: {
        placeholder: "התחיל להקליד, או לחץ על '/' עבור פקודות ...",
        slashMenuBasicGroupLabel: 'בסיסי',
        slashMenuListGroupLabel: 'רשימות'
    },
    hr: {
        placeholder: "Počnite tipkati, ili pritisnite '/' za naredbe...",
        slashMenuBasicGroupLabel: 'Osnovno',
        slashMenuListGroupLabel: 'Popisi'
    },
    hu: {
        placeholder: "Kezdje el gépelni, vagy nyomja meg a '/' billentyűt a parancsokhoz...",
        slashMenuBasicGroupLabel: 'Alapvető',
        slashMenuListGroupLabel: 'Listák'
    },
    it: {
        placeholder: "Inizia a digitare, oppure premi '/' per i comandi...",
        slashMenuBasicGroupLabel: 'Base',
        slashMenuListGroupLabel: 'Elenchi'
    },
    ja: {
        placeholder: "入力を開始するか、コマンドのために'/'を押してください…",
        slashMenuBasicGroupLabel: '基本的な',
        slashMenuListGroupLabel: 'リスト'
    },
    ko: {
        placeholder: "타이핑을 시작하거나, 명령어를 입력하려면 '/'를 누르세요...",
        slashMenuBasicGroupLabel: '기본적인',
        slashMenuListGroupLabel: '목록'
    },
    my: {
        placeholder: "Mula menaip, atau tekan '/' untuk arahan...",
        slashMenuBasicGroupLabel: 'အခြေခံ',
        slashMenuListGroupLabel: 'Senarai'
    },
    nb: {
        placeholder: "Begynn å skrive, eller trykk '/' for kommandoer...",
        slashMenuBasicGroupLabel: 'Grunnleggende',
        slashMenuListGroupLabel: 'Lister'
    },
    nl: {
        placeholder: "Begin met typen, of druk op '/' voor opdrachten...",
        slashMenuBasicGroupLabel: 'Basis',
        slashMenuListGroupLabel: 'Lijsten'
    },
    pl: {
        placeholder: "Rozpocznij pisanie lub naciśnij '/' dla poleceń...",
        slashMenuBasicGroupLabel: 'Podstawowy',
        slashMenuListGroupLabel: 'Listy'
    },
    pt: {
        placeholder: "Comece a digitar, ou pressione '/' para comandos...",
        slashMenuBasicGroupLabel: 'Básico',
        slashMenuListGroupLabel: 'Listas'
    },
    ro: {
        placeholder: "Începeți să tastați sau apăsați '/' pentru comenzi...",
        slashMenuBasicGroupLabel: 'De bază',
        slashMenuListGroupLabel: 'Liste'
    },
    rs: {
        placeholder: "Počnite da kucate, ili pritisnite '/' za komande...",
        slashMenuBasicGroupLabel: 'Osnovno',
        slashMenuListGroupLabel: 'Liste'
    },
    'rs-latin': {
        placeholder: "Počnite da kucate, ili pritisnite '/' za komande...",
        slashMenuBasicGroupLabel: 'Osnovno',
        slashMenuListGroupLabel: 'Liste'
    },
    ru: {
        placeholder: "Начните печатать или нажмите '/' для команд...",
        slashMenuBasicGroupLabel: 'Базовый',
        slashMenuListGroupLabel: 'Списки'
    },
    sk: {
        placeholder: "Začnite písať alebo stlačte '/' pre príkazy...",
        slashMenuBasicGroupLabel: 'Základný',
        slashMenuListGroupLabel: 'Zoznamy'
    },
    sv: {
        placeholder: "Börja skriva, eller tryck på '/' för kommandon...",
        slashMenuBasicGroupLabel: 'Grundläggande',
        slashMenuListGroupLabel: 'Listor'
    },
    th: {
        placeholder: "เริ่มพิมพ์หรือกด '/' สำหรับคำสั่ง...",
        slashMenuBasicGroupLabel: 'พื้นฐาน',
        slashMenuListGroupLabel: 'รายการ'
    },
    tr: {
        placeholder: "Yazmaya başlayın veya komutlar için '/' tuşuna basın...",
        slashMenuBasicGroupLabel: 'Temel',
        slashMenuListGroupLabel: 'Listeler'
    },
    uk: {
        placeholder: "Почніть друкувати, або натисніть '/' для команд...",
        slashMenuBasicGroupLabel: 'Базовий',
        slashMenuListGroupLabel: 'Списки'
    },
    vi: {
        placeholder: "Bắt đầu gõ, hoặc nhấn '/' để gọi lệnh...",
        slashMenuBasicGroupLabel: 'Cơ bản',
        slashMenuListGroupLabel: 'Danh sách'
    },
    zh: {
        placeholder: "开始输入，或按'/'进行命令...",
        slashMenuBasicGroupLabel: '基础',
        slashMenuListGroupLabel: '列表'
    },
    'zh-TW': {
        placeholder: "開始輸入，或按'/'以使用命令...",
        slashMenuBasicGroupLabel: '基本的',
        slashMenuListGroupLabel: '清單'
    }
}; //# sourceMappingURL=i18n.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/generateImportMap.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "getGenerateImportMap": (()=>getGenerateImportMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$bin$2f$generateImportMap$2f$iterateFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/bin/generateImportMap/iterateFields.js [app-rsc] (ecmascript)");
;
const getGenerateImportMap = (args)=>({ addToImportMap, baseDir, config, importMap, imports })=>{
        addToImportMap('@payloadcms/richtext-lexical/client#RichTextCell');
        addToImportMap('@payloadcms/richtext-lexical/client#RichTextField');
        addToImportMap('@payloadcms/richtext-lexical/generateComponentMap#getGenerateComponentMap');
        // iterate just through args.resolvedFeatureMap.values()
        for (const resolvedFeature of args.resolvedFeatureMap.values()){
            if ('componentImports' in resolvedFeature) {
                if (typeof resolvedFeature.componentImports === 'function') {
                    resolvedFeature.componentImports({
                        addToImportMap,
                        baseDir,
                        config,
                        importMap,
                        imports
                    });
                } else if (resolvedFeature.componentImports?.length) {
                    resolvedFeature.componentImports.forEach((component)=>{
                        addToImportMap(component);
                    });
                }
            }
            const ClientComponent = resolvedFeature.ClientFeature;
            if (ClientComponent) {
                addToImportMap(ClientComponent);
            }
            /*
    Now run for all possible sub-fields
    */ if (resolvedFeature.nodes?.length) {
                for (const node of resolvedFeature.nodes){
                    if (typeof node?.getSubFields !== 'function') {
                        continue;
                    }
                    const subFields = node.getSubFields({});
                    if (subFields?.length) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$bin$2f$generateImportMap$2f$iterateFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["genImportMapIterateFields"])({
                            addToImportMap,
                            baseDir,
                            config,
                            fields: subFields,
                            importMap,
                            imports
                        });
                    }
                }
            }
        }
    }; //# sourceMappingURL=generateImportMap.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/generateSchemaMap.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "getGenerateSchemaMap": (()=>getGenerateSchemaMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$ui$2f$dist$2f$utilities$2f$buildFieldSchemaMap$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/ui/dist/utilities/buildFieldSchemaMap/traverseFields.js [app-rsc] (ecmascript)");
;
const getGenerateSchemaMap = (args)=>({ config, field, i18n, schemaMap, schemaPath })=>{
        for (const [featureKey, resolvedFeature] of args.resolvedFeatureMap.entries()){
            if (!('generateSchemaMap' in resolvedFeature) || typeof resolvedFeature.generateSchemaMap !== 'function') {
                continue;
            }
            const schemas = resolvedFeature.generateSchemaMap({
                config,
                field,
                i18n,
                props: resolvedFeature.sanitizedServerFeatureProps,
                schemaMap,
                schemaPath
            });
            if (schemas) {
                for (const [schemaKey, fields] of schemas.entries()){
                    // generate schema map entries for sub-fields using traverseFields
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$ui$2f$dist$2f$utilities$2f$buildFieldSchemaMap$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["traverseFields"])({
                        config,
                        fields,
                        i18n,
                        schemaMap: schemas,
                        schemaPath: schemaKey
                    });
                    schemaMap.set(`${schemaPath}.lexical_internal_feature.${featureKey}.${schemaKey}`, fields);
                }
            }
        }
        return schemaMap;
    }; //# sourceMappingURL=generateSchemaMap.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/forEachNodeRecursively.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "recurseNodes": (()=>recurseNodes),
    "recurseNodesAsync": (()=>recurseNodesAsync)
});
function recurseNodes({ callback, nodes }) {
    for (const node of nodes){
        callback(node);
        if ('children' in node && Array.isArray(node?.children) && node?.children?.length) {
            recurseNodes({
                callback,
                nodes: node.children
            });
        }
    }
}
async function recurseNodesAsync({ callback, nodes }) {
    for (const node of nodes){
        await callback(node);
        if ('children' in node && Array.isArray(node?.children) && node?.children?.length) {
            await recurseNodesAsync({
                callback,
                nodes: node.children
            });
        }
    }
} //# sourceMappingURL=forEachNodeRecursively.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populateLexicalPopulationPromises.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "populateLexicalPopulationPromises": (()=>populateLexicalPopulationPromises)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$forEachNodeRecursively$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/forEachNodeRecursively.js [app-rsc] (ecmascript)");
;
const populateLexicalPopulationPromises = ({ context, currentDepth, depth, draft, editorPopulationPromises, field, fieldPromises, findMany, flattenLocales, overrideAccess, populationPromises, req, showHiddenFields, siblingDoc })=>{
    const shouldPopulate = depth && currentDepth <= depth;
    if (!shouldPopulate) {
        return;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$forEachNodeRecursively$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodes"])({
        callback: (node)=>{
            const editorPopulationPromisesOfNodeType = editorPopulationPromises?.get(node.type);
            if (editorPopulationPromisesOfNodeType) {
                for (const promise of editorPopulationPromisesOfNodeType){
                    promise({
                        context,
                        currentDepth: currentDepth,
                        depth,
                        draft,
                        editorPopulationPromises,
                        field,
                        fieldPromises,
                        findMany,
                        flattenLocales,
                        node,
                        overrideAccess: overrideAccess,
                        populationPromises,
                        req,
                        showHiddenFields,
                        siblingDoc
                    });
                }
            }
        },
        nodes: siblingDoc[field?.name]?.root?.children ?? []
    });
}; //# sourceMappingURL=populateLexicalPopulationPromises.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/recurseNodeTree.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
// Initialize both flattenedNodes and nodeIDMap
__turbopack_esm__({
    "recurseNodeTree": (()=>recurseNodeTree)
});
const recurseNodeTree = ({ flattenedNodes, nodeIDMap, nodes })=>{
    if (!nodes?.length) {
        return;
    }
    for (const node of nodes){
        if (flattenedNodes) {
            flattenedNodes.push(node);
        }
        if (nodeIDMap) {
            if (node && 'id' in node && node.id) {
                nodeIDMap[node.id] = node;
            } else if ('fields' in node && typeof node.fields === 'object' && node.fields && 'id' in node.fields && node?.fields?.id) {
                nodeIDMap[node.fields.id] = node;
            }
        }
        if ('children' in node && Array.isArray(node?.children) && node?.children?.length) {
            recurseNodeTree({
                flattenedNodes,
                nodeIDMap,
                nodes: node.children
            });
        }
    }
}; //# sourceMappingURL=recurseNodeTree.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/validate/validateNodes.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "validateNodes": (()=>validateNodes)
});
async function validateNodes({ nodes, nodeValidations, validation: validationFromProps }) {
    for (const node of nodes){
        // Validate node
        const validations = nodeValidations.get(node.type);
        if (validations) {
            for (const validation of validations){
                const validationResult = await validation({
                    node,
                    nodeValidations,
                    validation: validationFromProps
                });
                if (validationResult !== true) {
                    return `${node.type} node failed to validate: ${validationResult}`;
                }
            }
        }
        // Validate node's children
        if ('children' in node && node?.children) {
            const childrenValidationResult = await validateNodes({
                nodes: node.children,
                nodeValidations,
                validation: validationFromProps
            });
            if (childrenValidationResult !== true) {
                return childrenValidationResult;
            }
        }
    }
    return true;
} //# sourceMappingURL=validateNodes.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/validate/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "richTextValidateHOC": (()=>richTextValidateHOC)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$validate$2f$validateNodes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/validate/validateNodes.js [app-rsc] (ecmascript)");
;
const richTextValidateHOC = ({ editorConfig })=>{
    const richTextValidate = async (value, options)=>{
        const { req: { t }, required } = options;
        if (required) {
            const hasChildren = !!value?.root?.children?.length;
            let hasOnlyEmptyParagraph = false;
            if (value?.root?.children?.length === 1) {
                if (value?.root?.children[0]?.type === 'paragraph') {
                    const paragraphNode = value?.root?.children[0];
                    if (paragraphNode?.children?.length === 0) {
                        hasOnlyEmptyParagraph = true;
                    } else if (paragraphNode?.children?.length === 1) {
                        const paragraphNodeChild = paragraphNode?.children[0];
                        if (paragraphNodeChild.type === 'text') {
                            if (!paragraphNodeChild?.['text']?.length) {
                                hasOnlyEmptyParagraph = true;
                            }
                        }
                    }
                }
            }
            if (!hasChildren || hasOnlyEmptyParagraph) {
                return t('validation:required');
            }
        }
        // Traverse through nodes and validate them. Just like a node can hook into the population process (e.g. link or relationship nodes),
        // they can also hook into the validation process. E.g. a block node probably has fields with validation rules.
        const rootNodes = value?.root?.children;
        if (rootNodes && Array.isArray(rootNodes) && rootNodes?.length) {
            return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$validate$2f$validateNodes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["validateNodes"])({
                nodes: rootNodes,
                nodeValidations: editorConfig.features.validations,
                validation: {
                    options,
                    value
                }
            });
        }
        return true;
    };
    return richTextValidate;
}; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@payloadcms/richtext-lexical/dist/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: require } = __turbopack_context__;
{
__turbopack_esm__({
    "lexicalEditor": (()=>lexicalEditor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$dependencies$2f$dependencyChecker$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/dependencies/dependencyChecker.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/deepCopyObject.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$default$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/default.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$loader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/loader.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/lexical/config/server/sanitize.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/i18n.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$generateImportMap$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/generateImportMap.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$generateSchemaMap$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/generateSchemaMap.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populateLexicalPopulationPromises$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/populateGraphQL/populateLexicalPopulationPromises.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/utilities/recurseNodeTree.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$afterChange$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__afterChangeTraverseFields$3e$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/hooks/afterChange/traverseFields.js [app-rsc] (ecmascript) <export traverseFields as afterChangeTraverseFields>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$afterRead$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__afterReadTraverseFields$3e$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/hooks/afterRead/traverseFields.js [app-rsc] (ecmascript) <export traverseFields as afterReadTraverseFields>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$beforeChange$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__beforeChangeTraverseFields$3e$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/hooks/beforeChange/traverseFields.js [app-rsc] (ecmascript) <export traverseFields as beforeChangeTraverseFields>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$beforeValidate$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__beforeValidateTraverseFields$3e$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/hooks/beforeValidate/traverseFields.js [app-rsc] (ecmascript) <export traverseFields as beforeValidateTraverseFields>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$configToJSONSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/configToJSONSchema.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$validate$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/richtext-lexical/dist/validate/index.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
let defaultSanitizedServerEditorConfig = null;
let checkedDependencies = false;
function lexicalEditor(props) {
    return async ({ config, isRoot, parentIsLocalized })=>{
        if (("TURBOPACK compile-time value", "development") !== 'production' && process.env.PAYLOAD_DISABLE_DEPENDENCY_CHECKER !== 'true' && !checkedDependencies) {
            checkedDependencies = true;
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$dependencies$2f$dependencyChecker$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkDependencies"])({
                dependencyGroups: [
                    {
                        name: 'lexical',
                        dependencies: [
                            'lexical',
                            '@lexical/headless',
                            '@lexical/link',
                            '@lexical/list',
                            '@lexical/mark',
                            '@lexical/markdown',
                            '@lexical/react',
                            '@lexical/rich-text',
                            '@lexical/selection',
                            '@lexical/utils'
                        ],
                        targetVersion: '0.18.0'
                    }
                ]
            });
        }
        let features = [];
        let resolvedFeatureMap;
        let finalSanitizedEditorConfig // For server only
        ;
        if (!props || !props.features && !props.lexical) {
            if (!defaultSanitizedServerEditorConfig) {
                defaultSanitizedServerEditorConfig = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeServerEditorConfig"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$default$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultEditorConfig"], config, parentIsLocalized);
                features = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObject"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$default$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultEditorFeatures"]);
            }
            finalSanitizedEditorConfig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObject"])(defaultSanitizedServerEditorConfig);
            resolvedFeatureMap = finalSanitizedEditorConfig.resolvedFeatureMap;
        } else {
            const rootEditor = config.editor;
            let rootEditorFeatures = [];
            if (typeof rootEditor === 'object' && 'features' in rootEditor) {
                rootEditorFeatures = rootEditor.features;
            }
            features = props.features && typeof props.features === 'function' ? props.features({
                defaultFeatures: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObject"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$default$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultEditorFeatures"]),
                rootFeatures: rootEditorFeatures
            }) : props.features;
            if (!features) {
                features = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObject"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$default$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultEditorFeatures"]);
            }
            const lexical = props.lexical ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObjectSimple"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$default$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultEditorConfig"].lexical);
            resolvedFeatureMap = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$loader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["loadFeatures"])({
                config,
                isRoot,
                parentIsLocalized,
                unSanitizedEditorConfig: {
                    features,
                    lexical
                }
            });
            finalSanitizedEditorConfig = {
                features: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$lexical$2f$config$2f$server$2f$sanitize$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeServerFeatures"])(resolvedFeatureMap),
                lexical,
                resolvedFeatureMap
            };
        }
        const featureI18n = finalSanitizedEditorConfig.features.i18n;
        for(const lang in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"]){
            if (!featureI18n[lang]) {
                featureI18n[lang] = {
                    lexical: {}
                };
            }
            featureI18n[lang].lexical.general = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$i18n$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["i18n"][lang];
        }
        return {
            CellComponent: {
                clientProps: {
                    admin: props?.admin,
                    lexicalEditorConfig: finalSanitizedEditorConfig.lexical
                },
                path: '@payloadcms/richtext-lexical/client#RichTextCell'
            },
            editorConfig: finalSanitizedEditorConfig,
            features,
            FieldComponent: {
                clientProps: {
                    admin: props?.admin,
                    lexicalEditorConfig: finalSanitizedEditorConfig.lexical
                },
                path: '@payloadcms/richtext-lexical/client#RichTextField'
            },
            generateComponentMap: {
                path: '@payloadcms/richtext-lexical/generateComponentMap#getGenerateComponentMap',
                serverProps: {
                    resolvedFeatureMap
                }
            },
            generateImportMap: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$generateImportMap$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getGenerateImportMap"])({
                resolvedFeatureMap
            }),
            generateSchemaMap: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$generateSchemaMap$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getGenerateSchemaMap"])({
                resolvedFeatureMap
            }),
            graphQLPopulationPromises ({ context, currentDepth, depth, draft, field, fieldPromises, findMany, flattenLocales, overrideAccess, populationPromises, req, showHiddenFields, siblingDoc }) {
                // check if there are any features with nodes which have populationPromises for this field
                if (finalSanitizedEditorConfig?.features?.graphQLPopulationPromises?.size) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$populateGraphQL$2f$populateLexicalPopulationPromises$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["populateLexicalPopulationPromises"])({
                        context,
                        currentDepth: currentDepth ?? 0,
                        depth,
                        draft,
                        editorPopulationPromises: finalSanitizedEditorConfig.features.graphQLPopulationPromises,
                        field,
                        fieldPromises,
                        findMany,
                        flattenLocales,
                        overrideAccess,
                        populationPromises,
                        req,
                        showHiddenFields,
                        siblingDoc
                    });
                }
            },
            hooks: {
                afterChange: [
                    async (args)=>{
                        const { collection, context: _context, global, operation, path, req, schemaPath } = args;
                        let { value } = args;
                        if (finalSanitizedEditorConfig?.features?.hooks?.afterChange?.length) {
                            for (const hook of finalSanitizedEditorConfig.features.hooks.afterChange){
                                value = await hook(args);
                            }
                        }
                        if (!finalSanitizedEditorConfig.features.nodeHooks?.afterChange?.size && !finalSanitizedEditorConfig.features.getSubFields?.size) {
                            return value;
                        }
                        const context = _context;
                        const nodeIDMap = {};
                        /**
          * Get the originalNodeIDMap from the beforeValidate hook, which is always run before this hook.
          */ const originalNodeIDMap = context?.internal?.richText?.[path.join('.')]?.originalNodeIDMap;
                        if (!originalNodeIDMap || !Object.keys(originalNodeIDMap).length || !value) {
                            return value;
                        }
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                            nodeIDMap,
                            nodes: value?.root?.children ?? []
                        });
                        // eslint-disable-next-line prefer-const
                        for (let [id, node] of Object.entries(nodeIDMap)){
                            const afterChangeHooks = finalSanitizedEditorConfig.features.nodeHooks?.afterChange;
                            const afterChangeHooksForNode = afterChangeHooks?.get(node.type);
                            if (afterChangeHooksForNode) {
                                for (const hook of afterChangeHooksForNode){
                                    if (!originalNodeIDMap[id]) {
                                        console.warn('(afterChange) No original node found for node with id', id, 'node:', node, 'path', path.join('.'));
                                        continue;
                                    }
                                    node = await hook({
                                        context,
                                        node,
                                        operation,
                                        originalNode: originalNodeIDMap[id],
                                        parentRichTextFieldPath: path,
                                        parentRichTextFieldSchemaPath: schemaPath,
                                        req
                                    });
                                }
                            }
                            const subFieldFn = finalSanitizedEditorConfig.features.getSubFields?.get(node.type);
                            const subFieldDataFn = finalSanitizedEditorConfig.features.getSubFieldsData?.get(node.type);
                            if (subFieldFn && subFieldDataFn) {
                                const subFields = subFieldFn({
                                    node,
                                    req
                                });
                                const data = subFieldDataFn({
                                    node,
                                    req
                                }) ?? {};
                                const originalData = subFieldDataFn({
                                    node: originalNodeIDMap[id],
                                    req
                                }) ?? {};
                                if (subFields?.length) {
                                    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$afterChange$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__afterChangeTraverseFields$3e$__["afterChangeTraverseFields"])({
                                        collection,
                                        context,
                                        data: originalData,
                                        doc: data,
                                        fields: subFields,
                                        global,
                                        operation,
                                        path,
                                        previousDoc: data,
                                        previousSiblingDoc: {
                                            ...data
                                        },
                                        req,
                                        schemaPath,
                                        siblingData: originalData || {},
                                        siblingDoc: {
                                            ...data
                                        }
                                    });
                                }
                            }
                        }
                        return value;
                    }
                ],
                afterRead: [
                    /**
        * afterRead hooks do not receive the originalNode. Thus, they can run on all nodes, not just nodes with an ID.
        */ async (args)=>{
                        const { collection, context: context, currentDepth, depth, draft, fallbackLocale, fieldPromises, findMany, flattenLocales, global, locale, overrideAccess, path, populationPromises, req, schemaPath, showHiddenFields, triggerAccessControl, triggerHooks } = args;
                        let { value } = args;
                        if (finalSanitizedEditorConfig?.features?.hooks?.afterRead?.length) {
                            for (const hook of finalSanitizedEditorConfig.features.hooks.afterRead){
                                value = await hook(args);
                            }
                        }
                        if (!finalSanitizedEditorConfig.features.nodeHooks?.afterRead?.size && !finalSanitizedEditorConfig.features.getSubFields?.size) {
                            return value;
                        }
                        const flattenedNodes = [];
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                            flattenedNodes,
                            nodes: value?.root?.children ?? []
                        });
                        for (let node of flattenedNodes){
                            const afterReadHooks = finalSanitizedEditorConfig.features.nodeHooks?.afterRead;
                            const afterReadHooksForNode = afterReadHooks?.get(node.type);
                            if (afterReadHooksForNode) {
                                for (const hook of afterReadHooksForNode){
                                    node = await hook({
                                        context,
                                        currentDepth: currentDepth,
                                        depth: depth,
                                        draft: draft,
                                        fallbackLocale: fallbackLocale,
                                        fieldPromises: fieldPromises,
                                        findMany: findMany,
                                        flattenLocales: flattenLocales,
                                        locale: locale,
                                        node,
                                        overrideAccess: overrideAccess,
                                        parentRichTextFieldPath: path,
                                        parentRichTextFieldSchemaPath: schemaPath,
                                        populationPromises: populationPromises,
                                        req,
                                        showHiddenFields: showHiddenFields,
                                        triggerAccessControl: triggerAccessControl,
                                        triggerHooks: triggerHooks
                                    });
                                }
                            }
                            const subFieldFn = finalSanitizedEditorConfig.features.getSubFields?.get(node.type);
                            const subFieldDataFn = finalSanitizedEditorConfig.features.getSubFieldsData?.get(node.type);
                            if (subFieldFn && subFieldDataFn) {
                                const subFields = subFieldFn({
                                    node,
                                    req
                                });
                                const data = subFieldDataFn({
                                    node,
                                    req
                                }) ?? {};
                                if (subFields?.length) {
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$afterRead$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__afterReadTraverseFields$3e$__["afterReadTraverseFields"])({
                                        collection,
                                        context,
                                        currentDepth: currentDepth,
                                        depth: depth,
                                        doc: data,
                                        draft: draft,
                                        fallbackLocale: fallbackLocale,
                                        fieldPromises: fieldPromises,
                                        fields: subFields,
                                        findMany: findMany,
                                        flattenLocales: flattenLocales,
                                        global,
                                        locale: locale,
                                        overrideAccess: overrideAccess,
                                        path,
                                        populationPromises: populationPromises,
                                        req,
                                        schemaPath,
                                        showHiddenFields: showHiddenFields,
                                        siblingDoc: data,
                                        triggerAccessControl,
                                        triggerHooks
                                    });
                                }
                            }
                        }
                        return value;
                    }
                ],
                beforeChange: [
                    async (args)=>{
                        const { collection, context: _context, errors, field, global, mergeLocaleActions, operation, path, req, schemaPath, siblingData, siblingDocWithLocales, skipValidation } = args;
                        let { value } = args;
                        if (finalSanitizedEditorConfig?.features?.hooks?.beforeChange?.length) {
                            for (const hook of finalSanitizedEditorConfig.features.hooks.beforeChange){
                                value = await hook(args);
                            }
                        }
                        if (!finalSanitizedEditorConfig.features.nodeHooks?.beforeChange?.size && !finalSanitizedEditorConfig.features.getSubFields?.size) {
                            return value;
                        }
                        const context = _context;
                        const nodeIDMap = {};
                        /**
          * Get the originalNodeIDMap from the beforeValidate hook, which is always run before this hook.
          */ const originalNodeIDMap = context?.internal?.richText?.[path.join('.')]?.originalNodeIDMap;
                        if (!originalNodeIDMap || !Object.keys(originalNodeIDMap).length || !value) {
                            return value;
                        }
                        const originalNodeWithLocalesIDMap = {};
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                            nodeIDMap,
                            nodes: value?.root?.children ?? []
                        });
                        if (field.name && siblingDocWithLocales?.[field.name]) {
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                                nodeIDMap: originalNodeWithLocalesIDMap,
                                nodes: siblingDocWithLocales[field.name]?.root?.children ?? []
                            });
                        }
                        // eslint-disable-next-line prefer-const
                        for (let [id, node] of Object.entries(nodeIDMap)){
                            const beforeChangeHooks = finalSanitizedEditorConfig.features.nodeHooks?.beforeChange;
                            const beforeChangeHooksForNode = beforeChangeHooks?.get(node.type);
                            if (beforeChangeHooksForNode) {
                                for (const hook of beforeChangeHooksForNode){
                                    if (!originalNodeIDMap[id]) {
                                        console.warn('(beforeChange) No original node found for node with id', id, 'node:', node, 'path', path.join('.'));
                                        continue;
                                    }
                                    node = await hook({
                                        context,
                                        errors: errors,
                                        mergeLocaleActions: mergeLocaleActions,
                                        node,
                                        operation: operation,
                                        originalNode: originalNodeIDMap[id],
                                        originalNodeWithLocales: originalNodeWithLocalesIDMap[id],
                                        parentRichTextFieldPath: path,
                                        parentRichTextFieldSchemaPath: schemaPath,
                                        req,
                                        skipValidation: skipValidation
                                    });
                                }
                            }
                            const subFieldFn = finalSanitizedEditorConfig.features.getSubFields?.get(node.type);
                            const subFieldDataFn = finalSanitizedEditorConfig.features.getSubFieldsData?.get(node.type);
                            if (subFieldFn && subFieldDataFn) {
                                const subFields = subFieldFn({
                                    node,
                                    req
                                });
                                const data = subFieldDataFn({
                                    node,
                                    req
                                }) ?? {};
                                const originalData = subFieldDataFn({
                                    node: originalNodeIDMap[id],
                                    req
                                }) ?? {};
                                const originalDataWithLocales = subFieldDataFn({
                                    node: originalNodeWithLocalesIDMap[id],
                                    req
                                }) ?? {};
                                if (subFields?.length) {
                                    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$beforeChange$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__beforeChangeTraverseFields$3e$__["beforeChangeTraverseFields"])({
                                        id,
                                        collection,
                                        context,
                                        data,
                                        doc: originalData,
                                        docWithLocales: originalDataWithLocales ?? {},
                                        errors: errors,
                                        fields: subFields,
                                        global,
                                        mergeLocaleActions: mergeLocaleActions,
                                        operation: operation,
                                        path,
                                        req,
                                        schemaPath,
                                        siblingData: data,
                                        siblingDoc: originalData,
                                        siblingDocWithLocales: originalDataWithLocales ?? {},
                                        skipValidation
                                    });
                                }
                            }
                        }
                        /**
          * within the beforeChange hook, id's may be re-generated.
          * Example:
          * 1. Seed data contains IDs for block feature blocks.
          * 2. Those are used in beforeValidate
          * 3. in beforeChange, those IDs are regenerated, because you cannot provide IDs during document creation. See baseIDField beforeChange hook for reasoning
          * 4. Thus, in order for all post-beforeChange hooks to receive the correct ID, we need to update the originalNodeIDMap with the new ID's, by regenerating the nodeIDMap.
          * The reason this is not generated for every hook, is to save on performance. We know we only really have to generate it in beforeValidate, which is the first hook,
          * and in beforeChange, which is where modifications to the provided IDs can occur.
          */ const newOriginalNodeIDMap = {};
                        const previousValue = siblingData[field.name];
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                            nodeIDMap: newOriginalNodeIDMap,
                            nodes: previousValue?.root?.children ?? []
                        });
                        if (!context.internal) {
                            // Add to context, for other hooks to use
                            context.internal = {};
                        }
                        if (!context.internal.richText) {
                            context.internal.richText = {};
                        }
                        context.internal.richText[path.join('.')] = {
                            originalNodeIDMap: newOriginalNodeIDMap
                        };
                        return value;
                    }
                ],
                beforeValidate: [
                    async (args)=>{
                        const { collection, context, global, operation, overrideAccess, path, previousValue, req, schemaPath } = args;
                        let { value } = args;
                        if (finalSanitizedEditorConfig?.features?.hooks?.beforeValidate?.length) {
                            for (const hook of finalSanitizedEditorConfig.features.hooks.beforeValidate){
                                value = await hook(args);
                            }
                        }
                        // return value if there are NO hooks
                        if (!finalSanitizedEditorConfig.features.nodeHooks?.beforeValidate?.size && !finalSanitizedEditorConfig.features.nodeHooks?.afterChange?.size && !finalSanitizedEditorConfig.features.nodeHooks?.beforeChange?.size && !finalSanitizedEditorConfig.features.getSubFields?.size) {
                            return value;
                        }
                        /**
          * beforeValidate is the first field hook which runs. This is where we can create the node map, which can then be used in the other hooks.
          *
          */ /**
             * flattenedNodes contains all nodes in the editor, in the order they appear in the editor. They will be used for the following hooks:
             * - afterRead
             *
             * The other hooks require nodes to have IDs, which is why those are ran only from the nodeIDMap. They require IDs because they have both doc/siblingDoc and data/siblingData, and
             * thus require a reliable way to match new node data to old node data. Given that node positions can change in between hooks, this is only reliably possible for nodes which are saved with
             * an ID.
             */ //const flattenedNodes: SerializedLexicalNode[] = []
                        /**
          * Only nodes with id's (so, nodes with hooks added to them) will be added to the nodeIDMap. They will be used for the following hooks:
          * - afterChange
          * - beforeChange
          * - beforeValidate
          *
          * Other hooks are handled by the flattenedNodes. All nodes in the nodeIDMap are part of flattenedNodes.
          */ const originalNodeIDMap = {};
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                            nodeIDMap: originalNodeIDMap,
                            nodes: previousValue?.root?.children ?? []
                        });
                        if (!context.internal) {
                            // Add to context, for other hooks to use
                            context.internal = {};
                        }
                        if (!context.internal.richText) {
                            context.internal.richText = {};
                        }
                        context.internal.richText[path.join('.')] = {
                            originalNodeIDMap
                        };
                        /**
          * Now that the maps for all hooks are set up, we can run the validate hook
          */ if (!finalSanitizedEditorConfig.features.nodeHooks?.beforeValidate?.size) {
                            return value;
                        }
                        const nodeIDMap = {};
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$utilities$2f$recurseNodeTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["recurseNodeTree"])({
                            //flattenedNodes,
                            nodeIDMap,
                            nodes: value?.root?.children ?? []
                        });
                        // eslint-disable-next-line prefer-const
                        for (let [id, node] of Object.entries(nodeIDMap)){
                            const beforeValidateHooks = finalSanitizedEditorConfig.features.nodeHooks.beforeValidate;
                            const beforeValidateHooksForNode = beforeValidateHooks?.get(node.type);
                            if (beforeValidateHooksForNode) {
                                for (const hook of beforeValidateHooksForNode){
                                    if (!originalNodeIDMap[id]) {
                                        console.warn('(beforeValidate) No original node found for node with id', id, 'node:', node, 'path', path.join('.'));
                                        continue;
                                    }
                                    node = await hook({
                                        context,
                                        node,
                                        operation,
                                        originalNode: originalNodeIDMap[id],
                                        overrideAccess: overrideAccess,
                                        parentRichTextFieldPath: path,
                                        parentRichTextFieldSchemaPath: schemaPath,
                                        req
                                    });
                                }
                            }
                            const subFieldFn = finalSanitizedEditorConfig.features.getSubFields?.get(node.type);
                            const subFieldDataFn = finalSanitizedEditorConfig.features.getSubFieldsData?.get(node.type);
                            if (subFieldFn && subFieldDataFn) {
                                const subFields = subFieldFn({
                                    node,
                                    req
                                });
                                const data = subFieldDataFn({
                                    node,
                                    req
                                }) ?? {};
                                const originalData = subFieldDataFn({
                                    node: originalNodeIDMap[id],
                                    req
                                }) ?? {};
                                if (subFields?.length) {
                                    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$hooks$2f$beforeValidate$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__traverseFields__as__beforeValidateTraverseFields$3e$__["beforeValidateTraverseFields"])({
                                        id,
                                        collection,
                                        context,
                                        data,
                                        doc: originalData,
                                        fields: subFields,
                                        global,
                                        operation,
                                        overrideAccess: overrideAccess,
                                        path,
                                        req,
                                        schemaPath,
                                        siblingData: data,
                                        siblingDoc: originalData
                                    });
                                }
                            }
                        }
                        return value;
                    }
                ]
            },
            i18n: featureI18n,
            outputSchema: ({ collectionIDFieldTypes, config, field, interfaceNameDefinitions, isRequired })=>{
                let outputSchema = {
                    // This schema matches the SerializedEditorState type so far, that it's possible to cast SerializedEditorState to this schema without any errors.
                    // In the future, we should
                    // 1) allow recursive children
                    // 2) Pass in all the different types for every node added to the editorconfig. This can be done with refs in the schema.
                    type: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$configToJSONSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["withNullableJSONSchemaType"])('object', isRequired),
                    properties: {
                        root: {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                                type: {
                                    type: 'string'
                                },
                                children: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        additionalProperties: true,
                                        properties: {
                                            type: {
                                                type: 'string'
                                            },
                                            version: {
                                                type: 'integer'
                                            }
                                        },
                                        required: [
                                            'type',
                                            'version'
                                        ]
                                    }
                                },
                                direction: {
                                    oneOf: [
                                        {
                                            enum: [
                                                'ltr',
                                                'rtl'
                                            ]
                                        },
                                        {
                                            type: 'null'
                                        }
                                    ]
                                },
                                format: {
                                    type: 'string',
                                    enum: [
                                        'left',
                                        'start',
                                        'center',
                                        'right',
                                        'end',
                                        'justify',
                                        ''
                                    ]
                                },
                                indent: {
                                    type: 'integer'
                                },
                                version: {
                                    type: 'integer'
                                }
                            },
                            required: [
                                'children',
                                'direction',
                                'format',
                                'indent',
                                'type',
                                'version'
                            ]
                        }
                    },
                    required: [
                        'root'
                    ]
                };
                for (const modifyOutputSchema of finalSanitizedEditorConfig.features.generatedTypes.modifyOutputSchemas){
                    outputSchema = modifyOutputSchema({
                        collectionIDFieldTypes,
                        config,
                        currentSchema: outputSchema,
                        field,
                        interfaceNameDefinitions,
                        isRequired
                    });
                }
                return outputSchema;
            },
            validate: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$richtext$2d$lexical$2f$dist$2f$validate$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["richTextValidateHOC"])({
                editorConfig: finalSanitizedEditorConfig
            })
        };
    };
}
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),

};

//# sourceMappingURL=node_modules_%40payloadcms_richtext-lexical_dist_379541._.js.map